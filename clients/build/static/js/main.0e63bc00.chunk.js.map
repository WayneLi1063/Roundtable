{"version":3,"sources":["Header.js","Footer.js","S3.js","Create.js","Edit.js","Confirm.js","JoinCreateFeedback.js","AddCourses.js","ProfilePage.js","Card.js","FilteredCardList.js","MyGroupPage.js","Homepage.js","APIEndpoints.js","GroupDetailsPage.js","SignUp.js","Login.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","toggleMenu","setState","prevState","display","handleHomePageClick","shouldRedirect","handleMyGroupClick","state","page","this","togglePage","to","url","user","photoURL","id","className","onClick","src","alt","aria-label","setAuthToken","userPhoto","role","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","style","checkStyle","React","Component","Footer","href","icon","faGithub","size","CognitoIdentityClient","require","fromCognitoIdentityPool","S3Client","PutObjectCommand","ListObjectsCommand","albumBucketName","DeleteObjectCommand","DeleteObjectsCommand","bucketRegion","s3","region","credentials","client","identityPoolId","AddPhoto","albumName","imgFile","photoKeyName","a","albumPhotosKey","encodeURIComponent","send","Prefix","Bucket","fileName","name","uploadParams","Key","Body","console","log","message","Create","toggleEmpty","emptyAlertDisplay","toggleExceed","exceedCharDisplay","toggleEmptyCourse","emptyCourseDisplay","handleImgURLChange","event","newImg","target","files","img","handleGroupNameChange","newString","value","groupName","handleCourseNameChange","newValue","courseName","handleDescriptionChange","description","handleMeetChange","when2meetURL","handlePrivateChange","private","handleHomeworkHelpChange","homeworkHelp","handleExamSquadChange","examSquad","handleNoteExchangeChange","noteExchange","handleLabMatesChange","labMates","handleProjectPartnersChange","projectPartners","handleGroupSizeChange","newSize","groupSize","handleGroupSizeOutput","handleSubmit","newGroup","length","myCourses","handleSubmitHelper","toggleForm","prevProps","courseList","teamName","totalNumber","parseInt","onSubmit","feedbackDisplay","toggleFeedback","feedbackInfo","pop","push","courseOptions","map","course","key","createDisplay","htmlFor","type","onChange","accept","max","min","toggleManyMember","manyMemberDisplay","editData","members","maxSize","_id","handleDisband","onDisband","imgURL","tags","authToken","localStorage","getItem","checked","readOnly","togglePopUpForm","Confirm","handleSumbitConfirm","confirmFunction","cardData","toggleConfirm","confirmDisplay","JoinCreateFeedback","toggleEmptyFeedback","AddCourses","showEmpty","hideEmpty","deleteCourse","fetch","method","headers","Headers","body","JSON","stringify","status","errorCallback","wsUpdate","addOneCourse","newCourseName","handleNameChange","newName","toggleAddCourse","courses","getCourseCallback","content","forEach","faTrashAlt","Profile","tab","cancelEdit","setUserProfile","submitEdit","firstName","LastName","nameErr","submitUpdate","newPhoto","userName","passwordErr","emailErr","emailErr2","error","update","FirstName","lastName","response","auth","setItem","setUser","api","base","handlers","myuser","json","email","getCourse","classList","handleFirstNameChange","handleLastNameChange","handleEmailChange","handlePassword","newPassword","handleConfirmPassword","confirmPassword","handlePhoto","URL","createObjectURL","toggleTwoButtons","test","String","toLowerCase","faPlusCircle","NOT_JOINED","MEMBER","LEADER","Card","handleDetailClick","confirmPopUp","handleManageGroup","reportGroupStatus","editFunction","switchFunction","creator","userID","includes","iconIndicators","i","iconList","indicator","index","singleIcon","getMemberIcon","aria-hidden","groupLeaderCrown","getMemberIcons","returnStatusString","displayStyleCheck","FilteredCardList","handleGroupChange","group","handleCourseChange","handleFullGroupChange","fullGroup","handleSubmitRefine","fetched","cardList","handleFilteringHelper","handleReset","renderedCards","currentCard","applied","renderCards","filter","card","confirmLeave","joinGroup","editGroup","passEditCallback","listOfCards","eachCard","toggleEditForm","filterDisplay","placeholder","h1Title","RenderMyGroups","groups","cards","toggleFilter","updateCallback","loading","Homepage","userIsMember","testbase","users","sessions","sessionsMine","thisgroup","GroupDetailsPage","getMembersInfo","leader","memberID","toggleOnError","memberArray","userDataArray","buildUserDataArray","userData","dataArray","getCurrentUser","groupID","match","params","then","res","result","errorObj","goals","Object","keys","cardKey","SignUp","formSchema","UIschema","formData","get","schema","W3CWebSocket","App","getCurrentGroups","myGroups","valueChange","setSpinnerOnDisplay","setSpinnerOffDisplay","submitCreateForm","submitEditForm","spinnerDisplay","toggleCreateForm","coverDisplay","editDisplay","togglePageTitle","currentPage","passEdit","tempEditData","disbandGroup","togglePopUp","popUpDisplay","addCourseDisplay","twoButtonDisplay","errorDisplay","errorMessage","currentCourses","groupCount","onopen","onmessage","groupList","exact","path","render","updateAppState","faSpinner","spin","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0e63bc00.chunk.js","sourcesContent":["import React from 'react';\r\nimport {NavLink, Redirect} from 'react-router-dom';\r\n\r\nexport default class Header extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            display: false,\r\n            page: this.props.page\r\n        }\r\n    }\r\n\r\n    // Toggle dropdown menu display state\r\n    toggleMenu = () => {\r\n        this.setState((prevState) => {\r\n            return {display: !prevState.display}\r\n        })\r\n    }\r\n\r\n    // Change dropdown menu display style on smaller screens\r\n    checkStyle() {\r\n        if (this.state.display === true) {\r\n            return {display: 'block'};\r\n        }\r\n        return {display: 'none'};\r\n    }\r\n\r\n    // handles the interaction after user clicks to go homepage\r\n    handleHomePageClick = () => {\r\n        this.setState({shouldRedirect: 'home'});\r\n    }\r\n\r\n    // hadnles the interaction after user clicks to go mygroup\r\n    handleMyGroupClick = () => {\r\n        this.setState({shouldRedirect: 'mygroup'});\r\n    }\r\n\r\n    render() {\r\n        if (this.state.page !== '') {\r\n            if (this.state.page === 'home') {\r\n                this.props.togglePage('');\r\n                return <Redirect to={'/home'} />\r\n            } else {\r\n                this.props.togglePage('');\r\n                return <Redirect to={'/mygroup'} />\r\n            }\r\n        } \r\n\r\n        let url = \"\"\r\n        if (this.props.user !== null) {\r\n            url = this.props.user.photoURL\r\n        }\r\n        \r\n        return (\r\n            <div id=\"nav-search\" className=\"sticky-top\">\r\n                <header>\r\n                    <nav className=\"navbar\">\r\n                        <div className=\"logo row\" onClick={this.handleHomePageClick}>\r\n                            <NavLink to='/home'><img id=\"logo\" src=\"/img/logo.png\" alt=\"Logo\" aria-label=\"Return to main page.\" /></NavLink>\r\n                            <NavLink to='/home'><p className=\"h2\" id=\"logo-text\">Round Table</p></NavLink>\r\n                        </div>\r\n                        <div className=\"nav-search\">\r\n                            <div className=\"profile-setting\">\r\n                                <div className=\"nav-links\">\r\n                                    <NavLink to='/home' className=\"text-uppercase font-weight-bold\" onClick={this.handleHomePageClick}\r\n                                        >Homepage</NavLink>\r\n                                    <NavLink to='/mygroup' className=\"text-uppercase font-weight-bold\" onClick={this.handleMyGroupClick}\r\n                                        >MyGroups</NavLink>\r\n                                    <NavLink to='/myprofile' className=\"text-uppercase font-weight-bold\">Profile</NavLink>\r\n                                    <NavLink to='/' className=\"text-uppercase font-weight-bold\" onClick={() => this.props.setAuthToken(null)}>Sign out</NavLink>\r\n                                    <NavLink to='/myprofile'><img className=\"avatar\" src={this.props.userPhoto}  alt=\"User Profile\" /></NavLink>\r\n                                </div>\r\n                                \r\n                                <div className=\"dropdown-mobile\" onClick={this.toggleMenu}>\r\n                                    <NavLink to='#' className=\"dropdown-toggle profile-link\" role=\"button\" id=\"dropdownMenuLink\"\r\n                                        data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"><img\r\n                                        className=\"avatar\" src={url} alt=\"User Profile\" /></NavLink>\r\n\r\n                                    <div className=\"dropdown-menu dropdown-menu-right\" aria-labelledby=\"dropdownMenuLink\" style={this.checkStyle()}>\r\n                                        <NavLink to='/home' onClick={this.handleHomePageClick} className=\"dropdown-item\">Homepage</NavLink>\r\n                                        <div className=\"dropdown-divider\"></div>\r\n                                        <NavLink to='/mygroup'  className=\"dropdown-item\" onClick={this.handleMyGroupClick}>MyGroups</NavLink>\r\n                                        <div className=\"dropdown-divider\"></div>\r\n                                        <NavLink to='/myprofile' className=\"dropdown-item\" >Profile</NavLink>\r\n                                        <div className=\"dropdown-divider\"></div>\r\n                                        {/* TODO: Change this to an api call. */}\r\n                                        <NavLink to='/' className=\"dropdown-item signout\" onClick={() => this.props.setAuthToken(null)}>Sign out</NavLink>\r\n                                    </div>\r\n                                    \r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </nav>\r\n                </header>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faGithub } from '@fortawesome/free-brands-svg-icons'\r\n\r\nexport default class Footer extends React.Component {\r\n    render() {\r\n        return (\r\n            <Router>\r\n            <div>\r\n                <footer> \r\n                    <div className=\"container\">\r\n                        <div className=\"row d-flex text-center justify-content-center github\">\r\n                            <a href=\"https://github.com/WayneLi1063/Roundtable\" aria-label=\"Get source code of this site from Github!\"><FontAwesomeIcon icon={faGithub} size=\"lg\" className=\"white mt-1\" /></a>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"container\">\r\n                        <div className=\"row d-flex text-center justify-content-center\">\r\n                            <div className=\"col-md-8 col-12 mt-4 mb-2\">\r\n                            <p className=\"footer-text\">This web app is designed to help college students who would like to\r\n                                create or join study groups based on their currently taking courses and study goals.\r\n                                    </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <hr className=\"rgba-light\" />\r\n                    <div className=\"container\">\r\n                        <div className=\"d-flex text-center justify-content-center\">\r\n                            <div className=\"font-small\">\r\n                                <p>&copy; 2021 Wanye Li, Andi Ren, Aryan Varshney, Coco Li. All rights reserved.</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </footer>\r\n            </div>\r\n            </Router>\r\n        )\r\n    }\r\n}","const { CognitoIdentityClient } = require(\"@aws-sdk/client-cognito-identity\");\r\nconst { fromCognitoIdentityPool, } = require(\"@aws-sdk/credential-provider-cognito-identity\");\r\nconst { S3Client, PutObjectCommand, ListObjectsCommand, DeleteObjectCommand, DeleteObjectsCommand } = require(\"@aws-sdk/client-s3\");\r\n\r\nexport const albumBucketName = \"roundtablefinder\";\r\nexport const bucketRegion = \"us-west-1\";\r\nconst IdentityPoolId = \"us-west-1:28fdba59-1304-427e-8879-19f3d8c15844\";\r\n\r\nconst s3 = new S3Client({\r\n    region: bucketRegion,\r\n    credentials: fromCognitoIdentityPool({\r\n      client: new CognitoIdentityClient({ region: bucketRegion }),\r\n      identityPoolId: IdentityPoolId, // IDENTITY_POOL_ID\r\n    }),\r\n  });\r\n\r\n// List the photo albums that exist in the bucket\r\nexport const ListAlbums = async () => {\r\n    try {\r\n      const data = await s3.send(\r\n          new ListObjectsCommand({ Delimiter: \"/\", Bucket: albumBucketName })\r\n      );\r\n  \r\n      if (data.CommonPrefixes === undefined) {\r\n        return \"\"\r\n      } else {\r\n        var albumNames = \"\"\r\n        data.CommonPrefixes.map(function (commonPrefix) {\r\n          var prefix = commonPrefix.Prefix;\r\n          var albumName = decodeURIComponent(prefix.replace(\"/\", \"\"));\r\n          albumNames = albumNames + \" \" + albumName\r\n        })\r\n        return albumNames\r\n        }\r\n    } catch (err) {\r\n      return alert(\"There was an error listing your albums: \" + err.message);\r\n    }\r\n  };\r\n  \r\n  // Create an album in the bucket\r\nexport const CreateAlbum = async (albumName) => {\r\n    albumName = albumName.trim();\r\n    if (!albumName) {\r\n      return alert(\"Album names must contain at least one non-space character.\");\r\n    }\r\n    if (albumName.indexOf(\"/\") !== -1) {\r\n      return alert(\"Album names cannot contain slashes.\");\r\n    }\r\n    var albumKey = encodeURIComponent(albumName);\r\n    try {\r\n      const key = albumKey + \"/\";\r\n      const params = { Bucket: albumBucketName, Key: key };\r\n      const data = await s3.send(new PutObjectCommand(params));\r\n      alert(\"Successfully created album.\");\r\n    } catch (err) {\r\n      return alert(\"There was an error creating your album: \" + err.message);\r\n    }\r\n  };\r\n\r\n  // Add a photo to an album\r\nexport const AddPhoto = async (albumName, imgFile, photoKeyName) => {\r\n      const albumPhotosKey = encodeURIComponent(albumName) + \"/\";\r\n      const data = await s3.send(\r\n          new ListObjectsCommand({\r\n            Prefix: albumPhotosKey,\r\n            Bucket: albumBucketName\r\n          })\r\n      );\r\n      const fileName = imgFile.name;\r\n      let photoKey = \"\";\r\n      if (photoKeyName == \"\") {\r\n        photoKey = albumPhotosKey + fileName;\r\n      } else {\r\n        photoKey = albumPhotosKey + photoKeyName;\r\n      }\r\n      const uploadParams = {\r\n        Bucket: albumBucketName,\r\n        Key: photoKey,\r\n        Body: imgFile\r\n      };\r\n      try {\r\n        const data = await s3.send(new PutObjectCommand(uploadParams));\r\n        console.log(\"Successfully uploaded photo.\");\r\n      } catch (err) {\r\n        console.log(\"There was an error uploading your photo: \", err.message);\r\n      }\r\n}\r\n\r\n// export default {\r\n//     albumBucketName, ListAlbums, bucketRegion, CreateAlbum, AddPhoto\r\n// }","import React from 'react';\r\nimport { albumBucketName, bucketRegion, AddPhoto } from './S3.js';\r\n\r\n// The form for \"create a group\" function.\r\nexport default class Create extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            img: '',\r\n            groupName: '',\r\n            description: '',\r\n            courseName: '',\r\n            when2meetURL: '',\r\n            groupSize: 2,\r\n            emptyAlertDisplay: false,\r\n            emptyCourseDisplay: false,\r\n            exceedCharDisplay: false,\r\n            homeworkHelp: false,\r\n            examSquad: false,\r\n            noteExchange: false,\r\n            labMates: false,\r\n            projectPartners: false,\r\n            private: false,\r\n            myCourses: []\r\n        }\r\n    }\r\n\r\n    // updates course list prop when database fetches\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.courseList !== prevProps.courseList) {\r\n            this.setState(() => {\r\n                return ({ myCourses: this.props.courseList, courseName: this.props.courseList[0] });\r\n            })\r\n        }\r\n    }\r\n\r\n    // Toggles an in-page alert when users submit an empty field\r\n    toggleEmpty = () => {\r\n        this.setState((prevState) => {\r\n            return { emptyAlertDisplay: !prevState.emptyAlertDisplay }\r\n        })\r\n    }\r\n\r\n    // Toggles an in-page alert when users submit a group name with more than 24 characters.\r\n    toggleExceed = () => {\r\n        this.setState((prevState) => {\r\n            return { exceedCharDisplay: !prevState.exceedCharDisplay }\r\n        })\r\n    }\r\n\r\n    // Toggles an in-page alert when users didn't input current courses or encountered conncection error.\r\n    toggleEmptyCourse = () => {\r\n        this.setState((prevState) => {\r\n            return { emptyCourseDisplay: !prevState.emptyCourseDisplay }\r\n        })\r\n    }\r\n\r\n    // Handles the user passed-in image.\r\n    handleImgURLChange = (event) => {\r\n        let newImg = event.target.files[0];\r\n        this.setState({\r\n            img: newImg\r\n        });\r\n    }\r\n\r\n    // Handles the interaction when user types in group name field.\r\n    handleGroupNameChange = (event) => {\r\n        if (this.state.emptyAlertDisplay) {\r\n            this.toggleEmpty();\r\n        }\r\n        if (this.state.exceedCharDisplay) {\r\n            this.toggleExceed();\r\n        }\r\n        let newString = event.target.value;\r\n        this.setState({\r\n            groupName: newString\r\n        });\r\n    }\r\n\r\n    // Handles the interaction when user selects an option in course name drop down.\r\n    handleCourseNameChange = (event) => {\r\n        let newValue = event.target.value;\r\n        this.setState({\r\n            courseName: newValue\r\n        });\r\n    }\r\n\r\n    // Handles the interaction when user types in description field.\r\n    handleDescriptionChange = (event) => {\r\n        let newString = event.target.value;\r\n        this.setState({\r\n            description: newString\r\n        });\r\n    }\r\n\r\n    // Handles the interaction when user types in description field.\r\n    handleMeetChange = (event) => {\r\n        let newString = event.target.value;\r\n        this.setState({\r\n            when2meetURL: newString\r\n        });\r\n    }\r\n\r\n    // Handles the interaction when user checks the private button.\r\n    handlePrivateChange = (event) => {\r\n        this.setState((prevState) => {\r\n            return { private: !prevState.private }\r\n        })\r\n    }\r\n\r\n    // Handles the interaction when user selects the Homeeork Help option.\r\n    handleHomeworkHelpChange = () => {\r\n        this.setState((prevState) => {\r\n            return { homeworkHelp: !prevState.homeworkHelp }\r\n        })\r\n    }\r\n\r\n    // Handles the interaction when user selects Exam Squad option.\r\n    handleExamSquadChange = () => {\r\n        this.setState((prevState) => {\r\n            return { examSquad: !prevState.examSquad }\r\n        })\r\n    }\r\n\r\n    // Handles the interaction when user selects Note Exchange option.\r\n    handleNoteExchangeChange = () => {\r\n        this.setState((prevState) => {\r\n            return { noteExchange: !prevState.noteExchange }\r\n        })\r\n\r\n    }\r\n\r\n    // Handles the interaction when user selects Lab Mates option.\r\n    handleLabMatesChange = () => {\r\n        this.setState((prevState) => {\r\n            return { labMates: !prevState.labMates }\r\n        })\r\n    }\r\n\r\n    // Handles the interaction when user selects Project Partners option.\r\n    handleProjectPartnersChange = () => {\r\n        this.setState((prevState) => {\r\n            return { projectPartners: !prevState.projectPartners }\r\n        })\r\n    }\r\n\r\n    // Handles the interaction when user changes the group size slider.\r\n    handleGroupSizeChange = (event) => {\r\n        let newSize = event.target.value;\r\n        this.setState({\r\n            groupSize: newSize\r\n        });\r\n    }\r\n\r\n    // Signifies what value the group size slider current is.\r\n    handleGroupSizeOutput = (event) => {\r\n        event.target.value = this.state.groupSize;\r\n    }\r\n\r\n    // Handles the create group funtion when user sumbits the create form.\r\n    handleSubmit = () => {\r\n        let newGroup = {};\r\n        if (this.state.groupName.length === 0) {\r\n            this.toggleEmpty();\r\n        } else if (this.state.groupName.length > 24) {\r\n            this.toggleExceed();\r\n        } else if (this.state.myCourses[0] === \"Please set up your current courses in profile page.\") {\r\n            this.toggleEmptyCourse();\r\n            // default img if user didn't upload image\r\n        } else {\r\n            if (this.state.img === '') {\r\n                let url = \"https://s3-us-west-2.amazonaws.com/uw-s3-cdn/wp-content/uploads/sites/81/2015/04/07090900/uw-block-w-statue-377x160.jpg\"\r\n                this.handleSubmitHelper(newGroup, url);\r\n            } else {\r\n                AddPhoto(\"GroupPhotos\", this.state.img, \"\")\r\n                let url = `https://${albumBucketName}.s3.${bucketRegion}.amazonaws.com/GroupPhotos/${this.state.img.name}`\r\n                this.handleSubmitHelper(newGroup, url);\r\n            }\r\n            this.props.toggleForm();\r\n        }\r\n    }\r\n\r\n    // update the state, display the appropriate information inside the feedback popup window\r\n    handleSubmitHelper(newGroup, url) {\r\n        newGroup.teamName = this.state.groupName;\r\n        newGroup.className = this.state.courseName;\r\n        newGroup.totalNumber = parseInt(this.state.groupSize, 10);\r\n        newGroup.img = url\r\n        newGroup.homeworkHelp = this.state.homeworkHelp\r\n        newGroup.examSquad = this.state.examSquad\r\n        newGroup.noteExchange = this.state.noteExchange\r\n        newGroup.labMates = this.state.labMates\r\n        newGroup.projectPartners = this.state.projectPartners\r\n        newGroup.description = this.state.description;\r\n        newGroup.private = this.state.private;\r\n        newGroup.when2meetURL = this.state.when2meetURL;\r\n        this.props.onSubmit(newGroup);\r\n        if (this.props.feedbackDisplay) {\r\n            this.props.toggleFeedback();\r\n            this.props.feedbackInfo.pop();\r\n            this.props.feedbackInfo.pop();\r\n            this.props.feedbackInfo.push(\"created\");\r\n            this.props.feedbackInfo.push(this.state.groupName);\r\n            this.props.toggleFeedback();\r\n        } else {\r\n            this.props.feedbackInfo.push(\"created\");\r\n            this.props.feedbackInfo.push(this.state.groupName);\r\n            this.props.toggleFeedback();\r\n        }\r\n        this.setState({\r\n            img: '',\r\n            groupName: ''\r\n        });\r\n    }\r\n\r\n    // Renders a create form for user to input.\r\n    render() {\r\n        let courseOptions = this.state.myCourses.map((course) => {\r\n            return <option value={course} key={course}>{course}</option>\r\n        })\r\n\r\n        return (\r\n            <div>\r\n                {this.props.createDisplay &&\r\n                    <div className=\"form-popup\" id=\"create-form\">\r\n                        <form className=\"form-container\">\r\n                            <h1>Create Group</h1>\r\n\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"create-new-image\" className=\"font-weight-bold\">Upload New Image</label><br />\r\n                                <input type=\"file\" id=\"create-new-image\" onChange={this.handleImgURLChange} accept=\"image/*\" />\r\n                            </div>\r\n\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"create-group-name\" className=\"font-weight-bold\">Group Name</label>\r\n                                <input type=\"text\" className=\"form-control\" id=\"create-group-name\" value={this.state.groupName} onChange={this.handleGroupNameChange} />\r\n                                {this.state.emptyAlertDisplay &&\r\n                                    <p className=\"alert-red alert-create empty-field\">This field cannot be empty.</p>\r\n                                }\r\n                                {this.state.exceedCharDisplay &&\r\n                                    <p className=\"alert-red alert-create 24-char\">This field cannot exceed 24 characters.</p>\r\n                                }\r\n                            </div>\r\n\r\n                            <div className=\"form-group\">\r\n                                <div className=\"form-group course-container\" id=\"courseList-create\">\r\n                                    <label htmlFor=\"create-course-name\" className=\"font-weight-bold\">Course Name</label>\r\n                                    <select className=\"form-control select-field\" id=\"create-course-name\" onChange={this.handleCourseNameChange}>\r\n                                        {courseOptions}\r\n                                    </select>\r\n                                    {this.state.emptyCourseDisplay &&\r\n                                        <p className=\"alert-red alert-create empty-course\">Empty current courses or connection error, please set up your courses in profile page, or refresh webpage.</p>\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"create-group-descr\" className=\"font-weight-bold\">Group Description</label>\r\n                                <input type=\"text\" className=\"form-control\" id=\"create-group-descr\" value={this.state.description} onChange={this.handleDescriptionChange} />\r\n                            </div>\r\n\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"create-meet\" className=\"font-weight-bold\">When2meet URL</label>\r\n                                <input type=\"text\" className=\"form-control\" id=\"create-meet\" value={this.state.when2meetURL} onChange={this.handleMeetChange} />\r\n                            </div>\r\n\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"create-group-size\" className=\"font-weight-bold\">Group Size (2-5)</label><br />\r\n                                <input type=\"range\" name=\"create-group-size\" max=\"5\" min=\"2\" id=\"create-group-size\"\r\n                                    className=\"g-size\" value={this.state.groupSize} onChange={this.handleGroupSizeChange} />\r\n                                <output className=\"ml-3\" name=\"create-size-output\" id=\"create-size-output\">{this.state.groupSize}</output>\r\n                            </div>\r\n\r\n                            <div className=\"form-group\">\r\n                                <div className=\"create-form-group\" aria-labelledby=\"goal-text\">\r\n                                    <p className=\"form-check-label font-weight-bold\" id=\"goal-text\">Group Goal</p>\r\n                                    <div className=\"form-check\">\r\n                                        <div className=\"row\">\r\n                                            <div className=\"col-6\">\r\n                                                <input className=\"form-check-input\" type=\"checkbox\"\r\n                                                    id=\"create-goal-1\" onClick={this.handleHomeworkHelpChange} />\r\n                                                <label className=\"form-check-label\" htmlFor=\"create-goal-1\">Homework\r\n                                                    Help</label>\r\n                                            </div>\r\n                                            <div className=\"col-6\">\r\n                                                <input className=\"form-check-input\" type=\"checkbox\"\r\n                                                    id=\"create-goal-2\" onClick={this.handleExamSquadChange} />\r\n                                                <label className=\"form-check-label\" htmlFor=\"create-goal-2\">Exam Squad</label>\r\n                                            </div>\r\n                                            <div className=\"col-6\">\r\n                                                <input className=\"form-check-input\" type=\"checkbox\"\r\n                                                    id=\"create-goal-3\" onClick={this.handleNoteExchangeChange} />\r\n                                                <label className=\"form-check-label\" htmlFor=\"create-goal-3\">Note\r\n                                                    Exchange</label>\r\n                                            </div>\r\n                                            <div className=\"col-6\">\r\n                                                <input className=\"form-check-input\" type=\"checkbox\"\r\n                                                    id=\"create-goal-4\" onClick={this.handleLabMatesChange} />\r\n                                                <label className=\"form-check-label\" htmlFor=\"create-goal-4\">Lab Mates</label>\r\n                                            </div>\r\n                                            <div className=\"col-6\">\r\n                                                <input className=\"form-check-input\" type=\"checkbox\"\r\n                                                    id=\"create-goal-5\" onClick={this.handleProjectPartnersChange} />\r\n                                                <label className=\"form-check-label\" htmlFor=\"create-goal-5\">Project\r\n                                                    Partners</label>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"form-button\">\r\n                                <button type=\"button\" id=\"submit-create\" className=\"btn save\" onClick={this.handleSubmit}>Save</button>\r\n                                <button type=\"button\" id=\"cancel-create\" className=\"btn cancel\" onClick={this.props.toggleForm}>Cancel</button>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport { albumBucketName, bucketRegion, AddPhoto } from './S3.js'\r\n\r\n// The form for \"edit\" button.\r\nexport default class Create extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            img: this.props.editData.imgURL,\r\n            groupName: this.props.editData.teamName,\r\n            courseName: this.props.editData.className,\r\n            description: this.props.editData.description,\r\n            when2meetURL: this.props.editData.when2meetURL,\r\n            private: false,\r\n            groupSize: this.props.editData.totalNumber,\r\n            homeworkHelp: this.props.editData.tags.homeworkHelp,\r\n            examSquad: this.props.editData.tags.examSquad,\r\n            noteExchange: this.props.editData.tags.noteExchange,\r\n            labMates: this.props.editData.tags.labMates,\r\n            projectPartners: this.props.editData.tags.projectPartners,\r\n            emptyAlertDisplay: false,\r\n            exceedCharDisplay: false,\r\n            manyMemberDisplay: false,\r\n            myCourses: this.props.courseList,\r\n            authToken: localStorage.getItem(\"Authorization\") || null\r\n        }\r\n    }\r\n\r\n    // updates course list prop when database fetches\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.courseList !== prevProps.courseList) {\r\n            this.setState(() => {\r\n                return ({ myCourses: this.props.courseList });\r\n            })\r\n        }\r\n    }\r\n\r\n    // Toggles an in-page alert when users submit an empty field\r\n    toggleEmpty = () => {\r\n        this.setState((prevState) => {\r\n            return { emptyAlertDisplay: !prevState.emptyAlertDisplay }\r\n        })\r\n    }\r\n\r\n    // Toggles an in-page alert when users submit a group name with more than 24 characters.\r\n    toggleExceed = () => {\r\n        this.setState((prevState) => {\r\n            return { exceedCharDisplay: !prevState.exceedCharDisplay }\r\n        })\r\n    }\r\n\r\n    // Toggles an in-page alert when users tries to lower group size past threshold,\r\n    // which is the currently occupied number of people.\r\n    toggleManyMember = () => {\r\n        this.setState((prevState) => {\r\n            return { manyMemberDisplay: !prevState.manyMemberDisplay }\r\n        })\r\n    }\r\n\r\n    // Handles the user passed-in image.\r\n    handleImgURLChange = (event) => {\r\n        let newImg = event.target.files[0];\r\n        this.setState({\r\n            img: newImg\r\n        });\r\n    }\r\n\r\n    // Handles the interaction when user types in group name field.\r\n    handleGroupNameChange = (event) => {\r\n        if (this.state.emptyAlertDisplay) {\r\n            this.toggleEmpty();\r\n        }\r\n        if (this.state.exceedCharDisplay) {\r\n            this.toggleExceed();\r\n        }\r\n        let newString = event.target.value;\r\n        this.setState({\r\n            groupName: newString\r\n        });\r\n    }\r\n\r\n    // Handles the interaction when user selects an option in course name drop down.\r\n    handleCourseNameChange = (event) => {\r\n        let newValue = event.target.value;\r\n        this.setState({\r\n            courseName: newValue\r\n        });\r\n    }\r\n\r\n    // Handles the interaction when user changes the group size slider.\r\n    handleGroupSizeChange = (event) => {\r\n        let newSize = event.target.value;\r\n        this.setState({\r\n            groupSize: newSize\r\n        });\r\n    }\r\n\r\n    // Handles the interaction when user types in description field.\r\n    handleDescriptionChange = (event) => {\r\n        let newString = event.target.value;\r\n        this.setState({\r\n            description: newString\r\n        });\r\n    }\r\n\r\n    // Handles the interaction when user types in description field.\r\n    handleMeetChange = (event) => {\r\n        let newString = event.target.value;\r\n        this.setState({\r\n            when2meetURL: newString\r\n        });\r\n    }\r\n\r\n    // Handles the interaction when user checks the private button.\r\n    handlePrivateChange = (event) => {\r\n        this.setState((prevState) => {\r\n            return { private: !prevState.private }\r\n        })\r\n    }\r\n\r\n    // Handles the interaction when user selects the Homework Help option.\r\n    handleHomeworkHelpChange = () => {\r\n        this.setState((prevState) => {\r\n            return { homeworkHelp: !prevState.homeworkHelp }\r\n        })\r\n    }\r\n\r\n    // Handles the interaction when user selects Exam Squad option.\r\n    handleExamSquadChange = () => {\r\n        this.setState((prevState) => {\r\n            return { examSquad: !prevState.examSquad }\r\n        })\r\n    }\r\n\r\n    // Handles the interaction when user selects Note Exchange option.\r\n    handleNoteExchangeChange = () => {\r\n        this.setState((prevState) => {\r\n            return { noteExchange: !prevState.noteExchange }\r\n        })\r\n\r\n    }\r\n\r\n    // Handles the interaction when user selects Lab Mates option.\r\n    handleLabMatesChange = () => {\r\n        this.setState((prevState) => {\r\n            return { labMates: !prevState.labMates }\r\n        })\r\n    }\r\n\r\n    // Handles the interaction when user selects Project Partners option.\r\n    handleProjectPartnersChange = () => {\r\n        this.setState((prevState) => {\r\n            return { projectPartners: !prevState.projectPartners }\r\n        })\r\n    }\r\n\r\n    // Signifies what value the group size slider current is.\r\n    handleGroupSizeOutput = (event) => {\r\n        event.target.value = this.state.groupSize;\r\n    }\r\n\r\n    // Handles the create group funtion when user sumbits the edit form.\r\n    handleSubmit = () => {\r\n        let newGroup = {};\r\n        if (this.state.groupName.length === 0) {\r\n            this.toggleEmpty();\r\n        } else if (this.state.groupName.length > 24) {\r\n            this.toggleExceed();\r\n        } else if (this.state.groupSize < this.props.editData.members.length) {\r\n            this.toggleManyMember();\r\n        } else {\r\n            if (typeof this.state.img !== \"string\") {\r\n                AddPhoto(\"GroupPhotos\", this.state.img, \"\")\r\n                let url = `https://${albumBucketName}.s3.${bucketRegion}.amazonaws.com/GroupPhotos/${this.state.img.name}`\r\n                this.handleSubmitHelper(newGroup, url);\r\n            } else {\r\n                this.handleSubmitHelper(newGroup, this.state.img);\r\n            }\r\n            this.props.toggleForm();\r\n        }\r\n    }\r\n\r\n    // The main interaction for handle submit\r\n    handleSubmitHelper = (newGroup, url) => {\r\n        newGroup.teamName = this.state.groupName;\r\n        newGroup.className = this.state.courseName;\r\n        newGroup.totalNumber = this.state.groupSize ? parseInt(this.state.groupSize, 10) : parseInt(this.props.editData.maxSize, 10);\r\n        newGroup.description = this.state.description;\r\n        newGroup.when2meetURL = this.state.when2meetURL;\r\n        newGroup.private = this.state.private;\r\n        newGroup.img = url;\r\n        newGroup.homeworkHelp = this.state.homeworkHelp\r\n        newGroup.examSquad = this.state.examSquad\r\n        newGroup.noteExchange = this.state.noteExchange\r\n        newGroup.labMates = this.state.labMates\r\n        newGroup.projectPartners = this.state.projectPartners\r\n        this.props.onSubmit(newGroup, this.props.editData._id);\r\n    }\r\n\r\n    // Handles the disband group funtion when user clicks on the disband function.\r\n    handleDisband = () => {\r\n        this.props.onDisband(this.props.editData);\r\n    }\r\n\r\n    // Renders an edit form for user to input.\r\n    render() {\r\n        let courseOptions = this.state.myCourses.map((course) => {\r\n            return <option value={course} key={course}>{course}</option>\r\n        })\r\n\r\n        return (\r\n            <div className=\"form-popup\" id=\"edit-form\">\r\n                <form className=\"form-container\">\r\n                    <h1>Edit Group</h1>\r\n\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"new-image\" className=\"font-weight-bold\">Upload New Image</label><br />\r\n                        <input type=\"file\" id=\"new-image\" onChange={this.handleImgURLChange} accept=\"image/*\" /><br />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"g-name\" className=\"font-weight-bold\">Group Name</label><br />\r\n                        <input type=\"text\" id=\"g-name\" value={this.state.groupName} onChange={this.handleGroupNameChange} /><br />\r\n                        {this.state.emptyAlertDisplay &&\r\n                            <p className=\"alert-red alert-edit empty-field\">This field cannot be empty.</p>\r\n                        }\r\n                        {this.state.exceedCharDisplay &&\r\n                            <p className=\"alert-red alert-edit 24-char\">This field cannot exceed 24 characters.</p>\r\n                        }\r\n                    </div>\r\n                    <div className=\"form-group courseContainer\" id=\"courseListEdit\">\r\n                        <label htmlFor=\"c-name\" className=\"font-weight-bold\">Course Name</label>\r\n                        <select className=\"form-control\" id=\"c-name\" value={this.state.courseName} onChange={this.handleCourseNameChange}>\r\n                            {courseOptions}\r\n                        </select>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"g-descr\" className=\"font-weight-bold\">Description</label><br />\r\n                        <input type=\"text\" id=\"g-descr\" value={this.state.description} onChange={this.handleDescriptionChange} /><br />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"g-meet\" className=\"font-weight-bold\">When2Meet URL</label><br />\r\n                        <input type=\"text\" id=\"g-meet\" value={this.state.when2meetURL} onChange={this.handleMeetChange} /><br />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"g-size\" className=\"font-weight-bold\">Group Size (2-5)</label><br />\r\n                        <input type=\"range\" name=\"g-size\" max=\"5\" min=\"2\" id=\"g-size\" className=\"g-size\" value={this.state.groupSize ? this.state.groupSize : this.props.editData.maxSize } onChange={this.handleGroupSizeChange} />\r\n                        <output className=\"ml-3\" name=\"size-output\" id=\"size-output\">{this.state.groupSize}</output><br />\r\n                        {this.state.manyMemberDisplay &&\r\n                            <p className=\"alert-red alert-edit many-member\">You have {this.props.editData.members.length} members which exceeds desired group size.</p>\r\n                        }\r\n                    </div>\r\n\r\n                    <div className=\"form-group\">\r\n                        <div className=\"edit-form-group\" aria-labelledby=\"goal-text\">\r\n                            <p className=\"form-check-label font-weight-bold\" id=\"goal-text\">Group Goal</p>\r\n                            <div className=\"form-check\">\r\n                                <div className=\"row\">\r\n                                    <div className=\"col-6\">\r\n                                        <input className=\"form-check-input\" type=\"checkbox\" checked={this.state.homeworkHelp} onClick={this.handleHomeworkHelpChange}\r\n                                            id=\"edit-goal-1\" readOnly />\r\n                                        <label className=\"form-check-label\" htmlFor=\"edit-goal-1\">Homework\r\n                                                    Help</label>\r\n                                    </div>\r\n                                    <div className=\"col-6\">\r\n                                        <input className=\"form-check-input\" type=\"checkbox\" onClick={this.handleExamSquadChange} checked={this.state.examSquad}\r\n                                            id=\"edit-goal-2\" readOnly />\r\n                                        <label className=\"form-check-label\" htmlFor=\"edit-goal-2\">Exam Squad</label>\r\n                                    </div>\r\n                                    <div className=\"col-6\">\r\n                                        <input className=\"form-check-input\" type=\"checkbox\" checked={this.state.noteExchange}\r\n                                            id=\"edit-goal-3\" onClick={this.handleNoteExchangeChange} readOnly />\r\n                                        <label className=\"form-check-label\" htmlFor=\"edit-goal-3\">Note\r\n                                                    Exchange</label>\r\n                                    </div>\r\n                                    <div className=\"col-6\">\r\n                                        <input className=\"form-check-input\" type=\"checkbox\" checked={this.state.labMates}\r\n                                            id=\"edit-goal-4\" onClick={this.handleLabMatesChange} readOnly />\r\n                                        <label className=\"form-check-label\" htmlFor=\"edit-goal-4\">Lab Mates</label>\r\n                                    </div>\r\n                                    <div className=\"col-6\">\r\n                                        <input className=\"form-check-input\" type=\"checkbox\" checked={this.state.projectPartners}\r\n                                            id=\"edit-goal-5\" onClick={this.handleProjectPartnersChange} readOnly />\r\n                                        <label className=\"form-check-label\" htmlFor=\"edit-goal-5\">Project\r\n                                                    Partners</label>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <label htmlFor=\"leave\">Disband the group?</label>\r\n                    <button type=\"button\" className=\"btn disband\" id=\"leave\" onClick={this.props.togglePopUpForm}>Disband</button>\r\n\r\n                    <div className=\"formButton\">\r\n                        <button type=\"button\" id=\"submit-edit\" className=\"btn save\" onClick={this.handleSubmit}>Save</button>\r\n                        <button type=\"button\" id=\"cancel-edit\" className=\"btn cancel\" onClick={this.props.toggleForm}>Cancel</button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}","import React from 'react';\r\n\r\nclass Confirm extends React.Component {\r\n    \r\n    //this calls the confirm function in the props(what you want to do when you hit yes) and then disables the page.\r\n    handleSumbitConfirm = () => {\r\n        this.props.confirmFunction(this.props.cardData);\r\n        this.props.toggleConfirm();\r\n    }\r\n    \r\n    //renders the confirm pop up form\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.props.confirmDisplay && \r\n                <div className=\"confirm-popup\" id=\"p-form\">\r\n                    <form className=\"confirm-container\">\r\n                        <h1>Are you sure?</h1>\r\n                        <div className=\"confirm-button\">\r\n                            <button type=\"button\" className=\"btn-yes\" onClick={this.handleSumbitConfirm} >Yes</button>\r\n                            <button type=\"button\" className=\"btn-no\" onClick={this.props.toggleConfirm} >No</button>\r\n                        </div>\r\n                    </form>\r\n                </div>}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Confirm;\r\n","import React from 'react';\r\n\r\n// Provides feedback when users join or create a group\r\nexport default class JoinCreateFeedback extends React.Component {\r\n    // Empty feedback content\r\n    toggleEmptyFeedback = () => {\r\n        this.props.toggleFeedback();\r\n        this.props.feedbackInfo.pop();\r\n        this.props.feedbackInfo.pop();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.props.feedbackDisplay &&\r\n                    <div className=\"feedback-pop\">\r\n                        <form className=\"pop-container\">\r\n                            <p>You have sucessfully {this.props.feedbackInfo[0]} {this.props.feedbackInfo[1]}.</p>\r\n                            <p>Please see MYGROUPS page to view your current groups.</p>\r\n                            <div className=\"popCancel\">\r\n                                <button type=\"button\" id=\"popCancel\" className=\"btn cancel\" onClick={this.toggleEmptyFeedback}>Close</button>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTrashAlt } from '@fortawesome/free-solid-svg-icons'\r\n\r\nexport default class AddCourses extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            courses: this.props.courses,\r\n            newName: '',\r\n            emptyAlertDisplay: false,\r\n            authToken: localStorage.getItem(\"Authorization\") || null\r\n        }\r\n    }\r\n\r\n    // When the props gets updated, change the state as well\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.courses !== prevProps.courses) {\r\n            this.setState(() => {\r\n                return ({ courses: this.props.courses });\r\n            })\r\n        }\r\n    }\r\n\r\n    // Called when component shows\r\n    componentDidMount() {\r\n        this.props.getCourseCallback()\r\n    }\r\n\r\n    // disable event listens.\r\n    componentWillUnmount() {\r\n\r\n    }\r\n\r\n    //shows empty field alert\r\n    showEmpty = () => {\r\n        this.setState({ emptyAlertDisplay: true })\r\n    }\r\n\r\n    //hides empty field alert\r\n    hideEmpty = () => {\r\n        this.setState({ emptyAlertDisplay: false })\r\n    }\r\n\r\n    //delete a course from the user's list\r\n    deleteCourse = async (course) => {\r\n        if (!this.state.authToken) {\r\n            return;\r\n        }\r\n        const response = await fetch(\"https://api.roundtablefinder.com/v1/courses/users\", {\r\n            method: 'DELETE',\r\n            headers: new Headers({\r\n                \"Authorization\": this.state.authToken,\r\n                \"Content-Type\": \"application/json\"\r\n            }),\r\n            body: JSON.stringify({course: course})\r\n        });\r\n        if (response.status >= 300) {\r\n            this.props.errorCallback(\"Delete course failed. Please retry\");\r\n        } else {\r\n            this.props.wsUpdate()\r\n        }\r\n    }\r\n\r\n    //add a course to the user's list\r\n    addOneCourse = async (newCourseName) => {\r\n        if (newCourseName === '') {\r\n            this.showEmpty();\r\n        } else {\r\n            if (!this.state.authToken) {\r\n                this.props.errorCallback(\"You are not authenticated\")\r\n                return;\r\n            }\r\n            const response = await fetch(\"https://api.roundtablefinder.com/v1/courses/users\", {\r\n                method: 'POST',\r\n                headers: new Headers({\r\n                    \"Authorization\": this.state.authToken,\r\n                    \"Content-Type\": \"application/json\"\r\n                }),\r\n                body: JSON.stringify({course: newCourseName})\r\n            });\r\n            if (response.status >= 300) {\r\n                this.props.errorCallback(\"Add course failed. Please retry\");\r\n            } else {\r\n                this.props.wsUpdate()\r\n            }\r\n            this.hideEmpty();\r\n        }\r\n    }\r\n\r\n    //handles the field change in the input component\r\n    handleNameChange = (event) => {\r\n        this.setState({\r\n            newName: event.target.value\r\n        })\r\n    }\r\n\r\n    //closes the pop up, and resets the input field\r\n    handleSubmit = () => {\r\n        this.props.toggleAddCourse();\r\n        this.setState({\r\n            newName: ''\r\n        })\r\n    }\r\n\r\n    //renders the component\r\n    render() {\r\n        let content = [];\r\n        let courses = this.state.courses;\r\n        if (courses) {\r\n            courses.forEach((course) => {\r\n                if (course !== \"Please set up your current courses in profile page.\") {\r\n                    content.push(<div className='course-tag'>\r\n                    {course}\r\n                    <FontAwesomeIcon icon={faTrashAlt} size=\"xs\" className=\"white trash mt-1 mr-2\" onClick={() => this.deleteCourse(course)} />\r\n                </div>)\r\n                }\r\n            })\r\n        }\r\n        \r\n        return (\r\n            <div>\r\n                <div className='addCoursePopUp'>\r\n                    <form className='addCourse-form-container'>\r\n                        <h1>Setup your current courses</h1>\r\n                        <label htmlFor=\"g-name\" className=\"font-weight-bold\">Add a course you are taking (EX. INFO340)</label><br />\r\n                        {this.state.emptyAlertDisplay &&\r\n                            <p className=\"alert-red alert-edit empty-field\">This field cannot be empty.</p>\r\n                        }\r\n                        <div className='add-course-input-flex-container'>\r\n                            <input type=\"text\" id=\"addCourseInput\" value={this.state.newName} onChange={this.handleNameChange} />\r\n                            <button type=\"button\" id=\"add-course\" className=\"btn-add\" onClick={() => { this.addOneCourse(this.state.newName) }}>Add</button>\r\n                        </div>\r\n                        <div className=\"course-list row\">\r\n                            {content}\r\n                        </div>\r\n                        <button type=\"button\" id=\"add-course-2\" className=\"btn-add-done\" onClick={() => this.handleSubmit()}>Done</button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPlusCircle } from '@fortawesome/free-solid-svg-icons';\r\nimport { albumBucketName, bucketRegion, AddPhoto } from './S3.js';\r\n\r\nexport default class Profile extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            display: 'profile',\r\n            firstName: '',\r\n            lastName: '',\r\n            email: '',\r\n            courses: '',\r\n            passwordErr: false,\r\n            nameErr: false,\r\n            newPhoto: '',\r\n            userPhoto: '',\r\n            userName: '',\r\n            authToken: localStorage.getItem(\"Authorization\") || null\r\n        }\r\n    }\r\n\r\n    // initial actions when component is created.\r\n    componentDidMount() {\r\n        this.props.toggleTwoButtons(false);\r\n        this.setUserProfile();\r\n        this.getCourse()\r\n        // this.setUserPhoto()\r\n    }\r\n\r\n    // disables all event listeners when component gets destoryed.\r\n    componentWillUnmount() {\r\n        //this.currentUserRef.off();\r\n    }\r\n\r\n    // setUserPhoto = () => {\r\n    //     this.setState({\r\n    //         userPhoto: `https://${albumBucketName}.s3.${bucketRegion}.amazonaws.com/UserFolder/${this.state.userName}`\r\n    //     })\r\n    // }\r\n    // decide to show the profile or edit tab\r\n    toggleMenu = (tab) => {\r\n        this.setState({ display: tab })\r\n    }\r\n\r\n    // handle clicks on cancel edit button\r\n    cancelEdit = () => {\r\n        this.setUserProfile();\r\n    }\r\n\r\n    validateEmail(email) {\r\n        var re = /\\S+@\\S+\\.\\S+/;\r\n        return re.test(String(email).toLowerCase());\r\n    }\r\n\r\n    // handle clicks on save change button\r\n    submitEdit = () => {\r\n        if (!this.state.authToken) {\r\n            console.error(\"no auth token, aborting\")\r\n            return;\r\n        }\r\n\r\n        if (this.state.firstName === '' && this.state.LastName === '') {\r\n            this.setState({\r\n                nameErr: true,\r\n            });\r\n        } else {\r\n            this.submitUpdate()\r\n            //const user = await response.json()\r\n\r\n            // firebase.database().ref('/users/' + uid).update({\r\n            //     name: this.state.name,\r\n            //     email: this.state.email\r\n            // }, (errorObj) => {\r\n            //     if (errorObj) {\r\n            //         this.props.errorCallback(errorObj);\r\n            //     }\r\n            // })\r\n\r\n            if (this.state.newPhoto !== '') {\r\n                AddPhoto(\"UserFolder\", this.state.newPhoto, this.state.userName)\r\n                \r\n                // TODO: Change the img handling process.\r\n\r\n                // this.imgStorageRef.child(this.state.newPhoto.name).put(this.state.newPhoto).then(() => {\r\n                //     this.imgStorageRef.child(this.state.newPhoto.name).getDownloadURL().then((url) => {\r\n                //         this.props.user.updateProfile({ photoURL: url})\r\n                //         firebase.database().ref('users').child(this.props.user.uid).update({\r\n                //             photoURL: url\r\n                //         })\r\n                //         this.setState({ url: url })\r\n                //     }).catch((errorObj) => {\r\n                //         if (errorObj) {\r\n                //             this.props.errorCallback(errorObj);\r\n                //         }\r\n                //     });\r\n                // }).catch((errorObj) => {\r\n                //     if (errorObj) {\r\n                //         this.props.errorCallback(errorObj);\r\n                //     }\r\n                // });\r\n            }\r\n\r\n            this.setState({\r\n                passwordErr: false,\r\n                nameErr: false,\r\n                emailErr: false,\r\n                emailErr2: false\r\n            })\r\n            this.setUserProfile();\r\n            this.toggleMenu('profile');\r\n        }\r\n    }\r\n\r\n    submitUpdate = async () => {\r\n        \r\n        const update = {\r\n            FirstName: this.state.firstName,\r\n            LastName: this.state.lastName,\r\n        }\r\n\r\n        const response = await fetch(\"https://api.roundtablefinder.com/v1/users/me\", {\r\n            method: 'PATCH',\r\n            headers: new Headers({\r\n                \"Authorization\": this.state.authToken,\r\n                \"Content-Type\": \"application/json\"\r\n            }),\r\n            body: JSON.stringify(update)\r\n        });\r\n        if (response.status >= 300) {\r\n            console.error(\"error:\" + response.status);\r\n            return;\r\n        }\r\n    }\r\n\r\n    // sets the authToken\r\n    setAuthToken = (auth) => {\r\n        localStorage.setItem(\"Authorization\", auth)\r\n        this.setState({authToken: auth});\r\n    }\r\n\r\n    // saves the user data\r\n    setUser = (user) => {\r\n        this.setState({user: user});\r\n    }\r\n\r\n    // fetch user information from the database\r\n    setUserProfile = async () => {\r\n        if (!this.state.authToken) {\r\n            console.error(\"no auth token found, aborting\")\r\n            return;\r\n        }\r\n        const response = await fetch(this.props.api.base + this.props.api.handlers.myuser + \"me\", {\r\n            method: 'GET',\r\n            headers: new Headers({\r\n                \"Authorization\": this.state.authToken\r\n            })\r\n        });\r\n        if (response.status >= 300) {\r\n            console.error(\"error:\" + response.status);\r\n            return;\r\n        }\r\n        const user = await response.json()\r\n        this.setState({\r\n            firstName: user.firstName,\r\n            lastName: user.lastName,\r\n            email: user.email,\r\n            url: user.photoURL,\r\n            userName: user.userName,\r\n            userPhoto: `https://${albumBucketName}.s3.${bucketRegion}.amazonaws.com/UserFolder/${user.userName}`\r\n        })\r\n    }\r\n\r\n    // calls the course api to get user's current courses\r\n    getCourse = async () => {\r\n        if (!this.state.authToken) {\r\n            console.error(\"no auth\")\r\n            return;\r\n        }\r\n        const response = await fetch(\"https://api.roundtablefinder.com/v1/courses/users\", {\r\n            method: 'GET',\r\n            headers: new Headers({\r\n                \"Authorization\": this.state.authToken\r\n            })\r\n        });\r\n        if (response.status >= 300) {\r\n            console.error(\"Get course failed. Please retry\");\r\n            return;\r\n        }\r\n        const courses = await response.json()\r\n        if (courses !== null) {\r\n            this.setState({ courses: courses.classList });\r\n        }\r\n    }\r\n\r\n    // handle name change when users edit their profiles\r\n    handleFirstNameChange = (event) => {\r\n        this.setState({ firstName: event.target.value })\r\n    }\r\n\r\n    handleLastNameChange = (event) => {\r\n        this.setState({ lastName: event.target.value })\r\n    }\r\n\r\n    // handle email change when users edit their profiles\r\n    handleEmailChange = (event) => {\r\n        this.setState({ email: event.target.value })\r\n    }\r\n\r\n    // handle password change when users edit their profiles\r\n    handlePassword = (event) => {\r\n        this.setState({ newPassword: event.target.value })\r\n    }\r\n\r\n    // handle confirm password change when users edit their profiles\r\n    handleConfirmPassword = (event) => {\r\n        this.setState({ confirmPassword: event.target.value })\r\n    }\r\n\r\n    // handle profile photo change when users edit their profiles\r\n    handlePhoto = (event) => {\r\n        this.setState({ \r\n            newPhoto: event.target.files[0],\r\n            url: URL.createObjectURL(event.target.files[0])\r\n        })\r\n    }\r\n\r\n    render() {\r\n        let content = [];\r\n\r\n        let url = \"\"\r\n        if (this.props.user !== null) {\r\n            url = this.props.user.photoURL\r\n        }\r\n\r\n        let courses = this.state.courses;\r\n        if (courses.length !== 0) {\r\n            courses.forEach(course => {\r\n                content.push(<div key={course} id=\"class-name\" className={`class-name + ${course}`}> {course} </div>)\r\n            })\r\n        }\r\n\r\n        if (this.state.display === 'profile') {\r\n            return (\r\n                <div className=\"container\">\r\n                    <div className=\"row my-2\">\r\n                        <div className=\"col-lg-8 order-lg-2\">\r\n                            <ul className=\"nav nav-tabs\">\r\n                                <li className=\"nav-item\">\r\n                                    <button onClick={() => this.toggleMenu('profile')} className=\"nav-link active\">Profile</button>\r\n                                </li>\r\n                                <li className=\"nav-item\">\r\n                                    <button onClick={() => this.toggleMenu('edit')} className=\"nav-link\">Edit</button>\r\n                                </li>\r\n                            </ul>\r\n                            <div className=\"tab-content py-4\">\r\n                                <div className=\"tab-pane active\" id=\"profile\">\r\n                                    <h5 className=\"mb-3\">User Profile</h5>\r\n                                    <div className=\"row\">\r\n                                        <div className=\"user-profile ml-3\">\r\n                                            <h6>firstName</h6>\r\n                                            <p>{this.state.firstName}</p>\r\n                                            <h6>LastName</h6>\r\n                                            <p>{this.state.lastName}</p>\r\n                                            <h6>E-mail</h6>\r\n                                            <p>{this.state.email}</p>\r\n                                            <h6>Current Courses</h6>\r\n                                            <div className=\"my-courses\">\r\n                                                {content}\r\n                                            </div>\r\n                                            <FontAwesomeIcon icon={faPlusCircle} size=\"lg\" className=\"mx-3 mt-1\" onClick={this.props.toggleAddCourse} />\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-lg-4 order-lg-1\">\r\n                            <img src={this.state.userPhoto} className=\"mx-auto img-fluid img-circle d-block user-img\" alt=\"avatar\"></img>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )\r\n        } else {\r\n            return (\r\n                <div className=\"container\">\r\n                    <div className=\"row my-2\">\r\n                        <div className=\"col-lg-8 order-lg-2\">\r\n                            <ul className=\"nav nav-tabs\">\r\n                                <li className=\"nav-item\">\r\n                                    <button onClick={() => this.toggleMenu('profile')} className=\"nav-link\">Profile</button>\r\n                                </li>\r\n                                <li className=\"nav-item\">\r\n                                    <button onClick={() => this.toggleMenu('edit')} className=\"nav-link active\">Edit</button>\r\n                                </li>\r\n                            </ul>\r\n                            <div className=\"tab-content py-4\">\r\n                                <div className=\"tab-pane active\" id=\"edit\">\r\n                                    <form>\r\n                                        <div className=\"form-group row\">\r\n                                            <label className=\"col-lg-3 col-form-label form-control-label\">First Name</label>\r\n                                            <div className=\"col-lg-9\">\r\n                                                <input className=\"form-control\" type=\"text\" value={this.state.firstName} onChange={this.handleFirstNameChange}></input>\r\n                                            </div>\r\n                                            {this.state.nameErr && <p className='name-err'>Name cannot be empty!</p>}\r\n                                        </div>\r\n                                        <div className=\"form-group row\">\r\n                                            <label className=\"col-lg-3 col-form-label form-control-label\">Last Name</label>\r\n                                            <div className=\"col-lg-9\">\r\n                                                <input className=\"form-control\" type=\"text\" value={this.state.lastName} onChange={this.handleLastNameChange}></input>\r\n                                            </div>\r\n                                            {this.state.nameErr && <p className='name-err'>Name cannot be empty!</p>}\r\n                                        </div>\r\n                                        <div className=\"form-group row\">\r\n                                            <label className=\"col-lg-3 col-form-label form-control-label\"></label>\r\n                                            <div className=\"col-lg-9\">\r\n                                                <input type=\"reset\" className=\"btn btn-secondary mr-3\" value=\"Cancel\" onClick={this.cancelEdit}></input>\r\n                                                <input type=\"button\" className=\"btn btn-primary\" value=\"Save Changes\" onClick={this.submitEdit}></input>\r\n                                            </div>\r\n                                        </div>\r\n                                    </form>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-lg-4 order-lg-1\">\r\n                            <img src={this.state.userPhoto} className=\"mx-auto img-fluid img-circle d-block user-img\" alt=\"avatar\"></img>\r\n                            <div className=\"custom-file\">\r\n                                <input type=\"file\" className=\"custom-file-input\" onChange={this.handlePhoto} />\r\n                                <label className=\"custom-file-label\">Upload a different photo</label>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n\r\n    }\r\n}\r\n\r\n/*\r\n                                        <div className=\"form-group row\">\r\n                                            <label className=\"col-lg-3 col-form-label form-control-label\">Email</label>\r\n                                            <div className=\"col-lg-9\">\r\n                                                <input className=\"form-control\" type=\"email\" value={this.state.email} onChange={this.handleEmailChange}></input>\r\n                                            </div>\r\n                                            {this.state.emailErr && <p className='email-err'>Email cannot be empty!</p>}\r\n                                            {this.state.emailErr2 && <p className='email-err'>Email is not validated!</p>}\r\n                                        </div>\r\n\r\n                                                \r\n\r\n                                        */","import React from 'react';\r\nimport Confirm from './Confirm.js';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nconst NOT_JOINED = 0; // This user doesn't belong in this group\r\nconst MEMBER = 1; // This user is a member\r\nconst LEADER = 2; // This user is a leader\r\n\r\nclass Card extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            confirmPopUp: false,\r\n            shouldRedirect: false\r\n        }\r\n    }\r\n\r\n    // handles the interaction when user wants to show details for a group.\r\n    handleDetailClick = () => {\r\n        this.setState({shouldRedirect: true});\r\n    }\r\n\r\n    //this is a toggle switch for confirm pop up window, it switchs the display of the popup everytime its called.\r\n    toggleConfirm = () => {\r\n        this.setState((prevState) => {\r\n            return { confirmPopUp: !prevState.confirmPopUp };\r\n        })\r\n    }\r\n\r\n    //this is a hub controller for all functions revolving a card.\r\n    handleManageGroup = () => {\r\n        if (this.props.feedbackDisplay && this.reportGroupStatus() === NOT_JOINED) {\r\n            this.props.toggleFeedback();\r\n            this.props.feedbackInfo.pop();\r\n            this.props.feedbackInfo.pop();\r\n            this.props.feedbackInfo.push(\"joined\");\r\n            this.props.feedbackInfo.push(this.props.cardData.teamName);\r\n            this.props.toggleFeedback();\r\n        } else if (this.reportGroupStatus() === NOT_JOINED) {\r\n            this.props.feedbackInfo.push(\"joined\");\r\n            this.props.feedbackInfo.push(this.props.cardData.teamName);\r\n            this.props.toggleFeedback();\r\n        }\r\n\r\n        if (this.reportGroupStatus() === LEADER) {\r\n            this.props.editFunction(this.props.cardData);\r\n        } else if (this.reportGroupStatus() === MEMBER) {\r\n            this.toggleConfirm();\r\n        } else {\r\n            this.props.switchFunction(this.props.cardData);\r\n        }\r\n        this.props.fetch()\r\n    }\r\n\r\n    // returns the group status for this current user\r\n    reportGroupStatus() {\r\n        let members = this.props.cardData.members;\r\n        let creator = this.props.cardData.creator;\r\n        if (creator.userID === this.props.user.id) {\r\n            return LEADER\r\n        } else if (members.includes(this.props.user.id)){\r\n            return MEMBER\r\n        } else {\r\n            return NOT_JOINED;\r\n        }\r\n    }\r\n\r\n    // Returns a serie of icons to represent the current member status(joined / group size).\r\n    getMemberIcons() {\r\n        let iconIndicators = [];\r\n        for (let i = 0; i < this.props.cardData.maxSize; i++) {\r\n            if (i < this.props.cardData.members.length) {\r\n                iconIndicators.push(true);\r\n            } else {\r\n                iconIndicators.push(false);\r\n            }\r\n        }\r\n\r\n        let iconList = [];\r\n\r\n        iconIndicators.forEach((indicator, index) => {\r\n            let singleIcon = (\r\n                this.getMemberIcon(indicator, index)\r\n            )\r\n            iconList.push(singleIcon);\r\n        })\r\n\r\n        return (\r\n            <div className=\"team-viz\">\r\n                {iconList}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    //Return one memeber icon, depending on the indicator, it can either be full or empty;\r\n    getMemberIcon(indicator, index) {\r\n        if (indicator) {\r\n            return (\r\n                <img src=\"img/mF.png\" alt=\"member icon, occupied\" aria-hidden=\"true\" key={index}></img>\r\n            )\r\n        } else {\r\n            return (\r\n                <img src=\"img/mE.png\" alt=\"member icon, occupied\" aria-hidden=\"true\" key={index}></img>\r\n            )\r\n        }\r\n    }\r\n\r\n    //return the correct status string in the card interaction button according to the status in the card's state.\r\n    returnStatusString() {\r\n        if (this.reportGroupStatus() === NOT_JOINED) {\r\n            return \"Join\";\r\n        } else if (this.reportGroupStatus() === MEMBER) {\r\n            return \"Leave\";\r\n        }\r\n        return \"Edit\";\r\n    }\r\n\r\n    // If the user is the group founder, adds a crown icon next to the group name\r\n    groupLeaderCrown() {\r\n        if (this.reportGroupStatus() === LEADER) {\r\n            return (<img className=\"leader\" src=\"img/crown.svg\" alt=\"You are leader\"></img>);\r\n        }\r\n        return \"\";\r\n    }\r\n\r\n    // not display the group when the group is full\r\n    displayStyleCheck() {\r\n        if (this.props.cardData.members.length === this.props.cardData.maxSize && this.reportGroupStatus() === NOT_JOINED) {\r\n            return { display: 'none' }\r\n        } else {\r\n            return { display: 'inline-block' }\r\n        }\r\n    }\r\n\r\n    // Renders a single card (group) object.\r\n    render() {\r\n        if (this.state.shouldRedirect) {\r\n            return <Redirect to={'/group/' + this.props.cardData._id} />\r\n        }\r\n        return (\r\n            <div>\r\n                <div className=\"flex-card\">\r\n                    <img id=\"g-img\" src={this.props.cardData.imgURL} alt={\"Group \" + this.props.cardData.teamName} onClick={this.handleDetailClick} aria-haspopup=\"true\"/>\r\n                    <div className=\"card-content\">\r\n                        <div className=\"card-text\">\r\n                            <div className=\"group-name\"> {this.props.cardData.teamName} </div>\r\n                            {this.groupLeaderCrown()}\r\n                            <div id=\"class-name\" className={`class-name`}> {this.props.cardData.className} </div>\r\n                        </div>\r\n\r\n                        {this.getMemberIcons()}\r\n\r\n                        <div className=\"group-info\">\r\n                            <div className=\"group-size\">\r\n                                Group of {this.props.cardData.maxSize}\r\n                                <button className={this.returnStatusString().toLowerCase()} style={this.displayStyleCheck()} onClick={this.handleManageGroup}> {this.returnStatusString()} </button>\r\n                            </div>\r\n                            <div className=\"looking-for\"> Looking for {this.props.cardData.maxSize - this.props.cardData.members.length} more</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <Confirm confirmDisplay={this.state.confirmPopUp} confirmFunction={this.props.confirmFunction} cardData={this.props.cardData}\r\n                    toggleConfirm={this.toggleConfirm}></Confirm>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card.js';\r\n\r\nexport default class FilteredCardList extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            group: '',\r\n            course: '',\r\n            homeworkHelp: false,\r\n            examSquad: false,\r\n            noteExchange: false,\r\n            labMates: false,\r\n            projectPartners: false,\r\n            cardList: this.props.renderedCards,\r\n            fullGroup: false,\r\n            fetched: false,\r\n            applied: false,\r\n            authToken: localStorage.getItem(\"Authorization\") || null\r\n        }\r\n    }\r\n\r\n    // updates card list prop when database fetches\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.renderedCards !== prevProps.renderedCards) {\r\n            this.setState(() => {\r\n                return ({ cardList: this.props.renderedCards });\r\n            })\r\n        }\r\n    }\r\n\r\n    // handles the appearance of course name field when user types in that field\r\n    handleGroupChange = (event) => {\r\n        let newValue = event.target.value\r\n        this.setState({ group: newValue });\r\n    }\r\n\r\n    // handles the appearance of course name field when user types in that field\r\n    handleCourseChange = (event) => {\r\n        let newValue = event.target.value\r\n        this.setState({ course: newValue });\r\n    }\r\n\r\n    // Handles the interaction when user selects the Homeeork Help option.\r\n    handleHomeworkHelpChange = () => {\r\n        this.setState((prevState) => {\r\n            return { homeworkHelp: !prevState.homeworkHelp }\r\n        })\r\n    }\r\n\r\n    // Handles the interaction when user selects Exam Squad option.\r\n    handleExamSquadChange = () => {\r\n        this.setState((prevState) => {\r\n            return { examSquad: !prevState.examSquad }\r\n        })\r\n    }\r\n\r\n    // Handles the interaction when user selects Note Exchange option.\r\n    handleNoteExchangeChange = () => {\r\n        this.setState((prevState) => {\r\n            return { noteExchange: !prevState.noteExchange }\r\n        })\r\n\r\n    }\r\n\r\n    // Handles the interaction when user selects Lab Mates option.\r\n    handleLabMatesChange = () => {\r\n        this.setState((prevState) => {\r\n            return { labMates: !prevState.labMates }\r\n        })\r\n    }\r\n\r\n    // Handles the interaction when user selects Project Partners option.\r\n    handleProjectPartnersChange = () => {\r\n        this.setState((prevState) => {\r\n            return { projectPartners: !prevState.projectPartners }\r\n        })\r\n    }\r\n\r\n    // handles the interaction when user selects \"don't display full group\" option.\r\n    handleFullGroupChange = () => {\r\n        this.setState((prevState) => {\r\n            return { fullGroup: !prevState.fullGroup }\r\n        })\r\n    }\r\n\r\n    // Signifies what value the group size slider current is.\r\n    handleGroupSizeOutput = (event) => {\r\n        event.target.value = this.state.groupSize;\r\n    }\r\n\r\n    // handles the refine request and puts the filtered card list into state.\r\n    handleSubmitRefine = () => {\r\n        this.setState({\r\n            fetched: true,\r\n            cardList: this.handleFilteringHelper()\r\n        })\r\n    }\r\n\r\n    // handles the reset filter status and puts all groups back to the page.\r\n    handleReset = () => {\r\n        this.setState(() => {\r\n            return ({\r\n                group: '',\r\n                course: '',\r\n                homeworkHelp: false,\r\n                examSquad: false,\r\n                noteExchange: false,\r\n                labMates: false,\r\n                projectPartners: false,\r\n                cardList: this.props.renderedCards,\r\n                fullGroup: false,\r\n                currentCard: null,\r\n                applied: false\r\n            })\r\n        })\r\n    }\r\n\r\n    // returns the filtered group list according to user's input.\r\n    handleFilteringHelper = () => {\r\n        let renderCards = this.props.renderedCards;\r\n        if (this.state.group !== '') {\r\n            renderCards = renderCards.filter((card) => {\r\n                return (card.teamName.toLowerCase().includes(this.state.group.toLowerCase()))\r\n            })\r\n        }\r\n        if (this.state.course !== '') {\r\n            renderCards = renderCards.filter((card) => {\r\n                return (card.className.toLowerCase().includes(this.state.course.toLowerCase()));\r\n            })\r\n        }\r\n        if (this.state.homeworkHelp) {\r\n            renderCards = renderCards.filter((card) => {\r\n                return (card.tags.homeworkHelp);\r\n            })\r\n        }\r\n        if (this.state.examSquad) {\r\n            renderCards = renderCards.filter((card) => {\r\n                return (card.tags.examSquad);\r\n            })\r\n        }\r\n        if (this.state.noteExchange) {\r\n            renderCards = renderCards.filter((card) => {\r\n                return (card.tags.noteExchange);\r\n            })\r\n        }\r\n        if (this.state.labMates) {\r\n            renderCards = renderCards.filter((card) => {\r\n                return (card.tags.labMates);\r\n            })\r\n        }\r\n        if (this.state.projectPartners) {\r\n            renderCards = renderCards.filter((card) => {\r\n                return (card.tags.projectPartners);\r\n            })\r\n        }\r\n        if (this.state.fullGroup) {\r\n            renderCards = renderCards.filter((card) => {\r\n                return (card.members.length !== card.totalNumber);\r\n            })\r\n        }\r\n        if (renderCards === this.props.renderedCards) {\r\n            this.setState(() => {\r\n                return ({ applied: false })\r\n            })\r\n        } else {\r\n            this.setState(() => {\r\n                return ({ applied: true })\r\n            })\r\n        }\r\n        return renderCards;\r\n    }\r\n\r\n    // confirm user's decision on leaving the passed in study group.\r\n    confirmLeave = async (card) => {\r\n        if (!this.state.authToken) {\r\n            this.props.errorCallback(\"You are not authenticated.\")\r\n            return;\r\n        }\r\n        const response = await fetch(\"https://api.roundtablefinder.com/v1/groups/\" + card._id + '/members', {\r\n            method: 'DELETE',\r\n            headers: new Headers({\r\n                \"Authorization\": this.state.authToken\r\n            })\r\n        })\r\n\r\n        if (response.status >= 300) {\r\n            this.props.errorCallback(\"leaving group failed. Please retry.\");\r\n            return;\r\n        } else {\r\n            this.props.wsUpdate()\r\n        }\r\n    }\r\n\r\n    // Add the user to the group when they join the group\r\n    joinGroup = async (card) => {\r\n        if (!this.state.authToken) {\r\n            this.props.errorCallback(\"You are not authenticated.\")\r\n            return;\r\n        }\r\n        const response = await fetch(\"https://api.roundtablefinder.com/v1/groups/\" + card._id + '/members', {\r\n            method: 'POST',\r\n            headers: new Headers({\r\n                \"Authorization\": this.state.authToken,\r\n                \"Content-Type\": \"application/json\"\r\n            }),\r\n            body: JSON.stringify({id: this.props.user.id})\r\n        })\r\n\r\n        if (response.status >= 300) {\r\n            this.props.errorCallback(\"Joining group failed. Please retry.\");\r\n            return;\r\n        } else {\r\n            this.props.wsUpdate()\r\n        }\r\n    }\r\n\r\n    // Pops up an edit form when the user clicks \"edit\" button\r\n    editGroup = (cardData) => {\r\n        this.props.passEditCallback(cardData);\r\n    }\r\n\r\n    // change the currently displaying title, especially when there's no suitable match for filtering.\r\n    toggleTitle() {\r\n        return (<p>test</p>)\r\n    }\r\n\r\n    // renders the filter form\r\n    render() {\r\n        let listOfCards = [];\r\n        let content = null;\r\n        if (this.state.cardList) {\r\n            listOfCards = this.state.cardList.map((eachCard) => {\r\n                let singleCard = (\r\n                    <Card cardData={eachCard} switchFunction={this.joinGroup} editFunction={this.editGroup} fetch={this.props.fetch}\r\n                        toggleFeedback={this.props.toggleFeedback} feedbackInfo={this.props.feedbackInfo} feedbackDisplay={this.props.feedbackDisplay}\r\n                        key={eachCard._id} confirmFunction={this.confirmLeave} user={this.props.user}\r\n                        toggleEditForm={this.props.toggleEditForm} />\r\n                )\r\n                return singleCard;\r\n            })\r\n        }\r\n\r\n        if (this.state.cardList.length === 0) {\r\n            content = (\r\n                <div>\r\n                    <h4 className='text-center'>So Empty...</h4>\r\n\r\n                </div>\r\n            )\r\n\r\n\r\n        } else {\r\n            content = (\r\n                <div className='flex-cards-container'>\r\n                    {listOfCards}\r\n                </div>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <div className=\"more-options row\">\r\n                {this.props.filterDisplay &&\r\n                    <div className=\"col-md-6 col-xl-3 filter-form\">\r\n                        <div className=\"side-bar\">\r\n                            <form className=\"px-3\">\r\n                                <div className=\"form-group\">\r\n                                    <label className=\"form-check-label\" htmlFor=\"form-check-input-group\">Group Name</label>\r\n                                    <div>\r\n                                        <input className=\"form-control\" type=\"text\" placeholder=\"Example: Geek\"\r\n                                            id=\"form-check-input-group\" onChange={this.handleGroupChange} value={this.state.group} />\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"dropdown-divider\"></div>\r\n                                <div className=\"form-group\">\r\n                                    <label className=\"form-check-label\" htmlFor=\"form-check-input-course\">Course</label>\r\n                                    <div>\r\n                                        <input className=\"form-control\" type=\"text\" placeholder=\"Example: Info 340\"\r\n                                            id=\"form-check-input-course\" onChange={this.handleCourseChange} value={this.state.course} />\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"dropdown-divider\"></div>\r\n                                <div className=\"form-group\" aria-labelledby=\"goal-text\">\r\n                                    <p className=\"form-check-label\" id=\"goal-text\">Group Goal</p>\r\n                                    <div className=\"form-check\">\r\n                                        <div className=\"row\">\r\n                                            <div className=\"col-6\">\r\n                                                <input className=\"form-check-input\" type=\"checkbox\" value=\"option1\"\r\n                                                    id=\"form-check-input-goal-1\" onClick={this.handleHomeworkHelpChange} checked={this.state.homeworkHelp} readOnly />\r\n                                                <label className=\"form-check-label\" htmlFor=\"form-check-input-goal-1\">Homework\r\n                                                    Help</label>\r\n                                            </div>\r\n                                            <div className=\"col-6\">\r\n                                                <input className=\"form-check-input\" type=\"checkbox\" value=\"option2\"\r\n                                                    id=\"form-check-input-goal-2\" onClick={this.handleExamSquadChange} checked={this.state.examSquad} readOnly />\r\n                                                <label className=\"form-check-label\" htmlFor=\"form-check-input-goal-2\">Exam Squad</label>\r\n                                            </div>\r\n                                            <div className=\"col-6\">\r\n                                                <input className=\"form-check-input\" type=\"checkbox\" value=\"option3\"\r\n                                                    id=\"form-check-input-goal-3\" onClick={this.handleNoteExchangeChange} checked={this.state.noteExchange} readOnly />\r\n                                                <label className=\"form-check-label\" htmlFor=\"form-check-input-goal-3\">Note\r\n                                                    Exchange</label>\r\n                                            </div>\r\n                                            <div className=\"col-6\">\r\n                                                <input className=\"form-check-input\" type=\"checkbox\" value=\"option4\"\r\n                                                    id=\"form-check-input-goal-4\" onClick={this.handleLabMatesChange} checked={this.state.labMates} readOnly />\r\n                                                <label className=\"form-check-label\" htmlFor=\"form-check-input-goal-4\">Lab Mates</label>\r\n                                            </div>\r\n                                            <div className=\"col-6\">\r\n                                                <input className=\"form-check-input\" type=\"checkbox\" value=\"option5\"\r\n                                                    id=\"form-check-input-goal-5\" onClick={this.handleProjectPartnersChange} checked={this.state.projectPartners} readOnly />\r\n                                                <label className=\"form-check-label\" htmlFor=\"form-check-input-goal-5\">Project\r\n                                                    Partners</label>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                {this.props.h1Title === \"Check Out These Amazing Groups!\" &&\r\n                                    <div>\r\n                                        <div className=\"dropdown-divider\"></div>\r\n                                        <div className=\"form-group\" aria-labelledby=\"dont-display-full-text\">\r\n                                            <div className=\"form-check\">\r\n                                                <input className=\"form-check-input\" type=\"checkbox\"\r\n                                                    id=\"form-check-input-full\" onClick={this.handleFullGroupChange} checked={this.state.fullGroup} readOnly />\r\n                                                <label className=\"form-check-label\" htmlFor=\"form-check-input-full\">Don't display full group</label>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                }\r\n                                <button className=\"btn btn-primary search-button mr-3\" type=\"button\" onClick={this.handleSubmitRefine}>Refine Result</button>\r\n                                <button className=\"btn btn-secondary search-button\" type=\"button\" onClick={this.handleReset}>Reset</button>\r\n                                {this.state.applied &&\r\n                                    <p className=\"applied-filter ml-2\">Applied</p>\r\n                                }\r\n                            </form>\r\n                        </div>\r\n                    </div>}\r\n                <section className=\"course-cards\">\r\n                    <h1 className=\"text-center title\">{this.props.h1Title}</h1>\r\n                    <p className=\"text-center\">Click on group images to check details.</p>\r\n                    {content}\r\n                </section>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n\r\n}","import React from 'react';\r\nimport FilteredCardList from './FilteredCardList.js';\r\n\r\nexport default class RenderMyGroups extends React.Component {\r\n    // make filter and create group appear\r\n    componentDidMount() {\r\n        this.props.toggleTwoButtons(true);\r\n    }\r\n\r\n    render() {\r\n        let groups = [];\r\n        if (this.props.cards && this.props.user) {\r\n            this.props.cards.forEach((group) => {\r\n                for (let member of group.members) {\r\n                    if (member === this.props.user.id) {\r\n                        groups.push(group)\r\n                        break;\r\n                    }\r\n                }\r\n            })\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <FilteredCardList wsUpdate={this.props.wsUpdate} filterDisplay={this.props.filterDisplay} toggleFilter={this.props.toggleFilter} cards={this.props.cards} renderedCards={groups} fetch={this.props.fetch} updateCallback={this.props.updateCallback} toggleFeedback={this.props.toggleFeedback}feedbackInfo={this.props.feedbackInfo} passEditCallback={this.props.passEditCallback}feedbackDisplay={this.props.feedbackDisplay} user={this.props.user} h1Title={\"My Current Groups\"} errorCallback={this.props.errorCallback} loading={this.props.loading}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport FilteredCardList from './FilteredCardList.js';\r\n\r\nexport default class Homepage extends React.Component {\r\n    componentDidMount() {\r\n        this.props.toggleTwoButtons(true);\r\n    }\r\n\r\n    render() {\r\n        let groups = [];\r\n        if (this.props.cards && this.props.user) {\r\n            this.props.cards.forEach((group) => {\r\n                let userIsMember = false;\r\n                for (let member of group.members) {\r\n                    if (member === this.props.user.id) {\r\n                        userIsMember = true;\r\n                    }\r\n                }\r\n                if (!userIsMember) {\r\n                    groups.push(group);\r\n                }\r\n            })    \r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <FilteredCardList wsUpdate={this.props.wsUpdate} filterDisplay={this.props.filterDisplay} \r\n                    toggleFilter={this.props.toggleFilter} cards={this.props.cards} renderedCards={groups} \r\n                    fetch={this.props.fetch} updateCallback={this.props.updateCallback} \r\n                    toggleFeedback={this.props.toggleFeedback} feedbackInfo={this.props.feedbackInfo} \r\n                    passEditCallback={this.props.passEditCallback} feedbackDisplay={this.props.feedbackDisplay} \r\n                    user={this.props.user} h1Title={\"Check Out These Amazing Groups!\"} \r\n                    errorCallback={this.props.errorCallback} />\r\n            </div>\r\n        )\r\n    }\r\n}","export default {\r\n    base: \"https://api.roundtablefinder.com\",\r\n    testbase: \"https://localhost:4000\",\r\n    handlers: {\r\n        users: \"/v1/users\",\r\n        myuser: \"/v1/users/\",\r\n        sessions: \"/v1/sessions\",\r\n        sessionsMine: \"/v1/sessions/mine\",\r\n        courses: \"/v1/courses/users\",\r\n        groups: \"/v1/groups\",\r\n        thisgroup: \"/v1/groups/\"\r\n    }\r\n}","import React from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport api from './APIEndpoints.js'\r\n\r\nconst HOMEWORK_HELP = \"homeworkHelp\";\r\nconst EXAM_SQUAD = \"examSquad\";\r\nconst NOTE_EXCHANGE = \"noteExchange\";\r\nconst LAB_MATES = \"labMates\";\r\nconst PROJECT_PARTNERS = \"projectPartners\"\r\n\r\nexport default class GroupDetailsPage extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            user:null,\r\n            userDataArray: [],\r\n            leader: {},\r\n            card: {},\r\n            teamName: '',\r\n            shouldRedirect: false,\r\n            authToken: localStorage.getItem(\"Authorization\") || null\r\n        }\r\n    }\r\n\r\n    // handles the interaction when user wants to leave details page.\r\n    handleDetailClick = () => {\r\n        this.setState({ shouldRedirect: true });\r\n    }\r\n\r\n    // get members info when component is created\r\n    componentDidMount() {\r\n        this.props.toggleTwoButtons(false);\r\n        let groupID = this.props.match.params.groupID;\r\n\r\n        this.getCurrentUser()\r\n\r\n        fetch(api.base + api.handlers.thisgroup + groupID)\r\n        .then(res => res.json())\r\n        .then(\r\n            (result) => {\r\n                if (result) {\r\n                    let members = result.members\r\n                    let leader = result.creator.userID\r\n                    let teamName = result.teamName\r\n\r\n                    if (members) {\r\n                        this.getMembersInfo(members, leader)\r\n                    }\r\n                    \r\n                    if (teamName) {\r\n                        this.setState(() => {\r\n                            return ({\r\n                                card: result,\r\n                                teamName: result.teamName\r\n                            })\r\n                        })\r\n                    } \r\n                }\r\n            }, (errorObj) => {\r\n                if (errorObj) {\r\n                    this.props.errorCallback(errorObj);\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    // build the data arrays for group leader and memebers\r\n    getMembersInfo = async (members, leader) => {\r\n        if (!this.state.authToken) {\r\n            console.log(\"no auth\")\r\n            return;\r\n        }\r\n\r\n        members.forEach(async (memberID) => {\r\n            const response = await fetch(api.base + api.handlers.myuser + memberID, {\r\n                method: 'GET',\r\n                headers: new Headers({\r\n                    \"Authorization\": this.state.authToken\r\n                })\r\n            });\r\n            if (response.status >= 300) {\r\n                this.toggleOnError(\"Authentication failed. Please relog.\");\r\n                this.setAuthToken(\"\");\r\n                this.setUser(null)\r\n                return;\r\n            }\r\n            const user = await response.json()\r\n            if (memberID !== leader) {\r\n                this.setState((prevState) => {\r\n                    let memberArray = prevState.userDataArray\r\n                    memberArray.push(user)\r\n                    return {userDataArray: memberArray}\r\n                })\r\n            } else {\r\n                this.setState({leader: user});\r\n            }\r\n            console.log(this.state.card)\r\n        })\r\n    }\r\n\r\n    // pre-prosess member data\r\n    buildUserDataArray = (userData) => {\r\n        let dataArray = this.state.userDataArray\r\n        dataArray.push(userData);\r\n        this.setState({\r\n            userDataArray: dataArray\r\n        })\r\n    }\r\n\r\n    // fetches the current user info\r\n    getCurrentUser = async () => {\r\n        if (!this.state.authToken) {\r\n            console.error(\"no auth token found, aborting\")\r\n            return;\r\n        }\r\n        const response = await fetch(api.base + api.handlers.myuser + \"me\", {\r\n            method: 'GET',\r\n            headers: new Headers({\r\n                \"Authorization\": this.state.authToken\r\n            })\r\n        });\r\n        if (response.status >= 300) {\r\n            this.toggleOnError(\"Authentication failed. Please relog.\");\r\n            this.setAuthToken(\"\");\r\n            this.setUser(null)\r\n            return;\r\n        }\r\n        const user = await response.json()\r\n        this.setState({user: user});\r\n    }\r\n\r\n    //renders the Group Detail Pop Up form\r\n    render() {\r\n        if (this.state.shouldRedirect && this.props.user) {\r\n            if (this.state.card.members.includes(this.props.user.id)) {\r\n                return <Redirect to='/mygroup' />\r\n            } else {\r\n                return <Redirect to='/home' />\r\n            }\r\n        }\r\n        let card = this.state.card;\r\n        let users = this.state.userDataArray\r\n        let members = null;\r\n        let content = null;\r\n        let goals = null;\r\n\r\n        //render the list of Members of the group\r\n        members = (\r\n            users.map((user) => {\r\n                let userEmailString = ''\r\n                if (!this.state.card.members.includes(this.state.user.id)) {\r\n                    return (\r\n                        <div key={user.id}>\r\n                            <div className='memberRow'>\r\n                                <img className=\"avatar\" src={user.photoURL} alt=\"User Profile\"></img>\r\n                                <p className='memberInfos'>\r\n                                    {user.firstName + '\\t' + user.lastName}\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                }\r\n                return (\r\n                    <div key={user.id}>\r\n                        <div className='memberRow'>\r\n                            <img className=\"avatar\" src={user.photoURL} alt=\"User Profile\"></img>\r\n                            <p className='memberInfos'>\r\n                                {user.firstName + '\\t' + user.lastName}\r\n                            </p>\r\n                            <a className='sendEmailButton' href={userEmailString}>Email</a>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            })\r\n        )\r\n        \r\n        if (card) {\r\n        //render the Goal Tags of the displayed group\r\n        let tags = card.tags;\r\n        if (tags) {\r\n            goals = (\r\n                Object.keys(tags).map((cardKey) => {\r\n                    if (tags[cardKey] === true) {\r\n                        if (cardKey === HOMEWORK_HELP) {\r\n                            cardKey = \"Homework Help\";\r\n                        } else if (cardKey === EXAM_SQUAD) {\r\n                            cardKey = \"Exam Squad\";\r\n                        } else if (cardKey === NOTE_EXCHANGE) {\r\n                            cardKey = \"Note Exchange\";\r\n                        } else if (cardKey === LAB_MATES) {\r\n                            cardKey = \"Lab Mates\";\r\n                        } else if (cardKey === PROJECT_PARTNERS) {\r\n                            cardKey = \"Project Partners\";\r\n                        }\r\n                        return (\r\n                            <div key={cardKey}>\r\n                                <div className='goalTag'>\r\n                                    {cardKey}\r\n                                </div>\r\n                            </div>\r\n                        )\r\n                    }\r\n                    return content;\r\n                })\r\n            )\r\n        }\r\n\r\n        return (\r\n            <section>\r\n                <div className='detailsContainer'>\r\n                    <h1 className='detailsTitle'>{card.teamName}</h1>\r\n                    <button className='detailsCloseButton' onClick={this.handleDetailClick}>Close</button>\r\n                    <div className=\"class-name-details\" > {card.className} </div>\r\n                    <div className=\"lookingFor\"> Looking for {card.members ? card.maxSize - card.members.length : \"fetching\"} more</div><br/>\r\n                    <div>\r\n                        <p className='membersTitle'>\r\n                            Members:\r\n                        </p>\r\n                    </div>\r\n                    <div className='memberList'>\r\n                        {(typeof (this.state.leader) !== 'undefined') &&\r\n                            <div>\r\n                                <div key={this.state.leader.id}>\r\n                                    <div className='memberRow'>\r\n                                        <img className=\"avatar\" src={this.state.leader.photoURL} alt=\"User Profile\"></img>\r\n                                        <img className=\"detailsLeader\" src=\"/img/crown.svg\" alt=\"You are leader\"></img>\r\n                                        <p className='leaderInfos'>\r\n                                            {this.state.leader.firstName + '\\t' + this.state.leader.lastName}\r\n                                        </p>\r\n                                        <a className='sendEmailButton' href={'mailto: ' + this.state.leader.email}> Email</a>\r\n                                    </div>\r\n                                </div>\r\n                                {members}\r\n                            </div>}\r\n                    </div>\r\n\r\n                    <div>\r\n                        <p className='membersTitle'>\r\n                            Group Goal:\r\n                        </p>\r\n                        <div className='goalTagsContainer'>\r\n                            {goals ? goals : <p>None</p>}\r\n                        </div>\r\n                    </div>\r\n                    <div>\r\n                        <p className='membersTitle'>\r\n                            When2Meet URL: \r\n                        </p>\r\n                        <p>{this.state.card.when2meetURL ? this.state.card.when2meetURL : <p>None</p>}</p>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n}","import React from 'react';\r\nimport Form from \"@rjsf/core\";\r\nimport api from './APIEndpoints.js';\r\nimport { AddPhoto } from './S3.js';\r\n\r\nexport default class SignUp extends React.Component {\r\n\r\n  formSchema = {\r\n    \"title\": \"SIGN UP\",\r\n    \"description\": \"Enter basic information to create an account\",\r\n    \"type\": \"object\",\r\n    \"required\": [\r\n      \"email\",\r\n      \"password\",\r\n      \"passwordConf\",\r\n      \"userName\",\r\n      \"firstName\",\r\n      \"lastName\"\r\n    ],\r\n    \"properties\": {\r\n      \"email\": {\r\n        \"type\": \"string\",\r\n        \"title\": \"Email\",\r\n      },\r\n      \"password\": {\r\n        \"type\": \"string\",\r\n        \"title\": \"Password\",\r\n      },\r\n      \"passwordConf\": {\r\n        \"type\": \"string\",\r\n        \"title\": \"Confirm Password\",\r\n      },\r\n      \"userName\": {\r\n        \"type\": \"string\",\r\n        \"title\": \"Username\",\r\n      },\r\n      \"firstName\": {\r\n        \"type\": \"string\",\r\n        \"title\": \"First name\",\r\n      },\r\n      \"lastName\": {\r\n        \"type\": \"string\",\r\n        \"title\": \"Last name\"\r\n      },\r\n    }\r\n  }\r\n\r\n  UIschema = {\r\n    \"email\": {\r\n      \"ui:format\": \"email\"\r\n    },\r\n    \"firstName\": {\r\n      \"ui:autofocus\": true,\r\n      \"ui:emptyValue\": \"\",\r\n      \"ui:autocomplete\": \"family-name\"\r\n    },\r\n    \"lastName\": {\r\n      \"ui:emptyValue\": \"\",\r\n      \"ui:autocomplete\": \"given-name\"\r\n    },\r\n    \"password\": {\r\n      \"ui:widget\": \"password\",\r\n      \"ui:help\": \"Hint: Make it strong!\"\r\n    },\r\n    \"passwordConf\": {\r\n      \"ui:widget\": \"password\",\r\n      \"ui:help\": \"Make sure the passwords match... \"\r\n    }\r\n  }\r\n\r\n  // sends the needed sign up data to api server\r\n  onSubmit = async ({formData}) => {\r\n    const response = await fetch(api.base + api.handlers.users, {\r\n      method: 'POST',\r\n      headers: new Headers({\r\n        \"Content-Type\": \"application/json\"\r\n      }),\r\n      body: JSON.stringify(formData)\r\n    });\r\n    if (response.status >= 300) {\r\n        this.props.errorCallback(\"Sign up unsuccessful. Please retry.\");\r\n        return;\r\n    }\r\n    const user = await response.json()\r\n    this.props.setUser(user);\r\n    let currImg = user.photoURL\r\n    AddPhoto(\"GroupPhotos\", user.photoURL, user.userName)\r\n    this.props.setAuthToken(response.headers.get(\"Authorization\"));\r\n  }\r\n\r\n  render() {\r\n    return <Form schema={this.formSchema} UIschema={this.UIschema} onSubmit={this.onSubmit}/>\r\n  }\r\n}","import React from 'react';\r\nimport Form from \"@rjsf/core\";\r\nimport api from './APIEndpoints.js'\r\n\r\nexport default class SignUp extends React.Component {\r\n\r\n  formSchema = {\r\n    \"title\": \"LOG IN\",\r\n    \"description\": \"Log in to your exisitng account\",\r\n    \"type\": \"object\",\r\n    \"required\": [\r\n      \"email\",\r\n      \"password\"\r\n    ],\r\n    \"properties\": {\r\n      \"email\": {\r\n        \"type\": \"string\",\r\n        \"title\": \"Email\",\r\n      },\r\n      \"password\": {\r\n        \"type\": \"string\",\r\n        \"title\": \"Password\",\r\n      }\r\n    }\r\n  }\r\n\r\n  UIschema = {\r\n    \"email\": {\r\n      \"ui:format\": \"email\"\r\n    },\r\n    \"password\": {\r\n      \"ui:widget\": \"password\"\r\n    }\r\n  }\r\n\r\n  // sends the log in data to api server\r\n  onSubmit = async ({formData}) => {\r\n    const response = await fetch(api.base + api.handlers.sessions, {\r\n      method: 'POST',\r\n      headers: new Headers({\r\n        \"Content-Type\": \"application/json\"\r\n      }),\r\n      body: JSON.stringify(formData)\r\n    });\r\n    if (response.status >= 300) {\r\n        this.props.errorCallback(\"Log in unsuccessful. Please retry.\");\r\n        return;\r\n    }\r\n    const user = await response.json()\r\n    this.props.setUser(user);\r\n    this.props.setAuthToken(response.headers.get(\"Authorization\"));\r\n  }\r\n\r\n  render() {\r\n    return <Form schema={this.formSchema} UIschema={this.UIschema} onSubmit={this.onSubmit}/>\r\n  }\r\n}","import React from 'react';\r\nimport Header from './Header.js';\r\nimport Footer from './Footer.js';\r\nimport Create from './Create.js';\r\nimport Edit from './Edit.js'\r\nimport Confirm from './Confirm.js';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSpinner } from '@fortawesome/free-solid-svg-icons'\r\nimport JoinCreateFeedback from './JoinCreateFeedback.js';\r\nimport AddCourses from './AddCourses.js'\r\nimport ProfilePage from './ProfilePage.js';\r\nimport MyGroupPage from './MyGroupPage.js';\r\nimport Homepage from './Homepage.js';\r\nimport { Route, Switch, Redirect } from 'react-router-dom';\r\nimport GroupDetailsPage from './GroupDetailsPage.js';\r\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\r\nimport SignUp from './SignUp.js'\r\nimport Login from './Login.js'\r\nimport api from './APIEndpoints.js'\r\nimport { Card, Avatar, Input, Typography } from 'antd';\r\nimport { albumBucketName, bucketRegion, AddPhoto } from './S3.js';\r\n\r\n\r\n// WEBSOCKET\r\nconst client = new W3CWebSocket('ws://api.roundtablefinder.com:8000');\r\n\r\nexport default class App extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            user: null,\r\n            spinnerDisplay: false,\r\n            myGroups: [],\r\n            myCourses: [],\r\n            currentCourses: '',\r\n            currentPage: '',\r\n            filterDisplay: false,\r\n            createDisplay: false,\r\n            editDisplay: false,\r\n            errorDisplay: false,\r\n            tempEditData: {},\r\n            feedbackDisplay: false,\r\n            feedbackInfo: [],\r\n            popUpDisplay: false,\r\n            addCourseDisplay: false,\r\n            twoButtonDisplay: true,\r\n            coverDisplay: false,\r\n            groupCount: 0,\r\n            errorMessage: '',\r\n            userPhoto: '',\r\n            authToken: localStorage.getItem(\"Authorization\") || null\r\n        }\r\n    }\r\n\r\n    getCurrentUser = async () => {\r\n        if (!this.state.authToken) {\r\n            this.toggleOnError(\"You are not authenticated.\")\r\n            return;\r\n        }\r\n        const response = await fetch(api.base + api.handlers.myuser + \"me\", {\r\n            method: 'GET',\r\n            headers: new Headers({\r\n                \"Authorization\": this.state.authToken\r\n            })\r\n        });\r\n        if (response.status >= 300) {\r\n            this.toggleOnError(\"Authentication failed. Please relog.\");\r\n            this.setAuthToken(\"\");\r\n            this.setUser(null)\r\n            return;\r\n        }\r\n        const user = await response.json()\r\n        this.setState({\r\n            user: user,\r\n            userPhoto: `https://${albumBucketName}.s3.${bucketRegion}.amazonaws.com/UserFolder/${user.userName}`\r\n        });\r\n    }\r\n\r\n    getCurrentGroups = async () => {\r\n        if (!this.state.authToken) {\r\n            return;\r\n        }\r\n        const response = await fetch(api.base + api.handlers.groups, {\r\n            method: 'GET',\r\n            headers: new Headers({\r\n                \"Authorization\": this.state.authToken\r\n            })\r\n        });\r\n        if (response.status >= 300) {\r\n            this.toggleOnError(\"Retrieving group info failed. Please retry.\");\r\n            return;\r\n        }\r\n        const groups = await response.json()\r\n        this.setState({myGroups: groups});\r\n    }\r\n\r\n    //WEBSOCKET\r\n    valueChange = () => {\r\n        client.send(\"update happened\")\r\n    }\r\n\r\n    // fetch data from database and handles user sign in\r\n    componentDidMount() {\r\n        this.fetch();\r\n\r\n        client.onopen = () => {\r\n            console.log('Websocket Client Connected')\r\n        }\r\n\r\n        client.onmessage = (message) => {\r\n            this.fetch();\r\n        }\r\n\r\n        // If user is authenticated\r\n        if (this.state.authToken) {\r\n            this.getCurrentUser();\r\n            this.getCurrentGroups();\r\n            this.getCourse();\r\n        }\r\n    }\r\n\r\n    // Fetch the groups the user is currently enrolled and user's current attending courses in from json.\r\n    fetch = async () => {\r\n        this.setSpinnerOnDisplay();\r\n\r\n        this.getCurrentUser();\r\n        this.getCurrentGroups();\r\n        this.getCourse();\r\n\r\n        this.setSpinnerOffDisplay();\r\n    }\r\n\r\n    // This callback gets the current course enrollment of the user\r\n    getCourse = async () => {\r\n        if (!this.state.authToken) {\r\n            this.toggleOnError(\"You are not authenticated.\")\r\n            return;\r\n        }\r\n        const response = await fetch(\"https://api.roundtablefinder.com/v1/courses/users\", {\r\n            method: 'GET',\r\n            headers: new Headers({\r\n                \"Authorization\": this.state.authToken\r\n            })\r\n        });\r\n        if (response.status >= 300) {\r\n            this.toggleOnError(\"Get course failed. Please retry\");\r\n            return;\r\n        }\r\n        const courses = await response.json()\r\n        if (courses !== null) {\r\n            this.setState({ myCourses: courses.classList });\r\n        } else {\r\n            this.setState({ myCourses: [\"Please set up your current courses in profile page.\"] });\r\n        }\r\n    }\r\n\r\n    // The callback function that allows Create form to submit a new group to app.\r\n    submitCreateForm = async (newGroup) => {\r\n        if (!this.state.authToken) {\r\n            this.toggleOnError(\"You are not authenticated.\")\r\n            return;\r\n        }\r\n\r\n        const response = await fetch(api.base + api.handlers.groups, {\r\n            method: 'POST',\r\n            headers: new Headers({\r\n                \"Authorization\": this.state.authToken,\r\n                \"Content-Type\": \"application/json\"\r\n            }),\r\n            body: JSON.stringify(newGroup)\r\n        });\r\n        if (response.status >= 300) {\r\n            this.toggleOnError(response.body);\r\n            return;\r\n        } else {\r\n            this.valueChange()\r\n        }\r\n    }\r\n\r\n    // The callback function that allows Edit form to submit edited group info to app.\r\n    submitEditForm = async (card, _id) => {\r\n        const response = await fetch(api.base + api.handlers.groups + \"/\" + _id, {\r\n            method: 'PATCH',\r\n            headers: new Headers({\r\n                \"Authorization\": this.state.authToken,\r\n                \"Content-Type\": \"application/json\"\r\n            }),\r\n            body: JSON.stringify(card)\r\n        });\r\n        if (response.status >= 300) {\r\n            this.toggleOnError(response.body);\r\n            return;\r\n        } else {\r\n            this.valueChange()\r\n        }\r\n    }\r\n\r\n    // Sets React-FontAwesome spinner on.\r\n    setSpinnerOnDisplay = () => {\r\n        this.setState(() => {\r\n            return { spinnerDisplay: true }\r\n        })\r\n    }\r\n\r\n    // Sets React-FontAwesome spinner off.\r\n    setSpinnerOffDisplay = () => {\r\n        this.setState((prevState) => {\r\n            return { spinnerDisplay: false }\r\n        })\r\n    }\r\n\r\n    // Sets the Auth token for the current user\r\n    setAuthToken = (auth) => {\r\n        localStorage.setItem(\"Authorization\", auth)\r\n        this.setState(() => {\r\n            return { authToken: auth };\r\n        })\r\n    }\r\n\r\n    // Save user data to the state\r\n    setUser = (user) => {\r\n        this.setState(() => {\r\n            return { user: user };\r\n        })\r\n    }\r\n\r\n    // Toggle filter group form\r\n    toggleFilter = () => {\r\n        this.setState((prevState) => {\r\n            return { filterDisplay: !prevState.filterDisplay }\r\n        })\r\n    }\r\n\r\n    // Toggle create group form\r\n    toggleCreateForm = () => {\r\n        this.setState((prevState) => {\r\n            return {\r\n                createDisplay: !prevState.createDisplay,\r\n                coverDisplay: !prevState.coverDisplay\r\n            }\r\n        })\r\n    }\r\n\r\n    // Toggle edit group form\r\n    toggleEditForm = () => {\r\n        this.setState((prevState) => {\r\n            return {\r\n                editDisplay: !prevState.editDisplay,\r\n                coverDisplay: !prevState.coverDisplay\r\n            }\r\n        })\r\n    }\r\n\r\n    // Toggle the feedback popup window when \"leave\" button is clicked\r\n    toggleFeedback = () => {\r\n        this.setState((prevState) => {\r\n            return { feedbackDisplay: !prevState.feedbackDisplay }\r\n        })\r\n    }\r\n\r\n    // Change the state of current page\r\n    togglePageTitle = (page) => {\r\n        this.setState(() => {\r\n            return { currentPage: page };\r\n        })\r\n    }\r\n\r\n    // allows the card that needs to be update to communicate with Edit form.\r\n    passEdit = (cardData) => {\r\n        this.setState({\r\n            tempEditData: cardData,\r\n            editDisplay: true,\r\n            coverDisplay: true\r\n        })\r\n    }\r\n\r\n    // disbands the group\r\n    disbandGroup = async (card) => {\r\n        this.toggleEditForm();\r\n\r\n        const response = await fetch(api.base + api.handlers.groups + \"/\" + card._id, {\r\n            method: 'DELETE',\r\n            headers: new Headers({\r\n                \"Authorization\": this.state.authToken\r\n            }),\r\n        });\r\n        if (response.status >= 300) {\r\n            this.toggleOnError(response.body);\r\n            return;\r\n        } else {\r\n            this.valueChange()\r\n        }\r\n    }\r\n\r\n    // toggles the popup window when disbanding a group\r\n    togglePopUp = () => {\r\n        this.setState((prevState) => {\r\n            return { popUpDisplay: !prevState.popUpDisplay };\r\n        })\r\n    }\r\n\r\n    // toggles the add course menu\r\n    toggleAddCourse = () => {\r\n        this.setState((prevState) => {\r\n            return {\r\n                addCourseDisplay: !prevState.addCourseDisplay,\r\n                coverDisplay: !prevState.coverDisplay\r\n            }\r\n        })\r\n    }\r\n\r\n    // will not show filter and create group buttons when on the profile page\r\n    toggleTwoButtons = (state) => {\r\n        this.setState({ twoButtonDisplay: state })\r\n    }\r\n\r\n    // allows child components to toggle error message when their fetch goes wrong\r\n    toggleOnError = (errorObj) => {\r\n        if (errorObj) {\r\n            this.setState({\r\n                errorDisplay: true,\r\n                errorMessage: errorObj.message\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let content = null;\r\n        if (!this.state.authToken || this.state.authToken === \"null\") {\r\n            content = (\r\n                <div>\r\n                    <main>\r\n                        <img className='loginLogo' src='img/loginLogo.png' alt='Round Table Logo'></img>\r\n                        <div className='loginBG'>\r\n                            <div className='login'>\r\n                                <div className='login-form text-center container'>\r\n                                        <div className=\"row justify-content-center\">\r\n                                            <div className=\"col\">\r\n                                                <SignUp setAuthToken={this.setAuthToken} setUser={this.setUser} errorCallback={this.toggleOnError}/>\r\n                                            </div>\r\n                                            <div className=\"col\">\r\n                                                <Login setAuthToken={this.setAuthToken} setUser={this.setUser} errorCallback={this.toggleOnError}/>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                    </main>\r\n                </div>\r\n            )\r\n        } else {\r\n            content = (\r\n                <div>\r\n                    <Header userPhoto={this.state.userPhoto} page={this.state.currentPage} togglePage={this.togglePageTitle} user={this.state.user} errorCallback={this.toggleOnError} setAuthToken={this.setAuthToken}/>\r\n                    {this.state.coverDisplay &&\r\n                        <div className=\"grey-cover\"></div>\r\n                    }\r\n                    <main>\r\n                        {this.state.twoButtonDisplay &&\r\n                            <div>\r\n                                <button id=\"options\" onClick={this.toggleFilter}>Show Filter</button>\r\n                                <button id=\"create\" onClick={this.toggleCreateForm}>Create A Group</button>\r\n                            </div>}\r\n                        <Create createDisplay={this.state.createDisplay} toggleForm={this.toggleCreateForm} courseList={this.state.myCourses}\r\n                            onSubmit={this.submitCreateForm} groupList={this.state.myGroups} toggleFeedback={this.toggleFeedback}\r\n                            feedbackInfo={this.state.feedbackInfo} feedbackDisplay={this.state.feedbackDisplay} user={this.state.user} errorCallback={this.toggleOnError} />\r\n                        {this.state.editDisplay &&\r\n                            <Edit editData={this.state.tempEditData} editDisplay={this.state.editDisplay} toggleForm={this.toggleEditForm} courseList={this.state.myCourses}\r\n                                onSubmit={this.submitEditForm} groupList={this.state.myGroups} onDisband={this.disbandGroup} togglePopUpForm={this.togglePopUp} user={this.state.user} errorCallback={this.toggleOnError} />\r\n                        }\r\n                        {this.state.popUpDisplay &&\r\n                            <Confirm toggleConfirm={this.togglePopUp} confirmFunction={this.disbandGroup} cardData={this.state.tempEditData} confirmDisplay={this.state.popUpDisplay} />\r\n                        }\r\n                        {this.state.addCourseDisplay &&\r\n                            <AddCourses toggleAddCourse={this.toggleAddCourse} courses={this.state.myCourses} user={this.state.user} getCourseCallback={this.getCourse} errorCallback={this.toggleOnError} wsUpdate={this.valueChange}/>\r\n                        }\r\n                        <JoinCreateFeedback feedbackDisplay={this.state.feedbackDisplay} toggleFeedback={this.toggleFeedback}\r\n                            feedbackInfo={this.state.feedbackInfo} />\r\n\r\n                        {this.state.errorDisplay &&\r\n                            <div className=\"popup\">\r\n                                <p>{this.state.errorMessage + \" Check your connection and refresh webpage.\"}</p>\r\n                            </div>\r\n                        }\r\n\r\n                        <Switch>\r\n                            <Route exact path='/myprofile' render={(props) => (<ProfilePage {...props} user={this.state.user} toggleAddCourse={this.toggleAddCourse} toggleTwoButtons={this.toggleTwoButtons} errorCallback={this.toggleOnError} authToken = {this.state.authToken} api = {api} getCurrentUser = {this.getCurrentUser} />)} />\r\n                            <Route exact path='/mygroup' render={(props) => (<MyGroupPage {...props} cards={this.state.myGroups} loading={this.state.spinnerDisplay}\r\n                                wsUpdate = {this.valueChange} updateCallback={this.updateAppState} toggleFeedback={this.toggleFeedback} user={this.state.user} toggleEditForm={this.toggleEditForm}\r\n                                feedbackInfo={this.state.feedbackInfo} passEditCallback={this.passEdit} toggleTwoButtons={this.toggleTwoButtons} fetch={this.fetch}\r\n                                feedbackDisplay={this.state.feedbackDisplay} filterDisplay={this.state.filterDisplay} toggleFilter={this.toggleFilter} errorCallback={this.toggleOnError} />)} />\r\n                            <Route exact path='/home' render={(props) => (<Homepage {...props} wsUpdate = {this.valueChange} cards={this.state.myGroups} loading={this.state.spinnerDisplay}\r\n                                updateCallback={this.updateAppState} toggleFeedback={this.toggleFeedback} user={this.state.user} fetch={this.fetch}\r\n                                feedbackInfo={this.state.feedbackInfo} passEditCallback={this.passEdit} toggleTwoButtons={this.toggleTwoButtons}\r\n                                feedbackDisplay={this.state.feedbackDisplay} filterDisplay={this.state.filterDisplay} toggleFilter={this.toggleFilter} errorCallback={this.toggleOnError} />)} />\r\n                            <Route path='/group/:groupID' render={(props) => (<GroupDetailsPage {...props} wsUpdate = {this.valueChange} errorCallback={this.toggleOnError} toggleTwoButtons={this.toggleTwoButtons} user={this.state.user} />)} />\r\n                            <Redirect to='/home' />\r\n                        </Switch>\r\n\r\n                        {this.state.spinnerDisplay &&\r\n                            <div className=\"text-center\">\r\n                                <FontAwesomeIcon icon={faSpinner} size=\"lg\" spin />\r\n                            </div>\r\n                        }\r\n                    </main>\r\n                    <Footer />\r\n                </div>\r\n            )\r\n        }\r\n        return content;\r\n    }\r\n}\r\n\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './index.css';\r\nimport {BrowserRouter} from 'react-router-dom';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n// Change all these to database initialization\r\n\r\n// import firebase from 'firebase/app';\r\n// import 'firebase/auth';\r\n// import 'firebase/database';\r\n// import 'firebase/storage';\r\n\r\n// const firebaseConfig = {\r\n//     apiKey: \"AIzaSyDT26tVl3IFCzI96rZTlP2_J40LkHRP3_o\",\r\n//     authDomain: \"round-table-a62ad.firebaseapp.com\",\r\n//     databaseURL: \"https://round-table-a62ad.firebaseio.com\",\r\n//     projectId: \"round-table-a62ad\",\r\n//     storageBucket: \"round-table-a62ad.appspot.com\",\r\n//     messagingSenderId: \"1037437885077\",\r\n//     appId: \"1:1037437885077:web:65af9b83c6f281deec999c\",\r\n//     measurementId: \"G-0EECVGEW4V\"\r\n// };\r\n\r\n// firebase.initializeApp(firebaseConfig);\r\n\r\nReactDOM.render(<BrowserRouter><App /></BrowserRouter>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}