{"version":3,"sources":["Header.js","Footer.js","S3.js","Create.js","Edit.js","Confirm.js","JoinCreateFeedback.js","AddCourses.js","ProfilePage.js","Card.js","FilteredCardList.js","MyGroupPage.js","Homepage.js","APIEndpoints.js","GroupDetailsPage.js","SignUp.js","Login.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","toggleMenu","setState","prevState","display","handleHomePageClick","shouldRedirect","handleMyGroupClick","state","page","this","togglePage","to","url","user","photoURL","id","className","onClick","src","alt","aria-label","setAuthToken","userPhoto","role","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","style","checkStyle","React","Component","Footer","href","icon","faGithub","size","CognitoIdentityClient","require","fromCognitoIdentityPool","S3Client","PutObjectCommand","ListObjectsCommand","albumBucketName","bucketRegion","s3","region","credentials","client","identityPoolId","AddPhoto","async","albumName","imgFile","photoKeyName","callback","albumPhotosKey","encodeURIComponent","send","Prefix","Bucket","fileName","name","photoKey","uploadParams","Key","Body","console","log","err","error","message","Create","toggleEmpty","emptyAlertDisplay","toggleExceed","exceedCharDisplay","toggleEmptyCourse","emptyCourseDisplay","handleImgURLChange","event","newImg","target","files","img","handleGroupNameChange","newString","value","groupName","handleCourseNameChange","newValue","courseName","handleDescriptionChange","description","handleMeetChange","when2meetURL","handlePrivateChange","private","handleHomeworkHelpChange","homeworkHelp","handleExamSquadChange","examSquad","handleNoteExchangeChange","noteExchange","handleLabMatesChange","labMates","handleProjectPartnersChange","projectPartners","handleGroupSizeChange","newSize","groupSize","handleGroupSizeOutput","handleSubmit","newGroup","length","myCourses","handleSubmitHelper","toggleForm","prevProps","courseList","teamName","totalNumber","parseInt","onSubmit","feedbackDisplay","toggleFeedback","feedbackInfo","pop","push","courseOptions","map","course","key","createDisplay","htmlFor","type","onChange","accept","max","min","toggleManyMember","manyMemberDisplay","editData","members","maxSize","_id","handleDisband","onDisband","imgURL","tags","authToken","localStorage","getItem","checked","readOnly","togglePopUpForm","Confirm","handleSumbitConfirm","confirmFunction","cardData","toggleConfirm","confirmDisplay","JoinCreateFeedback","toggleEmptyFeedback","AddCourses","showEmpty","hideEmpty","deleteCourse","a","fetch","method","headers","Headers","body","JSON","stringify","status","errorCallback","wsUpdate","addOneCourse","newCourseName","handleNameChange","newName","toggleAddCourse","courses","getCourseCallback","content","forEach","faTrashAlt","Profile","constructor","super","tab","cancelEdit","setUserProfile","submitEdit","profileChanged","firstName","LastName","nameErr","submitUpdate","update","FirstName","lastName","userPhotoFile","userName","setProfilePic","response","auth","setItem","setUser","api","base","handlers","myuser","json","email","getCourse","classList","handleFirstNameChange","handleLastNameChange","handlePhoto","URL","createObjectURL","componentDidMount","toggleTwoButtons","componentDidUpdate","render","faPlusCircle","NOT_JOINED","MEMBER","LEADER","Card","handleDetailClick","confirmPopUp","handleManageGroup","reportGroupStatus","editFunction","switchFunction","creator","userID","includes","iconIndicators","i","iconList","indicator","index","singleIcon","getMemberIcon","aria-hidden","groupLeaderCrown","getMemberIcons","returnStatusString","toLowerCase","displayStyleCheck","FilteredCardList","handleGroupChange","group","handleCourseChange","handleFullGroupChange","fullGroup","handleSubmitRefine","fetched","cardList","handleFilteringHelper","handleReset","renderedCards","currentCard","applied","renderCards","filter","card","confirmLeave","joinGroup","editGroup","passEditCallback","listOfCards","eachCard","toggleEditForm","filterDisplay","placeholder","h1Title","RenderMyGroups","groups","cards","toggleFilter","updateCallback","loading","Homepage","userIsMember","testbase","users","sessions","sessionsMine","thisgroup","GroupDetailsPage","getMembersInfo","leader","memberID","toggleOnError","memberArray","userDataArray","buildUserDataArray","userData","dataArray","getCurrentUser","groupID","match","params","then","res","result","errorObj","goals","Object","keys","cardKey","SignUp","formSchema","UIschema","formData","img_response","default_image","blob","get","schema","WebSocket","App","getCurrentGroups","myGroups","valueChange","setSpinnerOnDisplay","setSpinnerOffDisplay","submitCreateForm","submitEditForm","spinnerDisplay","toggleCreateForm","coverDisplay","editDisplay","togglePageTitle","currentPage","passEdit","tempEditData","disbandGroup","togglePopUp","popUpDisplay","addCourseDisplay","twoButtonDisplay","errorDisplay","errorMessage","currentCourses","groupCount","onopen","onmessage","groupList","exact","path","updateAppState","faSpinner","spin","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2715d63b.chunk.js","sourcesContent":["import React from 'react';\r\nimport {NavLink, Redirect} from 'react-router-dom';\r\n\r\nexport default class Header extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            display: false,\r\n            page: this.props.page\r\n        }\r\n    }\r\n\r\n    // Toggle dropdown menu display state\r\n    toggleMenu = () => {\r\n        this.setState((prevState) => {\r\n            return {display: !prevState.display}\r\n        })\r\n    }\r\n\r\n    // Change dropdown menu display style on smaller screens\r\n    checkStyle() {\r\n        if (this.state.display === true) {\r\n            return {display: 'block'};\r\n        }\r\n        return {display: 'none'};\r\n    }\r\n\r\n    // handles the interaction after user clicks to go homepage\r\n    handleHomePageClick = () => {\r\n        this.setState({shouldRedirect: 'home'});\r\n    }\r\n\r\n    // hadnles the interaction after user clicks to go mygroup\r\n    handleMyGroupClick = () => {\r\n        this.setState({shouldRedirect: 'mygroup'});\r\n    }\r\n\r\n    render() {\r\n        if (this.state.page !== '') {\r\n            if (this.state.page === 'home') {\r\n                this.props.togglePage('');\r\n                return <Redirect to={'/home'} />\r\n            } else {\r\n                this.props.togglePage('');\r\n                return <Redirect to={'/mygroup'} />\r\n            }\r\n        } \r\n\r\n        let url = \"\"\r\n        if (this.props.user !== null) {\r\n            url = this.props.user.photoURL\r\n        }\r\n        \r\n        return (\r\n            <div id=\"nav-search\" className=\"sticky-top\">\r\n                <header>\r\n                    <nav className=\"navbar\">\r\n                        <div className=\"logo row\" onClick={this.handleHomePageClick}>\r\n                            <NavLink to='/home'><img id=\"logo\" src=\"/img/logo.png\" alt=\"Logo\" aria-label=\"Return to main page.\" /></NavLink>\r\n                            <NavLink to='/home'><p className=\"h2\" id=\"logo-text\">Round Table</p></NavLink>\r\n                        </div>\r\n                        <div className=\"nav-search\">\r\n                            <div className=\"profile-setting\">\r\n                                <div className=\"nav-links\">\r\n                                    <NavLink to='/home' className=\"text-uppercase font-weight-bold\" onClick={this.handleHomePageClick}\r\n                                        >Homepage</NavLink>\r\n                                    <NavLink to='/mygroup' className=\"text-uppercase font-weight-bold\" onClick={this.handleMyGroupClick}\r\n                                        >MyGroups</NavLink>\r\n                                    <NavLink to='/myprofile' className=\"text-uppercase font-weight-bold\">Profile</NavLink>\r\n                                    <NavLink to='/' className=\"text-uppercase font-weight-bold\" onClick={() => this.props.setAuthToken(null)}>Sign out</NavLink>\r\n                                    <NavLink to='/myprofile'><img className=\"avatar\" src={this.props.userPhoto}  alt=\"User Profile\" /></NavLink>\r\n                                </div>\r\n                                \r\n                                <div className=\"dropdown-mobile\" onClick={this.toggleMenu}>\r\n                                    <NavLink to='#' className=\"dropdown-toggle profile-link\" role=\"button\" id=\"dropdownMenuLink\"\r\n                                        data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"><img\r\n                                        className=\"avatar\" src={url} alt=\"User Profile\" /></NavLink>\r\n\r\n                                    <div className=\"dropdown-menu dropdown-menu-right\" aria-labelledby=\"dropdownMenuLink\" style={this.checkStyle()}>\r\n                                        <NavLink to='/home' onClick={this.handleHomePageClick} className=\"dropdown-item\">Homepage</NavLink>\r\n                                        <div className=\"dropdown-divider\"></div>\r\n                                        <NavLink to='/mygroup'  className=\"dropdown-item\" onClick={this.handleMyGroupClick}>MyGroups</NavLink>\r\n                                        <div className=\"dropdown-divider\"></div>\r\n                                        <NavLink to='/myprofile' className=\"dropdown-item\" >Profile</NavLink>\r\n                                        <div className=\"dropdown-divider\"></div>\r\n                                        {/* TODO: Change this to an api call. */}\r\n                                        <NavLink to='/' className=\"dropdown-item signout\" onClick={() => this.props.setAuthToken(null)}>Sign out</NavLink>\r\n                                    </div>\r\n                                    \r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </nav>\r\n                </header>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faGithub } from '@fortawesome/free-brands-svg-icons'\r\n\r\nexport default class Footer extends React.Component {\r\n    render() {\r\n        return (\r\n            <Router>\r\n            <div>\r\n                <footer> \r\n                    <div className=\"container\">\r\n                        <div className=\"row d-flex text-center justify-content-center github\">\r\n                            <a href=\"https://github.com/WayneLi1063/Roundtable\" aria-label=\"Get source code of this site from Github!\"><FontAwesomeIcon icon={faGithub} size=\"lg\" className=\"white mt-1\" /></a>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"container\">\r\n                        <div className=\"row d-flex text-center justify-content-center\">\r\n                            <div className=\"col-md-8 col-12 mt-4 mb-2\">\r\n                            <p className=\"footer-text\">This web app is designed to help college students who would like to\r\n                                create or join study groups based on their currently taking courses and study goals.\r\n                                    </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <hr className=\"rgba-light\" />\r\n                    <div className=\"container\">\r\n                        <div className=\"d-flex text-center justify-content-center\">\r\n                            <div className=\"font-small\">\r\n                                <p>&copy; 2021 Wanye Li, Andi Ren, Aryan Varshney, Coco Li. All rights reserved.</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </footer>\r\n            </div>\r\n            </Router>\r\n        )\r\n    }\r\n}","const { CognitoIdentityClient } = require(\"@aws-sdk/client-cognito-identity\");\r\nconst { fromCognitoIdentityPool, } = require(\"@aws-sdk/credential-provider-cognito-identity\");\r\nconst { S3Client, PutObjectCommand, ListObjectsCommand } = require(\"@aws-sdk/client-s3\");\r\n\r\nexport const albumBucketName = \"roundtablefinder\";\r\nexport const bucketRegion = \"us-west-1\";\r\nconst IdentityPoolId = \"us-west-1:28fdba59-1304-427e-8879-19f3d8c15844\";\r\n\r\nconst s3 = new S3Client({\r\n    region: bucketRegion,\r\n    credentials: fromCognitoIdentityPool({\r\n      client: new CognitoIdentityClient({ region: bucketRegion }),\r\n      identityPoolId: IdentityPoolId, // IDENTITY_POOL_ID\r\n    }),\r\n  });\r\n\r\n// Add a photo to an album\r\nexport const AddPhoto = async (albumName, imgFile, photoKeyName, callback) => {\r\n      const albumPhotosKey = encodeURIComponent(albumName) + \"/\";\r\n      await s3.send(\r\n          new ListObjectsCommand({\r\n            Prefix: albumPhotosKey,\r\n            Bucket: albumBucketName\r\n          })\r\n      );\r\n      const fileName = imgFile.name;\r\n      let photoKey = \"\";\r\n      if (photoKeyName === \"\") {\r\n        photoKey = albumPhotosKey + fileName;\r\n      } else {\r\n        photoKey = albumPhotosKey + photoKeyName;\r\n      }\r\n      const uploadParams = {\r\n        Bucket: albumBucketName,\r\n        Key: photoKey,\r\n        Body: imgFile\r\n      };\r\n      try {\r\n        await s3.send(new PutObjectCommand(uploadParams));\r\n        console.log(\"Successfully uploaded photo.\");\r\n        callback()\r\n      } catch (err) {\r\n        console.error(\"There was an error uploading your photo: \", err.message);\r\n      }\r\n}","import React from 'react';\r\nimport { albumBucketName, bucketRegion, AddPhoto } from './S3.js';\r\n\r\n// The form for \"create a group\" function.\r\nexport default class Create extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            img: '',\r\n            groupName: '',\r\n            description: '',\r\n            courseName: '',\r\n            when2meetURL: '',\r\n            groupSize: 2,\r\n            emptyAlertDisplay: false,\r\n            emptyCourseDisplay: false,\r\n            exceedCharDisplay: false,\r\n            homeworkHelp: false,\r\n            examSquad: false,\r\n            noteExchange: false,\r\n            labMates: false,\r\n            projectPartners: false,\r\n            private: false,\r\n            myCourses: []\r\n        }\r\n    }\r\n\r\n    // updates course list prop when database fetches\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.courseList !== prevProps.courseList) {\r\n            this.setState(() => {\r\n                return ({ myCourses: this.props.courseList, courseName: this.props.courseList[0] });\r\n            })\r\n        }\r\n    }\r\n\r\n    // Toggles an in-page alert when users submit an empty field\r\n    toggleEmpty = () => {\r\n        this.setState((prevState) => {\r\n            return { emptyAlertDisplay: !prevState.emptyAlertDisplay }\r\n        })\r\n    }\r\n\r\n    // Toggles an in-page alert when users submit a group name with more than 24 characters.\r\n    toggleExceed = () => {\r\n        this.setState((prevState) => {\r\n            return { exceedCharDisplay: !prevState.exceedCharDisplay }\r\n        })\r\n    }\r\n\r\n    // Toggles an in-page alert when users didn't input current courses or encountered conncection error.\r\n    toggleEmptyCourse = () => {\r\n        this.setState((prevState) => {\r\n            return { emptyCourseDisplay: !prevState.emptyCourseDisplay }\r\n        })\r\n    }\r\n\r\n    // Handles the user passed-in image.\r\n    handleImgURLChange = (event) => {\r\n        let newImg = event.target.files[0];\r\n        this.setState({\r\n            img: newImg\r\n        });\r\n    }\r\n\r\n    // Handles the interaction when user types in group name field.\r\n    handleGroupNameChange = (event) => {\r\n        if (this.state.emptyAlertDisplay) {\r\n            this.toggleEmpty();\r\n        }\r\n        if (this.state.exceedCharDisplay) {\r\n            this.toggleExceed();\r\n        }\r\n        let newString = event.target.value;\r\n        this.setState({\r\n            groupName: newString\r\n        });\r\n    }\r\n\r\n    // Handles the interaction when user selects an option in course name drop down.\r\n    handleCourseNameChange = (event) => {\r\n        let newValue = event.target.value;\r\n        this.setState({\r\n            courseName: newValue\r\n        });\r\n    }\r\n\r\n    // Handles the interaction when user types in description field.\r\n    handleDescriptionChange = (event) => {\r\n        let newString = event.target.value;\r\n        this.setState({\r\n            description: newString\r\n        });\r\n    }\r\n\r\n    // Handles the interaction when user types in description field.\r\n    handleMeetChange = (event) => {\r\n        let newString = event.target.value;\r\n        this.setState({\r\n            when2meetURL: newString\r\n        });\r\n    }\r\n\r\n    // Handles the interaction when user checks the private button.\r\n    handlePrivateChange = (event) => {\r\n        this.setState((prevState) => {\r\n            return { private: !prevState.private }\r\n        })\r\n    }\r\n\r\n    // Handles the interaction when user selects the Homeeork Help option.\r\n    handleHomeworkHelpChange = () => {\r\n        this.setState((prevState) => {\r\n            return { homeworkHelp: !prevState.homeworkHelp }\r\n        })\r\n    }\r\n\r\n    // Handles the interaction when user selects Exam Squad option.\r\n    handleExamSquadChange = () => {\r\n        this.setState((prevState) => {\r\n            return { examSquad: !prevState.examSquad }\r\n        })\r\n    }\r\n\r\n    // Handles the interaction when user selects Note Exchange option.\r\n    handleNoteExchangeChange = () => {\r\n        this.setState((prevState) => {\r\n            return { noteExchange: !prevState.noteExchange }\r\n        })\r\n\r\n    }\r\n\r\n    // Handles the interaction when user selects Lab Mates option.\r\n    handleLabMatesChange = () => {\r\n        this.setState((prevState) => {\r\n            return { labMates: !prevState.labMates }\r\n        })\r\n    }\r\n\r\n    // Handles the interaction when user selects Project Partners option.\r\n    handleProjectPartnersChange = () => {\r\n        this.setState((prevState) => {\r\n            return { projectPartners: !prevState.projectPartners }\r\n        })\r\n    }\r\n\r\n    // Handles the interaction when user changes the group size slider.\r\n    handleGroupSizeChange = (event) => {\r\n        let newSize = event.target.value;\r\n        this.setState({\r\n            groupSize: newSize\r\n        });\r\n    }\r\n\r\n    // Signifies what value the group size slider current is.\r\n    handleGroupSizeOutput = (event) => {\r\n        event.target.value = this.state.groupSize;\r\n    }\r\n\r\n    // Handles the create group funtion when user sumbits the create form.\r\n    handleSubmit = () => {\r\n        let newGroup = {};\r\n        if (this.state.groupName.length === 0) {\r\n            this.toggleEmpty();\r\n        } else if (this.state.groupName.length > 24) {\r\n            this.toggleExceed();\r\n        } else if (this.state.myCourses[0] === \"Please set up your current courses in profile page.\") {\r\n            this.toggleEmptyCourse();\r\n            // default img if user didn't upload image\r\n        } else {\r\n            if (this.state.img === '') {\r\n                let url = \"https://s3-us-west-2.amazonaws.com/uw-s3-cdn/wp-content/uploads/sites/81/2015/04/07090900/uw-block-w-statue-377x160.jpg\"\r\n                this.handleSubmitHelper(newGroup, url);\r\n            } else {\r\n                AddPhoto(\"GroupPhotos\", this.state.img, \"\")\r\n                let url = `https://${albumBucketName}.s3.${bucketRegion}.amazonaws.com/GroupPhotos/${this.state.img.name}`\r\n                this.handleSubmitHelper(newGroup, url);\r\n            }\r\n            this.props.toggleForm();\r\n        }\r\n    }\r\n\r\n    // update the state, display the appropriate information inside the feedback popup window\r\n    handleSubmitHelper(newGroup, url) {\r\n        newGroup.teamName = this.state.groupName;\r\n        newGroup.className = this.state.courseName;\r\n        newGroup.totalNumber = parseInt(this.state.groupSize, 10);\r\n        newGroup.img = url\r\n        newGroup.homeworkHelp = this.state.homeworkHelp\r\n        newGroup.examSquad = this.state.examSquad\r\n        newGroup.noteExchange = this.state.noteExchange\r\n        newGroup.labMates = this.state.labMates\r\n        newGroup.projectPartners = this.state.projectPartners\r\n        newGroup.description = this.state.description;\r\n        newGroup.private = this.state.private;\r\n        newGroup.when2meetURL = this.state.when2meetURL;\r\n        this.props.onSubmit(newGroup);\r\n        if (this.props.feedbackDisplay) {\r\n            this.props.toggleFeedback();\r\n            this.props.feedbackInfo.pop();\r\n            this.props.feedbackInfo.pop();\r\n            this.props.feedbackInfo.push(\"created\");\r\n            this.props.feedbackInfo.push(this.state.groupName);\r\n            this.props.toggleFeedback();\r\n        } else {\r\n            this.props.feedbackInfo.push(\"created\");\r\n            this.props.feedbackInfo.push(this.state.groupName);\r\n            this.props.toggleFeedback();\r\n        }\r\n        this.setState({\r\n            img: '',\r\n            groupName: ''\r\n        });\r\n    }\r\n\r\n    // Renders a create form for user to input.\r\n    render() {\r\n        let courseOptions = this.state.myCourses.map((course) => {\r\n            return <option value={course} key={course}>{course}</option>\r\n        })\r\n\r\n        return (\r\n            <div>\r\n                {this.props.createDisplay &&\r\n                    <div className=\"form-popup\" id=\"create-form\">\r\n                        <form className=\"form-container\">\r\n                            <h1>Create Group</h1>\r\n\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"create-new-image\" className=\"font-weight-bold\">Upload New Image</label><br />\r\n                                <input type=\"file\" id=\"create-new-image\" onChange={this.handleImgURLChange} accept=\"image/*\" />\r\n                            </div>\r\n\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"create-group-name\" className=\"font-weight-bold\">Group Name</label>\r\n                                <input type=\"text\" className=\"form-control\" id=\"create-group-name\" value={this.state.groupName} onChange={this.handleGroupNameChange} />\r\n                                {this.state.emptyAlertDisplay &&\r\n                                    <p className=\"alert-red alert-create empty-field\">This field cannot be empty.</p>\r\n                                }\r\n                                {this.state.exceedCharDisplay &&\r\n                                    <p className=\"alert-red alert-create 24-char\">This field cannot exceed 24 characters.</p>\r\n                                }\r\n                            </div>\r\n\r\n                            <div className=\"form-group\">\r\n                                <div className=\"form-group course-container\" id=\"courseList-create\">\r\n                                    <label htmlFor=\"create-course-name\" className=\"font-weight-bold\">Course Name</label>\r\n                                    <select className=\"form-control select-field\" id=\"create-course-name\" onChange={this.handleCourseNameChange}>\r\n                                        {courseOptions}\r\n                                    </select>\r\n                                    {this.state.emptyCourseDisplay &&\r\n                                        <p className=\"alert-red alert-create empty-course\">Empty current courses or connection error, please set up your courses in profile page, or refresh webpage.</p>\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"create-group-descr\" className=\"font-weight-bold\">Group Description</label>\r\n                                <input type=\"text\" className=\"form-control\" id=\"create-group-descr\" value={this.state.description} onChange={this.handleDescriptionChange} />\r\n                            </div>\r\n\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"create-meet\" className=\"font-weight-bold\">When2meet URL</label>\r\n                                <input type=\"text\" className=\"form-control\" id=\"create-meet\" value={this.state.when2meetURL} onChange={this.handleMeetChange} />\r\n                            </div>\r\n\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"create-group-size\" className=\"font-weight-bold\">Group Size (2-5)</label><br />\r\n                                <input type=\"range\" name=\"create-group-size\" max=\"5\" min=\"2\" id=\"create-group-size\"\r\n                                    className=\"g-size\" value={this.state.groupSize} onChange={this.handleGroupSizeChange} />\r\n                                <output className=\"ml-3\" name=\"create-size-output\" id=\"create-size-output\">{this.state.groupSize}</output>\r\n                            </div>\r\n\r\n                            <div className=\"form-group\">\r\n                                <div className=\"create-form-group\" aria-labelledby=\"goal-text\">\r\n                                    <p className=\"form-check-label font-weight-bold\" id=\"goal-text\">Group Goal</p>\r\n                                    <div className=\"form-check\">\r\n                                        <div className=\"row\">\r\n                                            <div className=\"col-6\">\r\n                                                <input className=\"form-check-input\" type=\"checkbox\"\r\n                                                    id=\"create-goal-1\" onClick={this.handleHomeworkHelpChange} />\r\n                                                <label className=\"form-check-label\" htmlFor=\"create-goal-1\">Homework\r\n                                                    Help</label>\r\n                                            </div>\r\n                                            <div className=\"col-6\">\r\n                                                <input className=\"form-check-input\" type=\"checkbox\"\r\n                                                    id=\"create-goal-2\" onClick={this.handleExamSquadChange} />\r\n                                                <label className=\"form-check-label\" htmlFor=\"create-goal-2\">Exam Squad</label>\r\n                                            </div>\r\n                                            <div className=\"col-6\">\r\n                                                <input className=\"form-check-input\" type=\"checkbox\"\r\n                                                    id=\"create-goal-3\" onClick={this.handleNoteExchangeChange} />\r\n                                                <label className=\"form-check-label\" htmlFor=\"create-goal-3\">Note\r\n                                                    Exchange</label>\r\n                                            </div>\r\n                                            <div className=\"col-6\">\r\n                                                <input className=\"form-check-input\" type=\"checkbox\"\r\n                                                    id=\"create-goal-4\" onClick={this.handleLabMatesChange} />\r\n                                                <label className=\"form-check-label\" htmlFor=\"create-goal-4\">Lab Mates</label>\r\n                                            </div>\r\n                                            <div className=\"col-6\">\r\n                                                <input className=\"form-check-input\" type=\"checkbox\"\r\n                                                    id=\"create-goal-5\" onClick={this.handleProjectPartnersChange} />\r\n                                                <label className=\"form-check-label\" htmlFor=\"create-goal-5\">Project\r\n                                                    Partners</label>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"form-button\">\r\n                                <button type=\"button\" id=\"submit-create\" className=\"btn save\" onClick={this.handleSubmit}>Save</button>\r\n                                <button type=\"button\" id=\"cancel-create\" className=\"btn cancel\" onClick={this.props.toggleForm}>Cancel</button>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport { albumBucketName, bucketRegion, AddPhoto } from './S3.js'\r\n\r\n// The form for \"edit\" button.\r\nexport default class Create extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            img: this.props.editData.imgURL,\r\n            groupName: this.props.editData.teamName,\r\n            courseName: this.props.editData.className,\r\n            description: this.props.editData.description,\r\n            when2meetURL: this.props.editData.when2meetURL,\r\n            private: false,\r\n            groupSize: this.props.editData.totalNumber,\r\n            homeworkHelp: this.props.editData.tags.homeworkHelp,\r\n            examSquad: this.props.editData.tags.examSquad,\r\n            noteExchange: this.props.editData.tags.noteExchange,\r\n            labMates: this.props.editData.tags.labMates,\r\n            projectPartners: this.props.editData.tags.projectPartners,\r\n            emptyAlertDisplay: false,\r\n            exceedCharDisplay: false,\r\n            manyMemberDisplay: false,\r\n            myCourses: this.props.courseList,\r\n            authToken: localStorage.getItem(\"Authorization\") || null\r\n        }\r\n    }\r\n\r\n    // updates course list prop when database fetches\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.courseList !== prevProps.courseList) {\r\n            this.setState(() => {\r\n                return ({ myCourses: this.props.courseList });\r\n            })\r\n        }\r\n    }\r\n\r\n    // Toggles an in-page alert when users submit an empty field\r\n    toggleEmpty = () => {\r\n        this.setState((prevState) => {\r\n            return { emptyAlertDisplay: !prevState.emptyAlertDisplay }\r\n        })\r\n    }\r\n\r\n    // Toggles an in-page alert when users submit a group name with more than 24 characters.\r\n    toggleExceed = () => {\r\n        this.setState((prevState) => {\r\n            return { exceedCharDisplay: !prevState.exceedCharDisplay }\r\n        })\r\n    }\r\n\r\n    // Toggles an in-page alert when users tries to lower group size past threshold,\r\n    // which is the currently occupied number of people.\r\n    toggleManyMember = () => {\r\n        this.setState((prevState) => {\r\n            return { manyMemberDisplay: !prevState.manyMemberDisplay }\r\n        })\r\n    }\r\n\r\n    // Handles the user passed-in image.\r\n    handleImgURLChange = (event) => {\r\n        let newImg = event.target.files[0];\r\n        this.setState({\r\n            img: newImg\r\n        });\r\n    }\r\n\r\n    // Handles the interaction when user types in group name field.\r\n    handleGroupNameChange = (event) => {\r\n        if (this.state.emptyAlertDisplay) {\r\n            this.toggleEmpty();\r\n        }\r\n        if (this.state.exceedCharDisplay) {\r\n            this.toggleExceed();\r\n        }\r\n        let newString = event.target.value;\r\n        this.setState({\r\n            groupName: newString\r\n        });\r\n    }\r\n\r\n    // Handles the interaction when user selects an option in course name drop down.\r\n    handleCourseNameChange = (event) => {\r\n        let newValue = event.target.value;\r\n        this.setState({\r\n            courseName: newValue\r\n        });\r\n    }\r\n\r\n    // Handles the interaction when user changes the group size slider.\r\n    handleGroupSizeChange = (event) => {\r\n        let newSize = event.target.value;\r\n        this.setState({\r\n            groupSize: newSize\r\n        });\r\n    }\r\n\r\n    // Handles the interaction when user types in description field.\r\n    handleDescriptionChange = (event) => {\r\n        let newString = event.target.value;\r\n        this.setState({\r\n            description: newString\r\n        });\r\n    }\r\n\r\n    // Handles the interaction when user types in description field.\r\n    handleMeetChange = (event) => {\r\n        let newString = event.target.value;\r\n        this.setState({\r\n            when2meetURL: newString\r\n        });\r\n    }\r\n\r\n    // Handles the interaction when user checks the private button.\r\n    handlePrivateChange = (event) => {\r\n        this.setState((prevState) => {\r\n            return { private: !prevState.private }\r\n        })\r\n    }\r\n\r\n    // Handles the interaction when user selects the Homework Help option.\r\n    handleHomeworkHelpChange = () => {\r\n        this.setState((prevState) => {\r\n            return { homeworkHelp: !prevState.homeworkHelp }\r\n        })\r\n    }\r\n\r\n    // Handles the interaction when user selects Exam Squad option.\r\n    handleExamSquadChange = () => {\r\n        this.setState((prevState) => {\r\n            return { examSquad: !prevState.examSquad }\r\n        })\r\n    }\r\n\r\n    // Handles the interaction when user selects Note Exchange option.\r\n    handleNoteExchangeChange = () => {\r\n        this.setState((prevState) => {\r\n            return { noteExchange: !prevState.noteExchange }\r\n        })\r\n\r\n    }\r\n\r\n    // Handles the interaction when user selects Lab Mates option.\r\n    handleLabMatesChange = () => {\r\n        this.setState((prevState) => {\r\n            return { labMates: !prevState.labMates }\r\n        })\r\n    }\r\n\r\n    // Handles the interaction when user selects Project Partners option.\r\n    handleProjectPartnersChange = () => {\r\n        this.setState((prevState) => {\r\n            return { projectPartners: !prevState.projectPartners }\r\n        })\r\n    }\r\n\r\n    // Signifies what value the group size slider current is.\r\n    handleGroupSizeOutput = (event) => {\r\n        event.target.value = this.state.groupSize;\r\n    }\r\n\r\n    // Handles the create group funtion when user sumbits the edit form.\r\n    handleSubmit = () => {\r\n        let newGroup = {};\r\n        if (this.state.groupName.length === 0) {\r\n            this.toggleEmpty();\r\n        } else if (this.state.groupName.length > 24) {\r\n            this.toggleExceed();\r\n        } else if (this.state.groupSize < this.props.editData.members.length) {\r\n            this.toggleManyMember();\r\n        } else {\r\n            if (typeof this.state.img !== \"string\") {\r\n                AddPhoto(\"GroupPhotos\", this.state.img, \"\")\r\n                let url = `https://${albumBucketName}.s3.${bucketRegion}.amazonaws.com/GroupPhotos/${this.state.img.name}`\r\n                this.handleSubmitHelper(newGroup, url);\r\n            } else {\r\n                this.handleSubmitHelper(newGroup, this.state.img);\r\n            }\r\n            this.props.toggleForm();\r\n        }\r\n    }\r\n\r\n    // The main interaction for handle submit\r\n    handleSubmitHelper = (newGroup, url) => {\r\n        newGroup.teamName = this.state.groupName;\r\n        newGroup.className = this.state.courseName;\r\n        newGroup.totalNumber = this.state.groupSize ? parseInt(this.state.groupSize, 10) : parseInt(this.props.editData.maxSize, 10);\r\n        newGroup.description = this.state.description;\r\n        newGroup.when2meetURL = this.state.when2meetURL;\r\n        newGroup.private = this.state.private;\r\n        newGroup.img = url;\r\n        newGroup.homeworkHelp = this.state.homeworkHelp\r\n        newGroup.examSquad = this.state.examSquad\r\n        newGroup.noteExchange = this.state.noteExchange\r\n        newGroup.labMates = this.state.labMates\r\n        newGroup.projectPartners = this.state.projectPartners\r\n        this.props.onSubmit(newGroup, this.props.editData._id);\r\n    }\r\n\r\n    // Handles the disband group funtion when user clicks on the disband function.\r\n    handleDisband = () => {\r\n        this.props.onDisband(this.props.editData);\r\n    }\r\n\r\n    // Renders an edit form for user to input.\r\n    render() {\r\n        let courseOptions = this.state.myCourses.map((course) => {\r\n            return <option value={course} key={course}>{course}</option>\r\n        })\r\n\r\n        return (\r\n            <div className=\"form-popup\" id=\"edit-form\">\r\n                <form className=\"form-container\">\r\n                    <h1>Edit Group</h1>\r\n\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"new-image\" className=\"font-weight-bold\">Upload New Image</label><br />\r\n                        <input type=\"file\" id=\"new-image\" onChange={this.handleImgURLChange} accept=\"image/*\" /><br />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"g-name\" className=\"font-weight-bold\">Group Name</label><br />\r\n                        <input type=\"text\" id=\"g-name\" value={this.state.groupName} onChange={this.handleGroupNameChange} /><br />\r\n                        {this.state.emptyAlertDisplay &&\r\n                            <p className=\"alert-red alert-edit empty-field\">This field cannot be empty.</p>\r\n                        }\r\n                        {this.state.exceedCharDisplay &&\r\n                            <p className=\"alert-red alert-edit 24-char\">This field cannot exceed 24 characters.</p>\r\n                        }\r\n                    </div>\r\n                    <div className=\"form-group courseContainer\" id=\"courseListEdit\">\r\n                        <label htmlFor=\"c-name\" className=\"font-weight-bold\">Course Name</label>\r\n                        <select className=\"form-control\" id=\"c-name\" value={this.state.courseName} onChange={this.handleCourseNameChange}>\r\n                            {courseOptions}\r\n                        </select>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"g-descr\" className=\"font-weight-bold\">Description</label><br />\r\n                        <input type=\"text\" id=\"g-descr\" value={this.state.description} onChange={this.handleDescriptionChange} /><br />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"g-meet\" className=\"font-weight-bold\">When2Meet URL</label><br />\r\n                        <input type=\"text\" id=\"g-meet\" value={this.state.when2meetURL} onChange={this.handleMeetChange} /><br />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"g-size\" className=\"font-weight-bold\">Group Size (2-5)</label><br />\r\n                        <input type=\"range\" name=\"g-size\" max=\"5\" min=\"2\" id=\"g-size\" className=\"g-size\" value={this.state.groupSize ? this.state.groupSize : this.props.editData.maxSize } onChange={this.handleGroupSizeChange} />\r\n                        <output className=\"ml-3\" name=\"size-output\" id=\"size-output\">{this.state.groupSize}</output><br />\r\n                        {this.state.manyMemberDisplay &&\r\n                            <p className=\"alert-red alert-edit many-member\">You have {this.props.editData.members.length} members which exceeds desired group size.</p>\r\n                        }\r\n                    </div>\r\n\r\n                    <div className=\"form-group\">\r\n                        <div className=\"edit-form-group\" aria-labelledby=\"goal-text\">\r\n                            <p className=\"form-check-label font-weight-bold\" id=\"goal-text\">Group Goal</p>\r\n                            <div className=\"form-check\">\r\n                                <div className=\"row\">\r\n                                    <div className=\"col-6\">\r\n                                        <input className=\"form-check-input\" type=\"checkbox\" checked={this.state.homeworkHelp} onClick={this.handleHomeworkHelpChange}\r\n                                            id=\"edit-goal-1\" readOnly />\r\n                                        <label className=\"form-check-label\" htmlFor=\"edit-goal-1\">Homework\r\n                                                    Help</label>\r\n                                    </div>\r\n                                    <div className=\"col-6\">\r\n                                        <input className=\"form-check-input\" type=\"checkbox\" onClick={this.handleExamSquadChange} checked={this.state.examSquad}\r\n                                            id=\"edit-goal-2\" readOnly />\r\n                                        <label className=\"form-check-label\" htmlFor=\"edit-goal-2\">Exam Squad</label>\r\n                                    </div>\r\n                                    <div className=\"col-6\">\r\n                                        <input className=\"form-check-input\" type=\"checkbox\" checked={this.state.noteExchange}\r\n                                            id=\"edit-goal-3\" onClick={this.handleNoteExchangeChange} readOnly />\r\n                                        <label className=\"form-check-label\" htmlFor=\"edit-goal-3\">Note\r\n                                                    Exchange</label>\r\n                                    </div>\r\n                                    <div className=\"col-6\">\r\n                                        <input className=\"form-check-input\" type=\"checkbox\" checked={this.state.labMates}\r\n                                            id=\"edit-goal-4\" onClick={this.handleLabMatesChange} readOnly />\r\n                                        <label className=\"form-check-label\" htmlFor=\"edit-goal-4\">Lab Mates</label>\r\n                                    </div>\r\n                                    <div className=\"col-6\">\r\n                                        <input className=\"form-check-input\" type=\"checkbox\" checked={this.state.projectPartners}\r\n                                            id=\"edit-goal-5\" onClick={this.handleProjectPartnersChange} readOnly />\r\n                                        <label className=\"form-check-label\" htmlFor=\"edit-goal-5\">Project\r\n                                                    Partners</label>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <label htmlFor=\"leave\">Disband the group?</label>\r\n                    <button type=\"button\" className=\"btn disband\" id=\"leave\" onClick={this.props.togglePopUpForm}>Disband</button>\r\n\r\n                    <div className=\"formButton\">\r\n                        <button type=\"button\" id=\"submit-edit\" className=\"btn save\" onClick={this.handleSubmit}>Save</button>\r\n                        <button type=\"button\" id=\"cancel-edit\" className=\"btn cancel\" onClick={this.props.toggleForm}>Cancel</button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}","import React from 'react';\r\n\r\nclass Confirm extends React.Component {\r\n    \r\n    //this calls the confirm function in the props(what you want to do when you hit yes) and then disables the page.\r\n    handleSumbitConfirm = () => {\r\n        this.props.confirmFunction(this.props.cardData);\r\n        this.props.toggleConfirm();\r\n    }\r\n    \r\n    //renders the confirm pop up form\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.props.confirmDisplay && \r\n                <div className=\"confirm-popup\" id=\"p-form\">\r\n                    <form className=\"confirm-container\">\r\n                        <h1>Are you sure?</h1>\r\n                        <div className=\"confirm-button\">\r\n                            <button type=\"button\" className=\"btn-yes\" onClick={this.handleSumbitConfirm} >Yes</button>\r\n                            <button type=\"button\" className=\"btn-no\" onClick={this.props.toggleConfirm} >No</button>\r\n                        </div>\r\n                    </form>\r\n                </div>}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Confirm;\r\n","import React from 'react';\r\n\r\n// Provides feedback when users join or create a group\r\nexport default class JoinCreateFeedback extends React.Component {\r\n    // Empty feedback content\r\n    toggleEmptyFeedback = () => {\r\n        this.props.toggleFeedback();\r\n        this.props.feedbackInfo.pop();\r\n        this.props.feedbackInfo.pop();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.props.feedbackDisplay &&\r\n                    <div className=\"feedback-pop\">\r\n                        <form className=\"pop-container\">\r\n                            <p>You have sucessfully {this.props.feedbackInfo[0]} {this.props.feedbackInfo[1]}.</p>\r\n                            <p>Please see MYGROUPS page to view your current groups.</p>\r\n                            <div className=\"popCancel\">\r\n                                <button type=\"button\" id=\"popCancel\" className=\"btn cancel\" onClick={this.toggleEmptyFeedback}>Close</button>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTrashAlt } from '@fortawesome/free-solid-svg-icons'\r\n\r\nexport default class AddCourses extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            courses: this.props.courses,\r\n            newName: '',\r\n            emptyAlertDisplay: false,\r\n            authToken: localStorage.getItem(\"Authorization\") || null\r\n        }\r\n    }\r\n\r\n    // When the props gets updated, change the state as well\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.courses !== prevProps.courses) {\r\n            this.setState(() => {\r\n                return ({ courses: this.props.courses });\r\n            })\r\n        }\r\n    }\r\n\r\n    // Called when component shows\r\n    componentDidMount() {\r\n        this.props.getCourseCallback()\r\n    }\r\n\r\n    // disable event listens.\r\n    componentWillUnmount() {\r\n\r\n    }\r\n\r\n    //shows empty field alert\r\n    showEmpty = () => {\r\n        this.setState({ emptyAlertDisplay: true })\r\n    }\r\n\r\n    //hides empty field alert\r\n    hideEmpty = () => {\r\n        this.setState({ emptyAlertDisplay: false })\r\n    }\r\n\r\n    //delete a course from the user's list\r\n    deleteCourse = async (course) => {\r\n        if (!this.state.authToken) {\r\n            return;\r\n        }\r\n        const response = await fetch(\"https://api.roundtablefinder.com/v1/courses/users\", {\r\n            method: 'DELETE',\r\n            headers: new Headers({\r\n                \"Authorization\": this.state.authToken,\r\n                \"Content-Type\": \"application/json\"\r\n            }),\r\n            body: JSON.stringify({course: course})\r\n        });\r\n        if (response.status >= 300) {\r\n            this.props.errorCallback(\"Delete course failed. Please retry\");\r\n        } else {\r\n            this.props.wsUpdate()\r\n        }\r\n    }\r\n\r\n    //add a course to the user's list\r\n    addOneCourse = async (newCourseName) => {\r\n        if (newCourseName === '') {\r\n            this.showEmpty();\r\n        } else {\r\n            if (!this.state.authToken) {\r\n                this.props.errorCallback(\"You are not authenticated\")\r\n                return;\r\n            }\r\n            const response = await fetch(\"https://api.roundtablefinder.com/v1/courses/users\", {\r\n                method: 'POST',\r\n                headers: new Headers({\r\n                    \"Authorization\": this.state.authToken,\r\n                    \"Content-Type\": \"application/json\"\r\n                }),\r\n                body: JSON.stringify({course: newCourseName})\r\n            });\r\n            if (response.status >= 300) {\r\n                this.props.errorCallback(\"Add course failed. Please retry\");\r\n            } else {\r\n                this.props.wsUpdate()\r\n            }\r\n            this.hideEmpty();\r\n        }\r\n    }\r\n\r\n    //handles the field change in the input component\r\n    handleNameChange = (event) => {\r\n        this.setState({\r\n            newName: event.target.value\r\n        })\r\n    }\r\n\r\n    //closes the pop up, and resets the input field\r\n    handleSubmit = () => {\r\n        this.props.toggleAddCourse();\r\n        this.setState({\r\n            newName: ''\r\n        })\r\n    }\r\n\r\n    //renders the component\r\n    render() {\r\n        let content = [];\r\n        let courses = this.state.courses;\r\n        if (courses) {\r\n            courses.forEach((course) => {\r\n                if (course !== \"Please set up your current courses in profile page.\") {\r\n                    content.push(<div className='course-tag'>\r\n                    {course}\r\n                    <FontAwesomeIcon icon={faTrashAlt} size=\"xs\" className=\"white trash mt-1 mr-2\" onClick={() => this.deleteCourse(course)} />\r\n                </div>)\r\n                }\r\n            })\r\n        }\r\n        \r\n        return (\r\n            <div>\r\n                <div className='addCoursePopUp'>\r\n                    <form className='addCourse-form-container'>\r\n                        <h1>Setup your current courses</h1>\r\n                        <label htmlFor=\"g-name\" className=\"font-weight-bold\">Add a course you are taking (EX. INFO340)</label><br />\r\n                        {this.state.emptyAlertDisplay &&\r\n                            <p className=\"alert-red alert-edit empty-field\">This field cannot be empty.</p>\r\n                        }\r\n                        <div className='add-course-input-flex-container'>\r\n                            <input type=\"text\" id=\"addCourseInput\" value={this.state.newName} onChange={this.handleNameChange} />\r\n                            <button type=\"button\" id=\"add-course\" className=\"btn-add\" onClick={() => { this.addOneCourse(this.state.newName) }}>Add</button>\r\n                        </div>\r\n                        <div className=\"course-list row\">\r\n                            {content}\r\n                        </div>\r\n                        <button type=\"button\" id=\"add-course-2\" className=\"btn-add-done\" onClick={() => this.handleSubmit()}>Done</button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPlusCircle } from '@fortawesome/free-solid-svg-icons';\r\nimport { albumBucketName, bucketRegion, AddPhoto } from './S3.js';\r\n\r\nexport default class Profile extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            display: 'profile',\r\n            firstName: '',\r\n            lastName: '',\r\n            email: '',\r\n            courses: '',\r\n            nameErr: false,\r\n            profileChanged: false,\r\n            userPhotoFile: '',\r\n            userPhoto: '',\r\n            userName: '',\r\n            authToken: localStorage.getItem(\"Authorization\") || null\r\n        }\r\n    }\r\n\r\n    // initial actions when component is created.\r\n    componentDidMount() {\r\n        this.props.toggleTwoButtons(false);\r\n        this.setUserProfile();\r\n        this.getCourse();\r\n    }\r\n\r\n    // actions when data is updated.\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (this.props.courses !== prevProps.courses) {\r\n            this.setState(() => {\r\n                return ({ courses: this.props.courses });\r\n            })\r\n        }\r\n    }\r\n\r\n    // decide to show the profile or edit tab\r\n    toggleMenu = (tab) => {\r\n        this.setState({ display: tab })\r\n    }\r\n\r\n    // handle clicks on cancel edit button\r\n    cancelEdit = () => {\r\n        this.setUserProfile();\r\n    }\r\n\r\n    // handle clicks on save change button\r\n    submitEdit = () => {\r\n        if (!this.state.authToken) {\r\n            this.props.errorCallback(\"You are not authenticated\")\r\n            return;\r\n        }\r\n        this.setState({\r\n            profileChanged: false,\r\n        });\r\n        if (this.state.firstName === '' && this.state.LastName === '') {\r\n            this.setState({\r\n                nameErr: true,\r\n            });\r\n        } else {\r\n            this.setState({\r\n                nameErr: false,\r\n            })\r\n            this.submitUpdate()\r\n        }\r\n    }\r\n\r\n    submitUpdate = async () => {\r\n        const update = {\r\n            FirstName: this.state.firstName,\r\n            LastName: this.state.lastName,\r\n        }\r\n        if (this.state.userPhotoFile !== '') {\r\n            AddPhoto(\"UserFolder\", this.state.userPhotoFile, this.state.userName, () => {\r\n                this.setProfilePic()\r\n            })\r\n        }\r\n        const response = await fetch(\"https://api.roundtablefinder.com/v1/users/me\", {\r\n            method: 'PATCH',\r\n            headers: new Headers({\r\n                \"Authorization\": this.state.authToken,\r\n                \"Content-Type\": \"application/json\"\r\n            }),\r\n            body: JSON.stringify(update)\r\n        });\r\n        if (response.status >= 300) {\r\n            this.props.errorCallback(\"error:\" + response.status);\r\n            return;\r\n        } else {\r\n            this.setUserProfile();\r\n            this.toggleMenu('profile');\r\n        }\r\n    }\r\n\r\n    // letting the client know to update profile pic\r\n    setProfilePic = () => {\r\n        this.setState({profileChanged: true});\r\n    }\r\n\r\n    // sets the authToken\r\n    setAuthToken = (auth) => {\r\n        localStorage.setItem(\"Authorization\", auth)\r\n        this.setState({authToken: auth});\r\n    }\r\n\r\n    // saves the user data\r\n    setUser = (user) => {\r\n        this.setState({user: user});\r\n    }\r\n\r\n    // fetch user information from the database\r\n    setUserProfile = async () => {\r\n        if (!this.state.authToken) {\r\n            this.props.errorCallback(\"You are not authenticated.\")\r\n            return;\r\n        }\r\n        const response = await fetch(this.props.api.base + this.props.api.handlers.myuser + \"me\", {\r\n            method: 'GET',\r\n            headers: new Headers({\r\n                \"Authorization\": this.state.authToken\r\n            })\r\n        });\r\n        if (response.status >= 300) {\r\n            this.props.errorCallback(\"error:\" + response.status);\r\n            return;\r\n        }\r\n        const user = await response.json()\r\n        this.setState({\r\n            firstName: user.firstName,\r\n            lastName: user.lastName,\r\n            email: user.email,\r\n            url: user.photoURL,\r\n            userName: user.userName,\r\n            userPhoto: `https://${albumBucketName}.s3.${bucketRegion}.amazonaws.com/UserFolder/${user.userName}`\r\n        })\r\n\r\n    }\r\n\r\n    // calls the course api to get user's current courses\r\n    getCourse = async () => {\r\n        if (!this.state.authToken) {\r\n            this.props.errorCallback(\"You are not authenticated\")\r\n            return;\r\n        }\r\n        const response = await fetch(\"https://api.roundtablefinder.com/v1/courses/users\", {\r\n            method: 'GET',\r\n            headers: new Headers({\r\n                \"Authorization\": this.state.authToken\r\n            })\r\n        });\r\n        if (response.status >= 300) {\r\n            this.props.errorCallback(\"Get course failed. Please retry\");\r\n            return;\r\n        }\r\n        const courses = await response.json()\r\n        if (courses !== null) {\r\n            this.setState({ courses: courses.classList });\r\n        }\r\n    }\r\n\r\n    // handle name change when users edit their profiles\r\n    handleFirstNameChange = (event) => {\r\n        this.setState({ firstName: event.target.value })\r\n    }\r\n\r\n    handleLastNameChange = (event) => {\r\n        this.setState({ lastName: event.target.value })\r\n    }\r\n\r\n    // handle profile photo change when users edit their profiles\r\n    handlePhoto = (event) => {\r\n        this.setState({ \r\n            userPhotoFile: event.target.files[0],\r\n            userPhoto: URL.createObjectURL(event.target.files[0])\r\n        })\r\n    }\r\n\r\n    render() {\r\n        let content = [];\r\n\r\n        let courses = this.state.courses;\r\n        if (courses.length !== 0) {\r\n            courses.forEach(course => {\r\n                if (course === \"Please set up your current courses in profile page.\") {\r\n                    course = \"Please set up your current courses by clicking the plus sign.\"\r\n                }\r\n                content.push(<div key={course} id=\"class-name\" className={`class-name + ${course}`}> {course} </div>)\r\n\r\n            })\r\n        }\r\n\r\n        if (this.state.display === 'profile') {\r\n            return (\r\n                <div className=\"container\">\r\n                    <div className=\"row my-2\">\r\n                        <div className=\"col-lg-8 order-lg-2\">\r\n                            <ul className=\"nav nav-tabs\">\r\n                                <li className=\"nav-item\">\r\n                                    <button onClick={() => this.toggleMenu('profile')} className=\"nav-link active\">Profile</button>\r\n                                </li>\r\n                                <li className=\"nav-item\">\r\n                                    <button onClick={() => this.toggleMenu('edit')} className=\"nav-link\">Edit</button>\r\n                                </li>\r\n                            </ul>\r\n                            <div className=\"tab-content py-4\">\r\n                                <div className=\"tab-pane active\" id=\"profile\">\r\n                                    <h5 className=\"mb-3\">{this.state.userName}</h5>\r\n                                    <div className=\"row\">\r\n                                        <div className=\"user-profile ml-3\">\r\n                                            <h6>First Name</h6>\r\n                                            <p>{this.state.firstName}</p>\r\n                                            <h6>Last Name</h6>\r\n                                            <p>{this.state.lastName}</p>\r\n                                            <h6>Email</h6>\r\n                                            <p>{this.state.email}</p>\r\n                                            <h6>Current Courses</h6>\r\n                                            <div className=\"my-courses\">\r\n                                                {content}\r\n                                            </div>\r\n                                            <FontAwesomeIcon icon={faPlusCircle} size=\"lg\" className=\"mx-3 mt-1\" onClick={this.props.toggleAddCourse} />\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-lg-4 order-lg-1\">\r\n                            <img src={this.state.userPhoto} className=\"mx-auto img-fluid img-circle d-block user-img\" alt=\"avatar\"></img>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )\r\n        } else {\r\n            return (\r\n                <div className=\"container\">\r\n                    <div className=\"row my-2\">\r\n                        <div className=\"col-lg-8 order-lg-2\">\r\n                            <ul className=\"nav nav-tabs\">\r\n                                <li className=\"nav-item\">\r\n                                    <button onClick={() => this.toggleMenu('profile')} className=\"nav-link\">Profile</button>\r\n                                </li>\r\n                                <li className=\"nav-item\">\r\n                                    <button onClick={() => this.toggleMenu('edit')} className=\"nav-link active\">Edit</button>\r\n                                </li>\r\n                            </ul>\r\n                            <div className=\"tab-content py-4\">\r\n                                <div className=\"tab-pane active\" id=\"edit\">\r\n                                    <form>\r\n                                        <div className=\"form-group row\">\r\n                                            <label className=\"col-lg-3 col-form-label form-control-label\">First Name</label>\r\n                                            <div className=\"col-lg-9\">\r\n                                                <input className=\"form-control\" type=\"text\" value={this.state.firstName} onChange={this.handleFirstNameChange}></input>\r\n                                            </div>\r\n                                            {this.state.nameErr && <p className='name-err'>Name cannot be empty!</p>}\r\n                                        </div>\r\n                                        <div className=\"form-group row\">\r\n                                            <label className=\"col-lg-3 col-form-label form-control-label\">Last Name</label>\r\n                                            <div className=\"col-lg-9\">\r\n                                                <input className=\"form-control\" type=\"text\" value={this.state.lastName} onChange={this.handleLastNameChange}></input>\r\n                                            </div>\r\n                                            {this.state.nameErr && <p className='name-err'>Name cannot be empty!</p>}\r\n                                        </div>\r\n                                        <div className=\"form-group row\">\r\n                                            <label className=\"col-lg-3 col-form-label form-control-label\"></label>\r\n                                            <div className=\"col-lg-9\">\r\n                                                <input type=\"reset\" className=\"btn btn-secondary mr-3\" value=\"Cancel\" onClick={this.cancelEdit}></input>\r\n                                                <input type=\"button\" className=\"btn btn-primary\" value=\"Save Changes\" onClick={this.submitEdit}></input>\r\n                                            </div>\r\n                                        </div>\r\n                                    </form>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-lg-4 order-lg-1\">\r\n                            <img src={this.state.userPhoto} className=\"mx-auto img-fluid img-circle d-block user-img\" alt=\"avatar\"></img>\r\n                            <div className=\"custom-file\">\r\n                                <input type=\"file\" accept=\"image/*\" className=\"custom-file-input\" onChange={this.handlePhoto} />\r\n                                <label className=\"custom-file-label\">Upload a different photo</label>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n\r\n    }\r\n}","import React from 'react';\r\nimport Confirm from './Confirm.js';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nconst NOT_JOINED = 0; // This user doesn't belong in this group\r\nconst MEMBER = 1; // This user is a member\r\nconst LEADER = 2; // This user is a leader\r\n\r\nclass Card extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            confirmPopUp: false,\r\n            shouldRedirect: false\r\n        }\r\n    }\r\n\r\n    // handles the interaction when user wants to show details for a group.\r\n    handleDetailClick = () => {\r\n        this.setState({shouldRedirect: true});\r\n    }\r\n\r\n    //this is a toggle switch for confirm pop up window, it switchs the display of the popup everytime its called.\r\n    toggleConfirm = () => {\r\n        this.setState((prevState) => {\r\n            return { confirmPopUp: !prevState.confirmPopUp };\r\n        })\r\n    }\r\n\r\n    //this is a hub controller for all functions revolving a card.\r\n    handleManageGroup = () => {\r\n        if (this.props.feedbackDisplay && this.reportGroupStatus() === NOT_JOINED) {\r\n            this.props.toggleFeedback();\r\n            this.props.feedbackInfo.pop();\r\n            this.props.feedbackInfo.pop();\r\n            this.props.feedbackInfo.push(\"joined\");\r\n            this.props.feedbackInfo.push(this.props.cardData.teamName);\r\n            this.props.toggleFeedback();\r\n        } else if (this.reportGroupStatus() === NOT_JOINED) {\r\n            this.props.feedbackInfo.push(\"joined\");\r\n            this.props.feedbackInfo.push(this.props.cardData.teamName);\r\n            this.props.toggleFeedback();\r\n        }\r\n\r\n        if (this.reportGroupStatus() === LEADER) {\r\n            this.props.editFunction(this.props.cardData);\r\n        } else if (this.reportGroupStatus() === MEMBER) {\r\n            this.toggleConfirm();\r\n        } else {\r\n            this.props.switchFunction(this.props.cardData);\r\n        }\r\n        this.props.fetch()\r\n    }\r\n\r\n    // returns the group status for this current user\r\n    reportGroupStatus() {\r\n        let members = this.props.cardData.members;\r\n        let creator = this.props.cardData.creator;\r\n        if (creator.userID === this.props.user.id) {\r\n            return LEADER\r\n        } else if (members.includes(this.props.user.id)){\r\n            return MEMBER\r\n        } else {\r\n            return NOT_JOINED;\r\n        }\r\n    }\r\n\r\n    // Returns a serie of icons to represent the current member status(joined / group size).\r\n    getMemberIcons() {\r\n        let iconIndicators = [];\r\n        for (let i = 0; i < this.props.cardData.maxSize; i++) {\r\n            if (i < this.props.cardData.members.length) {\r\n                iconIndicators.push(true);\r\n            } else {\r\n                iconIndicators.push(false);\r\n            }\r\n        }\r\n\r\n        let iconList = [];\r\n\r\n        iconIndicators.forEach((indicator, index) => {\r\n            let singleIcon = (\r\n                this.getMemberIcon(indicator, index)\r\n            )\r\n            iconList.push(singleIcon);\r\n        })\r\n\r\n        return (\r\n            <div className=\"team-viz\">\r\n                {iconList}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    //Return one memeber icon, depending on the indicator, it can either be full or empty;\r\n    getMemberIcon(indicator, index) {\r\n        if (indicator) {\r\n            return (\r\n                <img src=\"img/mF.png\" alt=\"member icon, occupied\" aria-hidden=\"true\" key={index}></img>\r\n            )\r\n        } else {\r\n            return (\r\n                <img src=\"img/mE.png\" alt=\"member icon, occupied\" aria-hidden=\"true\" key={index}></img>\r\n            )\r\n        }\r\n    }\r\n\r\n    //return the correct status string in the card interaction button according to the status in the card's state.\r\n    returnStatusString() {\r\n        if (this.reportGroupStatus() === NOT_JOINED) {\r\n            return \"Join\";\r\n        } else if (this.reportGroupStatus() === MEMBER) {\r\n            return \"Leave\";\r\n        }\r\n        return \"Edit\";\r\n    }\r\n\r\n    // If the user is the group founder, adds a crown icon next to the group name\r\n    groupLeaderCrown() {\r\n        if (this.reportGroupStatus() === LEADER) {\r\n            return (<img className=\"leader\" src=\"img/crown.svg\" alt=\"You are leader\"></img>);\r\n        }\r\n        return \"\";\r\n    }\r\n\r\n    // not display the group when the group is full\r\n    displayStyleCheck() {\r\n        if (this.props.cardData.members.length === this.props.cardData.maxSize && this.reportGroupStatus() === NOT_JOINED) {\r\n            return { display: 'none' }\r\n        } else {\r\n            return { display: 'inline-block' }\r\n        }\r\n    }\r\n\r\n    // Renders a single card (group) object.\r\n    render() {\r\n        if (this.state.shouldRedirect) {\r\n            return <Redirect to={'/group/' + this.props.cardData._id} />\r\n        }\r\n        return (\r\n            <div>\r\n                <div className=\"flex-card\">\r\n                    <img id=\"g-img\" src={this.props.cardData.imgURL} alt={\"Group \" + this.props.cardData.teamName} onClick={this.handleDetailClick} aria-haspopup=\"true\"/>\r\n                    <div className=\"card-content\">\r\n                        <div className=\"card-text\">\r\n                            <div className=\"group-name\"> {this.props.cardData.teamName} </div>\r\n                            {this.groupLeaderCrown()}\r\n                            <div id=\"class-name\" className={`class-name`}> {this.props.cardData.className} </div>\r\n                        </div>\r\n\r\n                        {this.getMemberIcons()}\r\n\r\n                        <div className=\"group-info\">\r\n                            <div className=\"group-size\">\r\n                                Group of {this.props.cardData.maxSize}\r\n                                <button className={this.returnStatusString().toLowerCase()} style={this.displayStyleCheck()} onClick={this.handleManageGroup}> {this.returnStatusString()} </button>\r\n                            </div>\r\n                            <div className=\"looking-for\"> Looking for {this.props.cardData.maxSize - this.props.cardData.members.length} more</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <Confirm confirmDisplay={this.state.confirmPopUp} confirmFunction={this.props.confirmFunction} cardData={this.props.cardData}\r\n                    toggleConfirm={this.toggleConfirm}></Confirm>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card.js';\r\n\r\nexport default class FilteredCardList extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            group: '',\r\n            course: '',\r\n            homeworkHelp: false,\r\n            examSquad: false,\r\n            noteExchange: false,\r\n            labMates: false,\r\n            projectPartners: false,\r\n            cardList: this.props.renderedCards,\r\n            fullGroup: false,\r\n            fetched: false,\r\n            applied: false,\r\n            authToken: localStorage.getItem(\"Authorization\") || null\r\n        }\r\n    }\r\n\r\n    // updates card list prop when database fetches\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.renderedCards !== prevProps.renderedCards) {\r\n            this.setState(() => {\r\n                return ({ cardList: this.props.renderedCards });\r\n            })\r\n        }\r\n    }\r\n\r\n    // handles the appearance of course name field when user types in that field\r\n    handleGroupChange = (event) => {\r\n        let newValue = event.target.value\r\n        this.setState({ group: newValue });\r\n    }\r\n\r\n    // handles the appearance of course name field when user types in that field\r\n    handleCourseChange = (event) => {\r\n        let newValue = event.target.value\r\n        this.setState({ course: newValue });\r\n    }\r\n\r\n    // Handles the interaction when user selects the Homeeork Help option.\r\n    handleHomeworkHelpChange = () => {\r\n        this.setState((prevState) => {\r\n            return { homeworkHelp: !prevState.homeworkHelp }\r\n        })\r\n    }\r\n\r\n    // Handles the interaction when user selects Exam Squad option.\r\n    handleExamSquadChange = () => {\r\n        this.setState((prevState) => {\r\n            return { examSquad: !prevState.examSquad }\r\n        })\r\n    }\r\n\r\n    // Handles the interaction when user selects Note Exchange option.\r\n    handleNoteExchangeChange = () => {\r\n        this.setState((prevState) => {\r\n            return { noteExchange: !prevState.noteExchange }\r\n        })\r\n\r\n    }\r\n\r\n    // Handles the interaction when user selects Lab Mates option.\r\n    handleLabMatesChange = () => {\r\n        this.setState((prevState) => {\r\n            return { labMates: !prevState.labMates }\r\n        })\r\n    }\r\n\r\n    // Handles the interaction when user selects Project Partners option.\r\n    handleProjectPartnersChange = () => {\r\n        this.setState((prevState) => {\r\n            return { projectPartners: !prevState.projectPartners }\r\n        })\r\n    }\r\n\r\n    // handles the interaction when user selects \"don't display full group\" option.\r\n    handleFullGroupChange = () => {\r\n        this.setState((prevState) => {\r\n            return { fullGroup: !prevState.fullGroup }\r\n        })\r\n    }\r\n\r\n    // Signifies what value the group size slider current is.\r\n    handleGroupSizeOutput = (event) => {\r\n        event.target.value = this.state.groupSize;\r\n    }\r\n\r\n    // handles the refine request and puts the filtered card list into state.\r\n    handleSubmitRefine = () => {\r\n        this.setState({\r\n            fetched: true,\r\n            cardList: this.handleFilteringHelper()\r\n        })\r\n    }\r\n\r\n    // handles the reset filter status and puts all groups back to the page.\r\n    handleReset = () => {\r\n        this.setState(() => {\r\n            return ({\r\n                group: '',\r\n                course: '',\r\n                homeworkHelp: false,\r\n                examSquad: false,\r\n                noteExchange: false,\r\n                labMates: false,\r\n                projectPartners: false,\r\n                cardList: this.props.renderedCards,\r\n                fullGroup: false,\r\n                currentCard: null,\r\n                applied: false\r\n            })\r\n        })\r\n    }\r\n\r\n    // returns the filtered group list according to user's input.\r\n    handleFilteringHelper = () => {\r\n        let renderCards = this.props.renderedCards;\r\n        if (this.state.group !== '') {\r\n            renderCards = renderCards.filter((card) => {\r\n                return (card.teamName.toLowerCase().includes(this.state.group.toLowerCase()))\r\n            })\r\n        }\r\n        if (this.state.course !== '') {\r\n            renderCards = renderCards.filter((card) => {\r\n                return (card.className.toLowerCase().includes(this.state.course.toLowerCase()));\r\n            })\r\n        }\r\n        if (this.state.homeworkHelp) {\r\n            renderCards = renderCards.filter((card) => {\r\n                return (card.tags.homeworkHelp);\r\n            })\r\n        }\r\n        if (this.state.examSquad) {\r\n            renderCards = renderCards.filter((card) => {\r\n                return (card.tags.examSquad);\r\n            })\r\n        }\r\n        if (this.state.noteExchange) {\r\n            renderCards = renderCards.filter((card) => {\r\n                return (card.tags.noteExchange);\r\n            })\r\n        }\r\n        if (this.state.labMates) {\r\n            renderCards = renderCards.filter((card) => {\r\n                return (card.tags.labMates);\r\n            })\r\n        }\r\n        if (this.state.projectPartners) {\r\n            renderCards = renderCards.filter((card) => {\r\n                return (card.tags.projectPartners);\r\n            })\r\n        }\r\n        if (this.state.fullGroup) {\r\n            renderCards = renderCards.filter((card) => {\r\n                return (card.members.length !== card.totalNumber);\r\n            })\r\n        }\r\n        if (renderCards === this.props.renderedCards) {\r\n            this.setState(() => {\r\n                return ({ applied: false })\r\n            })\r\n        } else {\r\n            this.setState(() => {\r\n                return ({ applied: true })\r\n            })\r\n        }\r\n        return renderCards;\r\n    }\r\n\r\n    // confirm user's decision on leaving the passed in study group.\r\n    confirmLeave = async (card) => {\r\n        if (!this.state.authToken) {\r\n            this.props.errorCallback(\"You are not authenticated.\")\r\n            return;\r\n        }\r\n        const response = await fetch(\"https://api.roundtablefinder.com/v1/groups/\" + card._id + '/members', {\r\n            method: 'DELETE',\r\n            headers: new Headers({\r\n                \"Authorization\": this.state.authToken\r\n            })\r\n        })\r\n\r\n        if (response.status >= 300) {\r\n            this.props.errorCallback(\"leaving group failed. Please retry.\");\r\n            return;\r\n        } else {\r\n            this.props.wsUpdate()\r\n        }\r\n    }\r\n\r\n    // Add the user to the group when they join the group\r\n    joinGroup = async (card) => {\r\n        if (!this.state.authToken) {\r\n            this.props.errorCallback(\"You are not authenticated.\")\r\n            return;\r\n        }\r\n        const response = await fetch(\"https://api.roundtablefinder.com/v1/groups/\" + card._id + '/members', {\r\n            method: 'POST',\r\n            headers: new Headers({\r\n                \"Authorization\": this.state.authToken,\r\n                \"Content-Type\": \"application/json\"\r\n            }),\r\n            body: JSON.stringify({id: this.props.user.id})\r\n        })\r\n\r\n        if (response.status >= 300) {\r\n            this.props.errorCallback(\"Joining group failed. Please retry.\");\r\n            return;\r\n        } else {\r\n            this.props.wsUpdate()\r\n        }\r\n    }\r\n\r\n    // Pops up an edit form when the user clicks \"edit\" button\r\n    editGroup = (cardData) => {\r\n        this.props.passEditCallback(cardData);\r\n    }\r\n\r\n    // change the currently displaying title, especially when there's no suitable match for filtering.\r\n    toggleTitle() {\r\n        return (<p>test</p>)\r\n    }\r\n\r\n    // renders the filter form\r\n    render() {\r\n        let listOfCards = [];\r\n        let content = null;\r\n        if (this.state.cardList) {\r\n            listOfCards = this.state.cardList.map((eachCard) => {\r\n                let singleCard = (\r\n                    <Card cardData={eachCard} switchFunction={this.joinGroup} editFunction={this.editGroup} fetch={this.props.fetch}\r\n                        toggleFeedback={this.props.toggleFeedback} feedbackInfo={this.props.feedbackInfo} feedbackDisplay={this.props.feedbackDisplay}\r\n                        key={eachCard._id} confirmFunction={this.confirmLeave} user={this.props.user}\r\n                        toggleEditForm={this.props.toggleEditForm} />\r\n                )\r\n                return singleCard;\r\n            })\r\n        }\r\n\r\n        if (this.state.cardList.length === 0) {\r\n            content = (\r\n                <div>\r\n                    <h4 className='text-center'>So Empty...</h4>\r\n\r\n                </div>\r\n            )\r\n\r\n\r\n        } else {\r\n            content = (\r\n                <div className='flex-cards-container'>\r\n                    {listOfCards}\r\n                </div>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <div className=\"more-options row\">\r\n                {this.props.filterDisplay &&\r\n                    <div className=\"col-md-6 col-xl-3 filter-form\">\r\n                        <div className=\"side-bar\">\r\n                            <form className=\"px-3\">\r\n                                <div className=\"form-group\">\r\n                                    <label className=\"form-check-label\" htmlFor=\"form-check-input-group\">Group Name</label>\r\n                                    <div>\r\n                                        <input className=\"form-control\" type=\"text\" placeholder=\"Example: Geek\"\r\n                                            id=\"form-check-input-group\" onChange={this.handleGroupChange} value={this.state.group} />\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"dropdown-divider\"></div>\r\n                                <div className=\"form-group\">\r\n                                    <label className=\"form-check-label\" htmlFor=\"form-check-input-course\">Course</label>\r\n                                    <div>\r\n                                        <input className=\"form-control\" type=\"text\" placeholder=\"Example: Info 340\"\r\n                                            id=\"form-check-input-course\" onChange={this.handleCourseChange} value={this.state.course} />\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"dropdown-divider\"></div>\r\n                                <div className=\"form-group\" aria-labelledby=\"goal-text\">\r\n                                    <p className=\"form-check-label\" id=\"goal-text\">Group Goal</p>\r\n                                    <div className=\"form-check\">\r\n                                        <div className=\"row\">\r\n                                            <div className=\"col-6\">\r\n                                                <input className=\"form-check-input\" type=\"checkbox\" value=\"option1\"\r\n                                                    id=\"form-check-input-goal-1\" onClick={this.handleHomeworkHelpChange} checked={this.state.homeworkHelp} readOnly />\r\n                                                <label className=\"form-check-label\" htmlFor=\"form-check-input-goal-1\">Homework\r\n                                                    Help</label>\r\n                                            </div>\r\n                                            <div className=\"col-6\">\r\n                                                <input className=\"form-check-input\" type=\"checkbox\" value=\"option2\"\r\n                                                    id=\"form-check-input-goal-2\" onClick={this.handleExamSquadChange} checked={this.state.examSquad} readOnly />\r\n                                                <label className=\"form-check-label\" htmlFor=\"form-check-input-goal-2\">Exam Squad</label>\r\n                                            </div>\r\n                                            <div className=\"col-6\">\r\n                                                <input className=\"form-check-input\" type=\"checkbox\" value=\"option3\"\r\n                                                    id=\"form-check-input-goal-3\" onClick={this.handleNoteExchangeChange} checked={this.state.noteExchange} readOnly />\r\n                                                <label className=\"form-check-label\" htmlFor=\"form-check-input-goal-3\">Note\r\n                                                    Exchange</label>\r\n                                            </div>\r\n                                            <div className=\"col-6\">\r\n                                                <input className=\"form-check-input\" type=\"checkbox\" value=\"option4\"\r\n                                                    id=\"form-check-input-goal-4\" onClick={this.handleLabMatesChange} checked={this.state.labMates} readOnly />\r\n                                                <label className=\"form-check-label\" htmlFor=\"form-check-input-goal-4\">Lab Mates</label>\r\n                                            </div>\r\n                                            <div className=\"col-6\">\r\n                                                <input className=\"form-check-input\" type=\"checkbox\" value=\"option5\"\r\n                                                    id=\"form-check-input-goal-5\" onClick={this.handleProjectPartnersChange} checked={this.state.projectPartners} readOnly />\r\n                                                <label className=\"form-check-label\" htmlFor=\"form-check-input-goal-5\">Project\r\n                                                    Partners</label>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                {this.props.h1Title === \"Check Out These Amazing Groups!\" &&\r\n                                    <div>\r\n                                        <div className=\"dropdown-divider\"></div>\r\n                                        <div className=\"form-group\" aria-labelledby=\"dont-display-full-text\">\r\n                                            <div className=\"form-check\">\r\n                                                <input className=\"form-check-input\" type=\"checkbox\"\r\n                                                    id=\"form-check-input-full\" onClick={this.handleFullGroupChange} checked={this.state.fullGroup} readOnly />\r\n                                                <label className=\"form-check-label\" htmlFor=\"form-check-input-full\">Don't display full group</label>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                }\r\n                                <button className=\"btn btn-primary search-button mr-3\" type=\"button\" onClick={this.handleSubmitRefine}>Refine Result</button>\r\n                                <button className=\"btn btn-secondary search-button\" type=\"button\" onClick={this.handleReset}>Reset</button>\r\n                                {this.state.applied &&\r\n                                    <p className=\"applied-filter ml-2\">Applied</p>\r\n                                }\r\n                            </form>\r\n                        </div>\r\n                    </div>}\r\n                <section className=\"course-cards\">\r\n                    <h1 className=\"text-center title\">{this.props.h1Title}</h1>\r\n                    <p className=\"text-center\">Click on group images to check details.</p>\r\n                    {content}\r\n                </section>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n\r\n}","import React from 'react';\r\nimport FilteredCardList from './FilteredCardList.js';\r\n\r\nexport default class RenderMyGroups extends React.Component {\r\n    // make filter and create group appear\r\n    componentDidMount() {\r\n        this.props.toggleTwoButtons(true);\r\n    }\r\n\r\n    render() {\r\n        let groups = [];\r\n        if (this.props.cards && this.props.user) {\r\n            this.props.cards.forEach((group) => {\r\n                for (let member of group.members) {\r\n                    if (member === this.props.user.id) {\r\n                        groups.push(group)\r\n                        break;\r\n                    }\r\n                }\r\n            })\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <FilteredCardList wsUpdate={this.props.wsUpdate} filterDisplay={this.props.filterDisplay} toggleFilter={this.props.toggleFilter} cards={this.props.cards} renderedCards={groups} fetch={this.props.fetch} updateCallback={this.props.updateCallback} toggleFeedback={this.props.toggleFeedback}feedbackInfo={this.props.feedbackInfo} passEditCallback={this.props.passEditCallback}feedbackDisplay={this.props.feedbackDisplay} user={this.props.user} h1Title={\"My Current Groups\"} errorCallback={this.props.errorCallback} loading={this.props.loading}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport FilteredCardList from './FilteredCardList.js';\r\n\r\nexport default class Homepage extends React.Component {\r\n    componentDidMount() {\r\n        this.props.toggleTwoButtons(true);\r\n    }\r\n\r\n    render() {\r\n        let groups = [];\r\n        if (this.props.cards && this.props.user) {\r\n            this.props.cards.forEach((group) => {\r\n                let userIsMember = false;\r\n                for (let member of group.members) {\r\n                    if (member === this.props.user.id) {\r\n                        userIsMember = true;\r\n                    }\r\n                }\r\n                if (!userIsMember) {\r\n                    groups.push(group);\r\n                }\r\n            })    \r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <FilteredCardList wsUpdate={this.props.wsUpdate} filterDisplay={this.props.filterDisplay} \r\n                    toggleFilter={this.props.toggleFilter} cards={this.props.cards} renderedCards={groups} \r\n                    fetch={this.props.fetch} updateCallback={this.props.updateCallback} \r\n                    toggleFeedback={this.props.toggleFeedback} feedbackInfo={this.props.feedbackInfo} \r\n                    passEditCallback={this.props.passEditCallback} feedbackDisplay={this.props.feedbackDisplay} \r\n                    user={this.props.user} h1Title={\"Check Out These Amazing Groups!\"} \r\n                    errorCallback={this.props.errorCallback} />\r\n            </div>\r\n        )\r\n    }\r\n}","export default {\r\n    base: \"https://api.roundtablefinder.com\",\r\n    testbase: \"https://localhost:4000\",\r\n    handlers: {\r\n        users: \"/v1/users\",\r\n        myuser: \"/v1/users/\",\r\n        sessions: \"/v1/sessions\",\r\n        sessionsMine: \"/v1/sessions/mine\",\r\n        courses: \"/v1/courses/users\",\r\n        groups: \"/v1/groups\",\r\n        thisgroup: \"/v1/groups/\"\r\n    }\r\n}","import React from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport api from './APIEndpoints.js'\r\n\r\nconst HOMEWORK_HELP = \"homeworkHelp\";\r\nconst EXAM_SQUAD = \"examSquad\";\r\nconst NOTE_EXCHANGE = \"noteExchange\";\r\nconst LAB_MATES = \"labMates\";\r\nconst PROJECT_PARTNERS = \"projectPartners\"\r\n\r\nexport default class GroupDetailsPage extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            user:null,\r\n            userDataArray: [],\r\n            leader: {},\r\n            card: {},\r\n            teamName: '',\r\n            shouldRedirect: false,\r\n            authToken: localStorage.getItem(\"Authorization\") || null\r\n        }\r\n    }\r\n\r\n    // handles the interaction when user wants to leave details page.\r\n    handleDetailClick = () => {\r\n        this.setState({ shouldRedirect: true });\r\n    }\r\n\r\n    // get members info when component is created\r\n    componentDidMount() {\r\n        this.props.toggleTwoButtons(false);\r\n        let groupID = this.props.match.params.groupID;\r\n\r\n        this.getCurrentUser()\r\n\r\n        fetch(api.base + api.handlers.thisgroup + groupID)\r\n        .then(res => res.json())\r\n        .then(\r\n            (result) => {\r\n                if (result) {\r\n                    let members = result.members\r\n                    let leader = result.creator.userID\r\n                    let teamName = result.teamName\r\n\r\n                    if (members) {\r\n                        this.getMembersInfo(members, leader)\r\n                    }\r\n                    \r\n                    if (teamName) {\r\n                        this.setState(() => {\r\n                            return ({\r\n                                card: result,\r\n                                teamName: result.teamName\r\n                            })\r\n                        })\r\n                    } \r\n                }\r\n            }, (errorObj) => {\r\n                if (errorObj) {\r\n                    this.props.errorCallback(errorObj);\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    // build the data arrays for group leader and memebers\r\n    getMembersInfo = async (members, leader) => {\r\n        if (!this.state.authToken) {\r\n            console.log(\"no auth\")\r\n            return;\r\n        }\r\n\r\n        members.forEach(async (memberID) => {\r\n            const response = await fetch(api.base + api.handlers.myuser + memberID, {\r\n                method: 'GET',\r\n                headers: new Headers({\r\n                    \"Authorization\": this.state.authToken\r\n                })\r\n            });\r\n            if (response.status >= 300) {\r\n                this.toggleOnError(\"Authentication failed. Please relog.\");\r\n                this.setAuthToken(\"\");\r\n                this.setUser(null)\r\n                return;\r\n            }\r\n            const user = await response.json()\r\n            if (memberID !== leader) {\r\n                this.setState((prevState) => {\r\n                    let memberArray = prevState.userDataArray\r\n                    memberArray.push(user)\r\n                    return {userDataArray: memberArray}\r\n                })\r\n            } else {\r\n                this.setState({leader: user});\r\n            }\r\n            console.log(this.state.card)\r\n        })\r\n    }\r\n\r\n    // pre-prosess member data\r\n    buildUserDataArray = (userData) => {\r\n        let dataArray = this.state.userDataArray\r\n        dataArray.push(userData);\r\n        this.setState({\r\n            userDataArray: dataArray\r\n        })\r\n    }\r\n\r\n    // fetches the current user info\r\n    getCurrentUser = async () => {\r\n        if (!this.state.authToken) {\r\n            console.error(\"no auth token found, aborting\")\r\n            return;\r\n        }\r\n        const response = await fetch(api.base + api.handlers.myuser + \"me\", {\r\n            method: 'GET',\r\n            headers: new Headers({\r\n                \"Authorization\": this.state.authToken\r\n            })\r\n        });\r\n        if (response.status >= 300) {\r\n            this.toggleOnError(\"Authentication failed. Please relog.\");\r\n            this.setAuthToken(\"\");\r\n            this.setUser(null)\r\n            return;\r\n        }\r\n        const user = await response.json()\r\n        this.setState({user: user});\r\n    }\r\n\r\n    //renders the Group Detail Pop Up form\r\n    render() {\r\n        if (this.state.shouldRedirect && this.props.user) {\r\n            if (this.state.card.members.includes(this.props.user.id)) {\r\n                return <Redirect to='/mygroup' />\r\n            } else {\r\n                return <Redirect to='/home' />\r\n            }\r\n        }\r\n        let card = this.state.card;\r\n        let users = this.state.userDataArray\r\n        let members = null;\r\n        let content = null;\r\n        let goals = null;\r\n\r\n        //render the list of Members of the group\r\n        members = (\r\n            users.map((user) => {\r\n                let userEmailString = ''\r\n                if (!this.state.card.members.includes(this.state.user.id)) {\r\n                    return (\r\n                        <div key={user.id}>\r\n                            <div className='memberRow'>\r\n                                <img className=\"avatar\" src={user.photoURL} alt=\"User Profile\"></img>\r\n                                <p className='memberInfos'>\r\n                                    {user.firstName + '\\t' + user.lastName}\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                }\r\n                return (\r\n                    <div key={user.id}>\r\n                        <div className='memberRow'>\r\n                            <img className=\"avatar\" src={user.photoURL} alt=\"User Profile\"></img>\r\n                            <p className='memberInfos'>\r\n                                {user.firstName + '\\t' + user.lastName}\r\n                            </p>\r\n                            <a className='sendEmailButton' href={userEmailString}>Email</a>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            })\r\n        )\r\n        \r\n        if (card) {\r\n        //render the Goal Tags of the displayed group\r\n        let tags = card.tags;\r\n        if (tags) {\r\n            goals = (\r\n                Object.keys(tags).map((cardKey) => {\r\n                    if (tags[cardKey] === true) {\r\n                        if (cardKey === HOMEWORK_HELP) {\r\n                            cardKey = \"Homework Help\";\r\n                        } else if (cardKey === EXAM_SQUAD) {\r\n                            cardKey = \"Exam Squad\";\r\n                        } else if (cardKey === NOTE_EXCHANGE) {\r\n                            cardKey = \"Note Exchange\";\r\n                        } else if (cardKey === LAB_MATES) {\r\n                            cardKey = \"Lab Mates\";\r\n                        } else if (cardKey === PROJECT_PARTNERS) {\r\n                            cardKey = \"Project Partners\";\r\n                        }\r\n                        return (\r\n                            <div key={cardKey}>\r\n                                <div className='goalTag'>\r\n                                    {cardKey}\r\n                                </div>\r\n                            </div>\r\n                        )\r\n                    }\r\n                    return content;\r\n                })\r\n            )\r\n        }\r\n\r\n        return (\r\n            <section>\r\n                <div className='detailsContainer'>\r\n                    <h1 className='detailsTitle'>{card.teamName}</h1>\r\n                    <button className='detailsCloseButton' onClick={this.handleDetailClick}>Close</button>\r\n                    <div className=\"class-name-details\" > {card.className} </div>\r\n                    <div className=\"lookingFor\"> Looking for {card.members ? card.maxSize - card.members.length : \"fetching\"} more</div><br/>\r\n                    <div>\r\n                        <p className='membersTitle'>\r\n                            Members:\r\n                        </p>\r\n                    </div>\r\n                    <div className='memberList'>\r\n                        {(typeof (this.state.leader) !== 'undefined') &&\r\n                            <div>\r\n                                <div key={this.state.leader.id}>\r\n                                    <div className='memberRow'>\r\n                                        <img className=\"avatar\" src={this.state.leader.photoURL} alt=\"User Profile\"></img>\r\n                                        <img className=\"detailsLeader\" src=\"/img/crown.svg\" alt=\"You are leader\"></img>\r\n                                        <p className='leaderInfos'>\r\n                                            {this.state.leader.firstName + '\\t' + this.state.leader.lastName}\r\n                                        </p>\r\n                                        <a className='sendEmailButton' href={'mailto: ' + this.state.leader.email}> Email</a>\r\n                                    </div>\r\n                                </div>\r\n                                {members}\r\n                            </div>}\r\n                    </div>\r\n\r\n                    <div>\r\n                        <p className='membersTitle'>\r\n                            Group Goal:\r\n                        </p>\r\n                        <div className='goalTagsContainer'>\r\n                            {goals ? goals : <p>None</p>}\r\n                        </div>\r\n                    </div>\r\n                    <div>\r\n                        <p className='membersTitle'>\r\n                            When2Meet URL: \r\n                        </p>\r\n                        <p>{this.state.card.when2meetURL ? this.state.card.when2meetURL : <p>None</p>}</p>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n}","import React from 'react';\r\nimport Form from \"@rjsf/core\";\r\nimport api from './APIEndpoints.js';\r\nimport { AddPhoto } from './S3.js';\r\n\r\nexport default class SignUp extends React.Component {\r\n\r\n  formSchema = {\r\n    \"title\": \"SIGN UP\",\r\n    \"description\": \"Enter basic information to create an account\",\r\n    \"type\": \"object\",\r\n    \"required\": [\r\n      \"email\",\r\n      \"password\",\r\n      \"passwordConf\",\r\n      \"userName\",\r\n      \"firstName\",\r\n      \"lastName\"\r\n    ],\r\n    \"properties\": {\r\n      \"email\": {\r\n        \"type\": \"string\",\r\n        \"title\": \"Email\",\r\n      },\r\n      \"password\": {\r\n        \"type\": \"string\",\r\n        \"title\": \"Password\",\r\n      },\r\n      \"passwordConf\": {\r\n        \"type\": \"string\",\r\n        \"title\": \"Confirm Password\",\r\n      },\r\n      \"userName\": {\r\n        \"type\": \"string\",\r\n        \"title\": \"Username\",\r\n      },\r\n      \"firstName\": {\r\n        \"type\": \"string\",\r\n        \"title\": \"First name\",\r\n      },\r\n      \"lastName\": {\r\n        \"type\": \"string\",\r\n        \"title\": \"Last name\"\r\n      },\r\n    }\r\n  }\r\n\r\n  UIschema = {\r\n    \"email\": {\r\n      \"ui:format\": \"email\"\r\n    },\r\n    \"firstName\": {\r\n      \"ui:autofocus\": true,\r\n      \"ui:emptyValue\": \"\",\r\n      \"ui:autocomplete\": \"family-name\"\r\n    },\r\n    \"lastName\": {\r\n      \"ui:emptyValue\": \"\",\r\n      \"ui:autocomplete\": \"given-name\"\r\n    },\r\n    \"password\": {\r\n      \"ui:widget\": \"password\",\r\n      \"ui:help\": \"Hint: Make it strong!\"\r\n    },\r\n    \"passwordConf\": {\r\n      \"ui:widget\": \"password\",\r\n      \"ui:help\": \"Make sure the passwords match... \"\r\n    }\r\n  }\r\n\r\n  // sends the needed sign up data to api server\r\n  onSubmit = async ({formData}) => {\r\n    const response = await fetch(api.base + api.handlers.users, {\r\n      method: 'POST',\r\n      headers: new Headers({\r\n        \"Content-Type\": \"application/json\"\r\n      }),\r\n      body: JSON.stringify(formData)\r\n    });\r\n    if (response.status >= 300) {\r\n        this.props.errorCallback(\"Sign up unsuccessful. Please retry.\");\r\n        return;\r\n    }\r\n    const user = await response.json()\r\n    this.props.setUser(user);\r\n    const img_response = await fetch(\"https://roundtablefinder.s3-us-west-1.amazonaws.com/UserFolder/husky.png\")\r\n    const default_image = await img_response.blob()\r\n    AddPhoto(\"UserFolder\", default_image, user.userName, () => {\r\n      this.props.fetch()\r\n      this.props.setAuthToken(response.headers.get(\"Authorization\"));\r\n    })\r\n\r\n  }\r\n\r\n  render() {\r\n    return <Form schema={this.formSchema} UIschema={this.UIschema} onSubmit={this.onSubmit}/>\r\n  }\r\n}","import React from 'react';\r\nimport Form from \"@rjsf/core\";\r\nimport api from './APIEndpoints.js'\r\n\r\nexport default class SignUp extends React.Component {\r\n\r\n  formSchema = {\r\n    \"title\": \"LOG IN\",\r\n    \"description\": \"Log in to your exisitng account\",\r\n    \"type\": \"object\",\r\n    \"required\": [\r\n      \"email\",\r\n      \"password\"\r\n    ],\r\n    \"properties\": {\r\n      \"email\": {\r\n        \"type\": \"string\",\r\n        \"title\": \"Email\",\r\n      },\r\n      \"password\": {\r\n        \"type\": \"string\",\r\n        \"title\": \"Password\",\r\n      }\r\n    }\r\n  }\r\n\r\n  UIschema = {\r\n    \"email\": {\r\n      \"ui:format\": \"email\"\r\n    },\r\n    \"password\": {\r\n      \"ui:widget\": \"password\"\r\n    }\r\n  }\r\n\r\n  // sends the log in data to api server\r\n  onSubmit = async ({formData}) => {\r\n    const response = await fetch(api.base + api.handlers.sessions, {\r\n      method: 'POST',\r\n      headers: new Headers({\r\n        \"Content-Type\": \"application/json\"\r\n      }),\r\n      body: JSON.stringify(formData)\r\n    });\r\n    if (response.status >= 300) {\r\n        this.props.errorCallback(\"Log in unsuccessful. Please retry.\");\r\n        return;\r\n    }\r\n    const user = await response.json()\r\n    this.props.setUser(user);\r\n    this.props.setAuthToken(response.headers.get(\"Authorization\"));\r\n    this.props.fetch()\r\n  }\r\n\r\n  render() {\r\n    return <Form schema={this.formSchema} UIschema={this.UIschema} onSubmit={this.onSubmit}/>\r\n  }\r\n}","import React from 'react';\r\nimport Header from './Header.js';\r\nimport Footer from './Footer.js';\r\nimport Create from './Create.js';\r\nimport Edit from './Edit.js'\r\nimport Confirm from './Confirm.js';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSpinner } from '@fortawesome/free-solid-svg-icons'\r\nimport JoinCreateFeedback from './JoinCreateFeedback.js';\r\nimport AddCourses from './AddCourses.js'\r\nimport ProfilePage from './ProfilePage.js';\r\nimport MyGroupPage from './MyGroupPage.js';\r\nimport Homepage from './Homepage.js';\r\nimport { Route, Switch, Redirect } from 'react-router-dom';\r\nimport GroupDetailsPage from './GroupDetailsPage.js';\r\nimport SignUp from './SignUp.js'\r\nimport Login from './Login.js'\r\nimport api from './APIEndpoints.js'\r\nimport { albumBucketName, bucketRegion } from './S3.js';\r\n\r\n\r\n// WEBSOCKET\r\nconst client = new WebSocket('wss://api.roundtablefinder.com/websocket');\r\n\r\nexport default class App extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            user: null,\r\n            spinnerDisplay: false,\r\n            myGroups: [],\r\n            myCourses: [],\r\n            currentCourses: '',\r\n            currentPage: '',\r\n            filterDisplay: false,\r\n            createDisplay: false,\r\n            editDisplay: false,\r\n            errorDisplay: false,\r\n            tempEditData: {},\r\n            feedbackDisplay: false,\r\n            feedbackInfo: [],\r\n            popUpDisplay: false,\r\n            addCourseDisplay: false,\r\n            twoButtonDisplay: true,\r\n            coverDisplay: false,\r\n            groupCount: 0,\r\n            errorMessage: '',\r\n            userPhoto: '',\r\n            authToken: localStorage.getItem(\"Authorization\") || null\r\n        }\r\n    }\r\n\r\n    getCurrentUser = async () => {\r\n        if (!this.state.authToken) {\r\n            this.toggleOnError(\"You are not authenticated.\")\r\n            return;\r\n        }\r\n        const response = await fetch(api.base + api.handlers.myuser + \"me\", {\r\n            method: 'GET',\r\n            headers: new Headers({\r\n                \"Authorization\": this.state.authToken\r\n            })\r\n        });\r\n        if (response.status >= 300) {\r\n            this.toggleOnError(\"Authentication failed. Please relog.\");\r\n            this.setAuthToken(\"\");\r\n            this.setUser(null)\r\n            return;\r\n        }\r\n        const user = await response.json()\r\n        this.setState({\r\n            user: user,\r\n            userPhoto: `https://${albumBucketName}.s3.${bucketRegion}.amazonaws.com/UserFolder/${user.userName}`\r\n        });\r\n    }\r\n\r\n    getCurrentGroups = async () => {\r\n        if (!this.state.authToken) {\r\n            return;\r\n        }\r\n        const response = await fetch(api.base + api.handlers.groups, {\r\n            method: 'GET',\r\n            headers: new Headers({\r\n                \"Authorization\": this.state.authToken\r\n            })\r\n        });\r\n        if (response.status >= 300) {\r\n            this.toggleOnError(\"Retrieving group info failed. Please retry.\");\r\n            return;\r\n        }\r\n        const groups = await response.json()\r\n        this.setState({myGroups: groups});\r\n    }\r\n\r\n    //WEBSOCKET\r\n    valueChange = () => {\r\n        client.send(\"update happened\")\r\n    }\r\n\r\n    // fetch data from database and handles user sign in\r\n    componentDidMount() {\r\n        this.fetch();\r\n\r\n        client.onopen = () => {\r\n            console.log('Websocket Client Connected')\r\n        }\r\n\r\n        client.onmessage = (message) => {\r\n            this.fetch();\r\n        }\r\n    }\r\n\r\n    // Fetch the groups the user is currently enrolled and user's current attending courses in from json.\r\n    fetch = async () => {\r\n        this.setSpinnerOnDisplay();\r\n\r\n        this.getCurrentUser();\r\n        this.getCurrentGroups();\r\n        this.getCourse();\r\n\r\n        this.setSpinnerOffDisplay();\r\n    }\r\n\r\n    // This callback gets the current course enrollment of the user\r\n    getCourse = async () => {\r\n        if (!this.state.authToken) {\r\n            this.toggleOnError(\"You are not authenticated.\")\r\n            return;\r\n        }\r\n        const response = await fetch(\"https://api.roundtablefinder.com/v1/courses/users\", {\r\n            method: 'GET',\r\n            headers: new Headers({\r\n                \"Authorization\": this.state.authToken\r\n            })\r\n        });\r\n        if (response.status >= 300) {\r\n            this.toggleOnError(\"Get course failed. Please retry\");\r\n            return;\r\n        }\r\n        const courses = await response.json()\r\n        if (courses !== null) {\r\n            this.setState({ myCourses: courses.classList });\r\n        } else {\r\n            this.setState({ myCourses: [\"Please set up your current courses in profile page.\"] });\r\n        }\r\n    }\r\n\r\n    // The callback function that allows Create form to submit a new group to app.\r\n    submitCreateForm = async (newGroup) => {\r\n        if (!this.state.authToken) {\r\n            this.toggleOnError(\"You are not authenticated.\")\r\n            return;\r\n        }\r\n\r\n        const response = await fetch(api.base + api.handlers.groups, {\r\n            method: 'POST',\r\n            headers: new Headers({\r\n                \"Authorization\": this.state.authToken,\r\n                \"Content-Type\": \"application/json\"\r\n            }),\r\n            body: JSON.stringify(newGroup)\r\n        });\r\n        if (response.status >= 300) {\r\n            this.toggleOnError(response.body);\r\n            return;\r\n        } else {\r\n            this.valueChange()\r\n        }\r\n    }\r\n\r\n    // The callback function that allows Edit form to submit edited group info to app.\r\n    submitEditForm = async (card, _id) => {\r\n        const response = await fetch(api.base + api.handlers.groups + \"/\" + _id, {\r\n            method: 'PATCH',\r\n            headers: new Headers({\r\n                \"Authorization\": this.state.authToken,\r\n                \"Content-Type\": \"application/json\"\r\n            }),\r\n            body: JSON.stringify(card)\r\n        });\r\n        if (response.status >= 300) {\r\n            this.toggleOnError(response.body);\r\n            return;\r\n        } else {\r\n            this.valueChange()\r\n        }\r\n    }\r\n\r\n    // Sets React-FontAwesome spinner on.\r\n    setSpinnerOnDisplay = () => {\r\n        this.setState(() => {\r\n            return { spinnerDisplay: true }\r\n        })\r\n    }\r\n\r\n    // Sets React-FontAwesome spinner off.\r\n    setSpinnerOffDisplay = () => {\r\n        this.setState((prevState) => {\r\n            return { spinnerDisplay: false }\r\n        })\r\n    }\r\n\r\n    // Sets the Auth token for the current user\r\n    setAuthToken = (auth) => {\r\n        localStorage.setItem(\"Authorization\", auth)\r\n        this.setState(() => {\r\n            return { authToken: auth };\r\n        })\r\n    }\r\n\r\n    // Save user data to the state\r\n    setUser = (user) => {\r\n        this.setState(() => {\r\n            return { user: user };\r\n        })\r\n    }\r\n\r\n    // Toggle filter group form\r\n    toggleFilter = () => {\r\n        this.setState((prevState) => {\r\n            return { filterDisplay: !prevState.filterDisplay }\r\n        })\r\n    }\r\n\r\n    // Toggle create group form\r\n    toggleCreateForm = () => {\r\n        this.setState((prevState) => {\r\n            return {\r\n                createDisplay: !prevState.createDisplay,\r\n                coverDisplay: !prevState.coverDisplay\r\n            }\r\n        })\r\n    }\r\n\r\n    // Toggle edit group form\r\n    toggleEditForm = () => {\r\n        this.setState((prevState) => {\r\n            return {\r\n                editDisplay: !prevState.editDisplay,\r\n                coverDisplay: !prevState.coverDisplay\r\n            }\r\n        })\r\n    }\r\n\r\n    // Toggle the feedback popup window when \"leave\" button is clicked\r\n    toggleFeedback = () => {\r\n        this.setState((prevState) => {\r\n            return { feedbackDisplay: !prevState.feedbackDisplay }\r\n        })\r\n    }\r\n\r\n    // Change the state of current page\r\n    togglePageTitle = (page) => {\r\n        this.setState(() => {\r\n            return { currentPage: page };\r\n        })\r\n    }\r\n\r\n    // allows the card that needs to be update to communicate with Edit form.\r\n    passEdit = (cardData) => {\r\n        this.setState({\r\n            tempEditData: cardData,\r\n            editDisplay: true,\r\n            coverDisplay: true\r\n        })\r\n    }\r\n\r\n    // disbands the group\r\n    disbandGroup = async (card) => {\r\n        this.toggleEditForm();\r\n\r\n        const response = await fetch(api.base + api.handlers.groups + \"/\" + card._id, {\r\n            method: 'DELETE',\r\n            headers: new Headers({\r\n                \"Authorization\": this.state.authToken\r\n            }),\r\n        });\r\n        if (response.status >= 300) {\r\n            this.toggleOnError(response.body);\r\n            return;\r\n        } else {\r\n            this.valueChange()\r\n        }\r\n    }\r\n\r\n    // toggles the popup window when disbanding a group\r\n    togglePopUp = () => {\r\n        this.setState((prevState) => {\r\n            return { popUpDisplay: !prevState.popUpDisplay };\r\n        })\r\n    }\r\n\r\n    // toggles the add course menu\r\n    toggleAddCourse = () => {\r\n        this.setState((prevState) => {\r\n            return {\r\n                addCourseDisplay: !prevState.addCourseDisplay,\r\n                coverDisplay: !prevState.coverDisplay\r\n            }\r\n        })\r\n    }\r\n\r\n    // will not show filter and create group buttons when on the profile page\r\n    toggleTwoButtons = (state) => {\r\n        this.setState({ twoButtonDisplay: state })\r\n    }\r\n\r\n    // allows child components to toggle error message when their fetch goes wrong\r\n    toggleOnError = (errorObj) => {\r\n        if (errorObj) {\r\n            this.setState({\r\n                errorDisplay: true,\r\n                errorMessage: errorObj.message\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let content = null;\r\n        if (!this.state.authToken || this.state.authToken === \"null\") {\r\n            content = (\r\n                <div>\r\n                    <main>\r\n                        <img className='loginLogo' src='img/loginLogo.png' alt='Round Table Logo'></img>\r\n                        <div className='loginBG'>\r\n                            <div className='login'>\r\n                                <div className='login-form text-center container'>\r\n                                        <div className=\"row justify-content-center\">\r\n                                            <div className=\"col\">\r\n                                                <SignUp setAuthToken={this.setAuthToken} setUser={this.setUser} errorCallback={this.toggleOnError} fetch={this.fetch} />\r\n                                            </div>\r\n                                            <div className=\"col\">\r\n                                                <Login setAuthToken={this.setAuthToken} setUser={this.setUser} errorCallback={this.toggleOnError} fetch={this.fetch} />\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                    </main>\r\n                </div>\r\n            )\r\n        } else {\r\n            content = (\r\n                <div>\r\n                    <Header userPhoto={this.state.userPhoto} page={this.state.currentPage} togglePage={this.togglePageTitle} user={this.state.user} errorCallback={this.toggleOnError} setAuthToken={this.setAuthToken}/>\r\n                    {this.state.coverDisplay &&\r\n                        <div className=\"grey-cover\"></div>\r\n                    }\r\n                    <main>\r\n                        {this.state.twoButtonDisplay &&\r\n                            <div>\r\n                                <button id=\"options\" onClick={this.toggleFilter}>Show Filter</button>\r\n                                <button id=\"create\" onClick={this.toggleCreateForm}>Create A Group</button>\r\n                            </div>}\r\n                        <Create createDisplay={this.state.createDisplay} toggleForm={this.toggleCreateForm} courseList={this.state.myCourses}\r\n                            onSubmit={this.submitCreateForm} groupList={this.state.myGroups} toggleFeedback={this.toggleFeedback}\r\n                            feedbackInfo={this.state.feedbackInfo} feedbackDisplay={this.state.feedbackDisplay} user={this.state.user} errorCallback={this.toggleOnError} />\r\n                        {this.state.editDisplay &&\r\n                            <Edit editData={this.state.tempEditData} editDisplay={this.state.editDisplay} toggleForm={this.toggleEditForm} courseList={this.state.myCourses}\r\n                                onSubmit={this.submitEditForm} groupList={this.state.myGroups} onDisband={this.disbandGroup} togglePopUpForm={this.togglePopUp} user={this.state.user} errorCallback={this.toggleOnError} />\r\n                        }\r\n                        {this.state.popUpDisplay &&\r\n                            <Confirm toggleConfirm={this.togglePopUp} confirmFunction={this.disbandGroup} cardData={this.state.tempEditData} confirmDisplay={this.state.popUpDisplay} />\r\n                        }\r\n                        {this.state.addCourseDisplay &&\r\n                            <AddCourses toggleAddCourse={this.toggleAddCourse} courses={this.state.myCourses} user={this.state.user} getCourseCallback={this.getCourse} errorCallback={this.toggleOnError} wsUpdate={this.valueChange}/>\r\n                        }\r\n                        <JoinCreateFeedback feedbackDisplay={this.state.feedbackDisplay} toggleFeedback={this.toggleFeedback}\r\n                            feedbackInfo={this.state.feedbackInfo} />\r\n\r\n                        {this.state.errorDisplay &&\r\n                            <div className=\"popup\">\r\n                                <p>{this.state.errorMessage + \" Check your connection and refresh webpage.\"}</p>\r\n                            </div>\r\n                        }\r\n\r\n                        <Switch>\r\n                            <Route exact path='/myprofile' render={(props) => (<ProfilePage {...props} user={this.state.user} toggleAddCourse={this.toggleAddCourse} \r\n                            toggleTwoButtons={this.toggleTwoButtons} errorCallback={this.toggleOnError} authToken = {this.state.authToken} api = {api} getCurrentUser = {this.getCurrentUser}\r\n                            courses={this.state.myCourses} />)} />\r\n                            <Route exact path='/mygroup' render={(props) => (<MyGroupPage {...props} cards={this.state.myGroups} loading={this.state.spinnerDisplay}\r\n                                wsUpdate = {this.valueChange} updateCallback={this.updateAppState} toggleFeedback={this.toggleFeedback} user={this.state.user} toggleEditForm={this.toggleEditForm}\r\n                                feedbackInfo={this.state.feedbackInfo} passEditCallback={this.passEdit} toggleTwoButtons={this.toggleTwoButtons} fetch={this.fetch}\r\n                                feedbackDisplay={this.state.feedbackDisplay} filterDisplay={this.state.filterDisplay} toggleFilter={this.toggleFilter} errorCallback={this.toggleOnError} />)} />\r\n                            <Route exact path='/home' render={(props) => (<Homepage {...props} wsUpdate = {this.valueChange} cards={this.state.myGroups} loading={this.state.spinnerDisplay}\r\n                                updateCallback={this.updateAppState} toggleFeedback={this.toggleFeedback} user={this.state.user} fetch={this.fetch}\r\n                                feedbackInfo={this.state.feedbackInfo} passEditCallback={this.passEdit} toggleTwoButtons={this.toggleTwoButtons}\r\n                                feedbackDisplay={this.state.feedbackDisplay} filterDisplay={this.state.filterDisplay} toggleFilter={this.toggleFilter} errorCallback={this.toggleOnError} />)} />\r\n                            <Route path='/group/:groupID' render={(props) => (<GroupDetailsPage {...props} wsUpdate = {this.valueChange} errorCallback={this.toggleOnError} toggleTwoButtons={this.toggleTwoButtons} user={this.state.user} />)} />\r\n                            <Redirect to='/home' />\r\n                        </Switch>\r\n\r\n                        {this.state.spinnerDisplay &&\r\n                            <div className=\"text-center\">\r\n                                <FontAwesomeIcon icon={faSpinner} size=\"lg\" spin />\r\n                            </div>\r\n                        }\r\n                    </main>\r\n                    <Footer />\r\n                </div>\r\n            )\r\n        }\r\n        return content;\r\n    }\r\n}\r\n\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './index.css';\r\nimport {BrowserRouter} from 'react-router-dom';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n// Change all these to database initialization\r\n\r\n// import firebase from 'firebase/app';\r\n// import 'firebase/auth';\r\n// import 'firebase/database';\r\n// import 'firebase/storage';\r\n\r\n// const firebaseConfig = {\r\n//     apiKey: \"AIzaSyDT26tVl3IFCzI96rZTlP2_J40LkHRP3_o\",\r\n//     authDomain: \"round-table-a62ad.firebaseapp.com\",\r\n//     databaseURL: \"https://round-table-a62ad.firebaseio.com\",\r\n//     projectId: \"round-table-a62ad\",\r\n//     storageBucket: \"round-table-a62ad.appspot.com\",\r\n//     messagingSenderId: \"1037437885077\",\r\n//     appId: \"1:1037437885077:web:65af9b83c6f281deec999c\",\r\n//     measurementId: \"G-0EECVGEW4V\"\r\n// };\r\n\r\n// firebase.initializeApp(firebaseConfig);\r\n\r\nReactDOM.render(<BrowserRouter><App /></BrowserRouter>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}