{"version":3,"sources":["Header.js","Footer.js","S3.js","Create.js","Edit.js","Confirm.js","JoinCreateFeedback.js","AddCourses.js","ProfilePage.js","Card.js","FilteredCardList.js","MyGroupPage.js","Homepage.js","APIEndpoints.js","GroupDetailsPage.js","SignUp.js","Login.js","App.js","serviceWorker.js","index.js"],"names":["Header","React","Component","constructor","props","super","toggleMenu","this","setState","prevState","display","handleHomePageClick","shouldRedirect","handleMyGroupClick","state","profileChange","profileURL","page","componentDidUpdate","prevProps","user","checkStyle","render","togglePage","to","url","photoURL","id","className","onClick","src","alt","aria-label","setAuthToken","userPhoto","role","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","style","Footer","href","icon","faGithub","size","CognitoIdentityClient","require","fromCognitoIdentityPool","S3Client","PutObjectCommand","ListObjectsCommand","albumBucketName","bucketRegion","s3","region","credentials","client","identityPoolId","AddPhoto","async","albumName","imgFile","photoKeyName","callback","albumPhotosKey","encodeURIComponent","send","Prefix","Bucket","fileName","name","photoKey","uploadParams","Key","Body","console","log","err","error","message","Create","toggleEmpty","emptyAlertDisplay","toggleExceed","exceedCharDisplay","toggleEmptyCourse","emptyCourseDisplay","handleImgURLChange","event","newImg","target","files","img","handleGroupNameChange","newString","value","groupName","handleCourseNameChange","newValue","courseName","handleDescriptionChange","description","handleMeetChange","when2meetURL","handlePrivateChange","private","handleHomeworkHelpChange","homeworkHelp","handleExamSquadChange","examSquad","handleNoteExchangeChange","noteExchange","handleLabMatesChange","labMates","handleProjectPartnersChange","projectPartners","handleGroupSizeChange","newSize","groupSize","handleGroupSizeOutput","handleSubmit","newGroup","length","myCourses","handleSubmitHelper","toggleForm","courseList","teamName","totalNumber","parseInt","onSubmit","feedbackDisplay","toggleFeedback","feedbackInfo","pop","push","courseOptions","map","course","key","createDisplay","htmlFor","type","onChange","accept","max","min","toggleManyMember","manyMemberDisplay","editData","members","maxSize","_id","handleDisband","onDisband","imgURL","tags","authToken","localStorage","getItem","checked","readOnly","togglePopUpForm","Confirm","handleSumbitConfirm","confirmFunction","cardData","toggleConfirm","confirmDisplay","JoinCreateFeedback","toggleEmptyFeedback","AddCourses","showEmpty","hideEmpty","deleteCourse","a","fetch","method","headers","Headers","body","JSON","stringify","status","errorCallback","wsUpdate","addOneCourse","newCourseName","handleNameChange","newName","toggleAddCourse","courses","getCourseCallback","content","forEach","faTrashAlt","Profile","tab","cancelEdit","setUserProfile","submitEdit","profileChanged","firstName","LastName","nameErr","submitUpdate","update","FirstName","lastName","userPhotoFile","userName","setProfilePic","response","auth","setItem","setUser","api","base","handlers","myuser","json","email","getCourse","classList","handleFirstNameChange","handleLastNameChange","handlePhoto","URL","createObjectURL","componentDidMount","toggleTwoButtons","faPlusCircle","NOT_JOINED","MEMBER","LEADER","Card","handleDetailClick","confirmPopUp","handleManageGroup","reportGroupStatus","editFunction","switchFunction","creator","userID","includes","iconIndicators","i","iconList","indicator","index","singleIcon","getMemberIcon","aria-hidden","groupLeaderCrown","getMemberIcons","returnStatusString","toLowerCase","displayStyleCheck","FilteredCardList","handleGroupChange","group","handleCourseChange","handleFullGroupChange","fullGroup","handleSubmitRefine","fetched","cardList","handleFilteringHelper","handleReset","renderedCards","currentCard","applied","renderCards","filter","card","confirmLeave","joinGroup","editGroup","passEditCallback","listOfCards","eachCard","toggleEditForm","filterDisplay","placeholder","h1Title","RenderMyGroups","groups","cards","toggleFilter","updateCallback","loading","Homepage","userIsMember","testbase","users","sessions","sessionsMine","thisgroup","GroupDetailsPage","getMembersInfo","leader","memberID","toggleOnError","memberArray","userDataArray","buildUserDataArray","userData","dataArray","getCurrentUser","groupID","match","params","then","res","result","errorObj","goals","Object","keys","cardKey","SignUp","formSchema","UIschema","formData","img_response","default_image","blob","get","schema","WebSocket","App","getCurrentGroups","myGroups","valueChange","setSpinnerOnDisplay","setSpinnerOffDisplay","submitCreateForm","submitEditForm","spinnerDisplay","toggleCreateForm","coverDisplay","editDisplay","togglePageTitle","currentPage","passEdit","tempEditData","disbandGroup","togglePopUp","popUpDisplay","addCourseDisplay","twoButtonDisplay","errorDisplay","errorMessage","currentCourses","groupCount","onopen","onmessage","groupList","exact","path","updateAppState","faSpinner","spin","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.59985e30.chunk.js","sourcesContent":["import React from 'react';\r\nimport {NavLink, Redirect} from 'react-router-dom';\r\n\r\nexport default class Header extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            profileChange: this.props.profileChange,\r\n            profileURL: '',\r\n            display: false,\r\n            page: this.props.page\r\n        }\r\n    }\r\n\r\n    // actions when data is updated.\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.profileChange !== prevProps.profileChange) {\r\n            if (this.props.user) {\r\n                this.setState(() => {\r\n                    return ({ \r\n                        profileChange: this.props.profileChange,\r\n                        profileURL: this.props.user.profileChange\r\n                    });\r\n                })\r\n            }\r\n        }\r\n        if (this.props.user !== prevProps.user) {\r\n            if (this.props.user) {\r\n                this.setState(() => {\r\n                    return ({ \r\n                        profileURL: this.props.user.profileChange\r\n                     });\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    // Toggle dropdown menu display state\r\n    toggleMenu = () => {\r\n        this.setState((prevState) => {\r\n            return {display: !prevState.display}\r\n        })\r\n    }\r\n\r\n    // Change dropdown menu display style on smaller screens\r\n    checkStyle() {\r\n        if (this.state.display === true) {\r\n            return {display: 'block'};\r\n        }\r\n        return {display: 'none'};\r\n    }\r\n\r\n    // handles the interaction after user clicks to go homepage\r\n    handleHomePageClick = () => {\r\n        this.setState({shouldRedirect: 'home'});\r\n    }\r\n\r\n    // hadnles the interaction after user clicks to go mygroup\r\n    handleMyGroupClick = () => {\r\n        this.setState({shouldRedirect: 'mygroup'});\r\n    }\r\n\r\n    render() {\r\n        if (this.state.page !== '') {\r\n            if (this.state.page === 'home') {\r\n                this.props.togglePage('');\r\n                return <Redirect to={'/home'} />\r\n            } else {\r\n                this.props.togglePage('');\r\n                return <Redirect to={'/mygroup'} />\r\n            }\r\n        } \r\n\r\n        let url = \"\"\r\n        if (this.props.user !== null) {\r\n            url = this.props.user.photoURL\r\n        }\r\n        \r\n        return (\r\n            <div id=\"nav-search\" className=\"sticky-top\">\r\n                <header>\r\n                    <nav className=\"navbar\">\r\n                        <div className=\"logo row\" onClick={this.handleHomePageClick}>\r\n                            <NavLink to='/home'><img id=\"logo\" src=\"/img/logo.png\" alt=\"Logo\" aria-label=\"Return to main page.\" /></NavLink>\r\n                            <NavLink to='/home'><p className=\"h2\" id=\"logo-text\">Round Table</p></NavLink>\r\n                        </div>\r\n                        <div className=\"nav-search\">\r\n                            <div className=\"profile-setting\">\r\n                                <div className=\"nav-links\">\r\n                                    <NavLink to='/home' className=\"text-uppercase font-weight-bold\" onClick={this.handleHomePageClick}\r\n                                        >Homepage</NavLink>\r\n                                    <NavLink to='/mygroup' className=\"text-uppercase font-weight-bold\" onClick={this.handleMyGroupClick}\r\n                                        >MyGroups</NavLink>\r\n                                    <NavLink to='/myprofile' className=\"text-uppercase font-weight-bold\">Profile</NavLink>\r\n                                    <NavLink to='/' className=\"text-uppercase font-weight-bold\" onClick={() => this.props.setAuthToken(null)}>Sign out</NavLink>\r\n                                    <NavLink to='/myprofile'><img className=\"avatar\" src={this.props.userPhoto}  alt=\"User Profile\" /></NavLink>\r\n                                </div>\r\n                                \r\n                                <div className=\"dropdown-mobile\" onClick={this.toggleMenu}>\r\n                                    <NavLink to='#' className=\"dropdown-toggle profile-link\" role=\"button\" id=\"dropdownMenuLink\"\r\n                                        data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"><img\r\n                                        className=\"avatar\" src={url} alt=\"User Profile\" /></NavLink>\r\n\r\n                                    <div className=\"dropdown-menu dropdown-menu-right\" aria-labelledby=\"dropdownMenuLink\" style={this.checkStyle()}>\r\n                                        <NavLink to='/home' onClick={this.handleHomePageClick} className=\"dropdown-item\">Homepage</NavLink>\r\n                                        <div className=\"dropdown-divider\"></div>\r\n                                        <NavLink to='/mygroup'  className=\"dropdown-item\" onClick={this.handleMyGroupClick}>MyGroups</NavLink>\r\n                                        <div className=\"dropdown-divider\"></div>\r\n                                        <NavLink to='/myprofile' className=\"dropdown-item\" >Profile</NavLink>\r\n                                        <div className=\"dropdown-divider\"></div>\r\n                                        {/* TODO: Change this to an api call. */}\r\n                                        <NavLink to='/' className=\"dropdown-item signout\" onClick={() => this.props.setAuthToken(null)}>Sign out</NavLink>\r\n                                    </div>\r\n                                    \r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </nav>\r\n                </header>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faGithub } from '@fortawesome/free-brands-svg-icons'\r\n\r\nexport default class Footer extends React.Component {\r\n    render() {\r\n        return (\r\n            <Router>\r\n            <div>\r\n                <footer> \r\n                    <div className=\"container\">\r\n                        <div className=\"row d-flex text-center justify-content-center github\">\r\n                            <a href=\"https://github.com/WayneLi1063/Roundtable\" aria-label=\"Get source code of this site from Github!\"><FontAwesomeIcon icon={faGithub} size=\"lg\" className=\"white mt-1\" /></a>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"container\">\r\n                        <div className=\"row d-flex text-center justify-content-center\">\r\n                            <div className=\"col-md-8 col-12 mt-4 mb-2\">\r\n                            <p className=\"footer-text\">This web app is designed to help college students who would like to\r\n                                create or join study groups based on their currently taking courses and study goals.\r\n                                    </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <hr className=\"rgba-light\" />\r\n                    <div className=\"container\">\r\n                        <div className=\"d-flex text-center justify-content-center\">\r\n                            <div className=\"font-small\">\r\n                                <p>&copy; 2021 Wanye Li, Andi Ren, Aryan Varshney, Coco Li. All rights reserved.</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </footer>\r\n            </div>\r\n            </Router>\r\n        )\r\n    }\r\n}","const { CognitoIdentityClient } = require(\"@aws-sdk/client-cognito-identity\");\r\nconst { fromCognitoIdentityPool, } = require(\"@aws-sdk/credential-provider-cognito-identity\");\r\nconst { S3Client, PutObjectCommand, ListObjectsCommand } = require(\"@aws-sdk/client-s3\");\r\n\r\nexport const albumBucketName = \"roundtablefinder\";\r\nexport const bucketRegion = \"us-west-1\";\r\nconst IdentityPoolId = \"us-west-1:28fdba59-1304-427e-8879-19f3d8c15844\";\r\n\r\nconst s3 = new S3Client({\r\n    region: bucketRegion,\r\n    credentials: fromCognitoIdentityPool({\r\n      client: new CognitoIdentityClient({ region: bucketRegion }),\r\n      identityPoolId: IdentityPoolId, // IDENTITY_POOL_ID\r\n    }),\r\n  });\r\n\r\n// Add a photo to an album\r\nexport const AddPhoto = async (albumName, imgFile, photoKeyName, callback) => {\r\n      const albumPhotosKey = encodeURIComponent(albumName) + \"/\";\r\n      await s3.send(\r\n          new ListObjectsCommand({\r\n            Prefix: albumPhotosKey,\r\n            Bucket: albumBucketName\r\n          })\r\n      );\r\n      const fileName = imgFile.name;\r\n      let photoKey = \"\";\r\n      if (photoKeyName === \"\") {\r\n        photoKey = albumPhotosKey + fileName;\r\n      } else {\r\n        photoKey = albumPhotosKey + photoKeyName;\r\n      }\r\n      const uploadParams = {\r\n        Bucket: albumBucketName,\r\n        Key: photoKey,\r\n        Body: imgFile\r\n      };\r\n      try {\r\n        await s3.send(new PutObjectCommand(uploadParams));\r\n        console.log(\"Successfully uploaded photo.\");\r\n        if (typeof callback === \"function\") {\r\n          callback()\r\n        }\r\n      } catch (err) {\r\n        console.error(\"There was an error uploading your photo: \", err.message);\r\n      }\r\n}","import React from 'react';\r\nimport { albumBucketName, bucketRegion, AddPhoto } from './S3.js';\r\n\r\n// The form for \"create a group\" function.\r\nexport default class Create extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            img: '',\r\n            groupName: '',\r\n            description: '',\r\n            courseName: '',\r\n            when2meetURL: '',\r\n            groupSize: 2,\r\n            emptyAlertDisplay: false,\r\n            emptyCourseDisplay: false,\r\n            exceedCharDisplay: false,\r\n            homeworkHelp: false,\r\n            examSquad: false,\r\n            noteExchange: false,\r\n            labMates: false,\r\n            projectPartners: false,\r\n            private: false,\r\n            myCourses: []\r\n        }\r\n    }\r\n\r\n    // updates course list prop when database fetches\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.courseList !== prevProps.courseList) {\r\n            this.setState(() => {\r\n                return ({ myCourses: this.props.courseList, courseName: this.props.courseList[0] });\r\n            })\r\n        }\r\n    }\r\n\r\n    // Toggles an in-page alert when users submit an empty field\r\n    toggleEmpty = () => {\r\n        this.setState((prevState) => {\r\n            return { emptyAlertDisplay: !prevState.emptyAlertDisplay }\r\n        })\r\n    }\r\n\r\n    // Toggles an in-page alert when users submit a group name with more than 24 characters.\r\n    toggleExceed = () => {\r\n        this.setState((prevState) => {\r\n            return { exceedCharDisplay: !prevState.exceedCharDisplay }\r\n        })\r\n    }\r\n\r\n    // Toggles an in-page alert when users didn't input current courses or encountered conncection error.\r\n    toggleEmptyCourse = () => {\r\n        this.setState((prevState) => {\r\n            return { emptyCourseDisplay: !prevState.emptyCourseDisplay }\r\n        })\r\n    }\r\n\r\n    // Handles the user passed-in image.\r\n    handleImgURLChange = (event) => {\r\n        let newImg = event.target.files[0];\r\n        this.setState({\r\n            img: newImg\r\n        });\r\n    }\r\n\r\n    // Handles the interaction when user types in group name field.\r\n    handleGroupNameChange = (event) => {\r\n        if (this.state.emptyAlertDisplay) {\r\n            this.toggleEmpty();\r\n        }\r\n        if (this.state.exceedCharDisplay) {\r\n            this.toggleExceed();\r\n        }\r\n        let newString = event.target.value;\r\n        this.setState({\r\n            groupName: newString\r\n        });\r\n    }\r\n\r\n    // Handles the interaction when user selects an option in course name drop down.\r\n    handleCourseNameChange = (event) => {\r\n        let newValue = event.target.value;\r\n        this.setState({\r\n            courseName: newValue\r\n        });\r\n    }\r\n\r\n    // Handles the interaction when user types in description field.\r\n    handleDescriptionChange = (event) => {\r\n        let newString = event.target.value;\r\n        this.setState({\r\n            description: newString\r\n        });\r\n    }\r\n\r\n    // Handles the interaction when user types in description field.\r\n    handleMeetChange = (event) => {\r\n        let newString = event.target.value;\r\n        this.setState({\r\n            when2meetURL: newString\r\n        });\r\n    }\r\n\r\n    // Handles the interaction when user checks the private button.\r\n    handlePrivateChange = (event) => {\r\n        this.setState((prevState) => {\r\n            return { private: !prevState.private }\r\n        })\r\n    }\r\n\r\n    // Handles the interaction when user selects the Homeeork Help option.\r\n    handleHomeworkHelpChange = () => {\r\n        this.setState((prevState) => {\r\n            return { homeworkHelp: !prevState.homeworkHelp }\r\n        })\r\n    }\r\n\r\n    // Handles the interaction when user selects Exam Squad option.\r\n    handleExamSquadChange = () => {\r\n        this.setState((prevState) => {\r\n            return { examSquad: !prevState.examSquad }\r\n        })\r\n    }\r\n\r\n    // Handles the interaction when user selects Note Exchange option.\r\n    handleNoteExchangeChange = () => {\r\n        this.setState((prevState) => {\r\n            return { noteExchange: !prevState.noteExchange }\r\n        })\r\n\r\n    }\r\n\r\n    // Handles the interaction when user selects Lab Mates option.\r\n    handleLabMatesChange = () => {\r\n        this.setState((prevState) => {\r\n            return { labMates: !prevState.labMates }\r\n        })\r\n    }\r\n\r\n    // Handles the interaction when user selects Project Partners option.\r\n    handleProjectPartnersChange = () => {\r\n        this.setState((prevState) => {\r\n            return { projectPartners: !prevState.projectPartners }\r\n        })\r\n    }\r\n\r\n    // Handles the interaction when user changes the group size slider.\r\n    handleGroupSizeChange = (event) => {\r\n        let newSize = event.target.value;\r\n        this.setState({\r\n            groupSize: newSize\r\n        });\r\n    }\r\n\r\n    // Signifies what value the group size slider current is.\r\n    handleGroupSizeOutput = (event) => {\r\n        event.target.value = this.state.groupSize;\r\n    }\r\n\r\n    // Handles the create group funtion when user sumbits the create form.\r\n    handleSubmit = () => {\r\n        let newGroup = {};\r\n        if (this.state.groupName.length === 0) {\r\n            this.toggleEmpty();\r\n        } else if (this.state.groupName.length > 24) {\r\n            this.toggleExceed();\r\n        } else if (this.state.myCourses[0] === \"Please set up your current courses in profile page.\") {\r\n            this.toggleEmptyCourse();\r\n            // default img if user didn't upload image\r\n        } else {\r\n            if (this.state.img === '') {\r\n                let url = \"https://s3-us-west-2.amazonaws.com/uw-s3-cdn/wp-content/uploads/sites/81/2015/04/07090900/uw-block-w-statue-377x160.jpg\"\r\n                this.handleSubmitHelper(newGroup, url);\r\n            } else {\r\n                AddPhoto(\"GroupPhotos\", this.state.img, this.state.img.name)\r\n                let url = `https://${albumBucketName}.s3.${bucketRegion}.amazonaws.com/GroupPhotos/${this.state.img.name}`\r\n                this.handleSubmitHelper(newGroup, url);\r\n            }\r\n            this.props.toggleForm();\r\n        }\r\n    }\r\n\r\n    // update the state, display the appropriate information inside the feedback popup window\r\n    handleSubmitHelper(newGroup, url) {\r\n        newGroup.teamName = this.state.groupName;\r\n        newGroup.className = this.state.courseName;\r\n        newGroup.totalNumber = parseInt(this.state.groupSize, 10);\r\n        newGroup.img = url\r\n        newGroup.homeworkHelp = this.state.homeworkHelp\r\n        newGroup.examSquad = this.state.examSquad\r\n        newGroup.noteExchange = this.state.noteExchange\r\n        newGroup.labMates = this.state.labMates\r\n        newGroup.projectPartners = this.state.projectPartners\r\n        newGroup.description = this.state.description;\r\n        newGroup.private = this.state.private;\r\n        newGroup.when2meetURL = this.state.when2meetURL;\r\n        this.props.onSubmit(newGroup);\r\n        if (this.props.feedbackDisplay) {\r\n            this.props.toggleFeedback();\r\n            this.props.feedbackInfo.pop();\r\n            this.props.feedbackInfo.pop();\r\n            this.props.feedbackInfo.push(\"created\");\r\n            this.props.feedbackInfo.push(this.state.groupName);\r\n            this.props.toggleFeedback();\r\n        } else {\r\n            this.props.feedbackInfo.push(\"created\");\r\n            this.props.feedbackInfo.push(this.state.groupName);\r\n            this.props.toggleFeedback();\r\n        }\r\n        this.setState({\r\n            img: '',\r\n            groupName: ''\r\n        });\r\n    }\r\n\r\n    // Renders a create form for user to input.\r\n    render() {\r\n        let courseOptions = this.state.myCourses.map((course) => {\r\n            return <option value={course} key={course}>{course}</option>\r\n        })\r\n\r\n        return (\r\n            <div>\r\n                {this.props.createDisplay &&\r\n                    <div className=\"form-popup\" id=\"create-form\">\r\n                        <form className=\"form-container\">\r\n                            <h1>Create Group</h1>\r\n\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"create-new-image\" className=\"font-weight-bold\">Upload New Image</label><br />\r\n                                <input type=\"file\" id=\"create-new-image\" onChange={this.handleImgURLChange} accept=\"image/*\" />\r\n                            </div>\r\n\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"create-group-name\" className=\"font-weight-bold\">Group Name</label>\r\n                                <input type=\"text\" className=\"form-control\" id=\"create-group-name\" value={this.state.groupName} onChange={this.handleGroupNameChange} />\r\n                                {this.state.emptyAlertDisplay &&\r\n                                    <p className=\"alert-red alert-create empty-field\">This field cannot be empty.</p>\r\n                                }\r\n                                {this.state.exceedCharDisplay &&\r\n                                    <p className=\"alert-red alert-create 24-char\">This field cannot exceed 24 characters.</p>\r\n                                }\r\n                            </div>\r\n\r\n                            <div className=\"form-group\">\r\n                                <div className=\"form-group course-container\" id=\"courseList-create\">\r\n                                    <label htmlFor=\"create-course-name\" className=\"font-weight-bold\">Course Name</label>\r\n                                    <select className=\"form-control select-field\" id=\"create-course-name\" onChange={this.handleCourseNameChange}>\r\n                                        {courseOptions}\r\n                                    </select>\r\n                                    {this.state.emptyCourseDisplay &&\r\n                                        <p className=\"alert-red alert-create empty-course\">Empty current courses or connection error, please set up your courses in profile page, or refresh webpage.</p>\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"create-group-descr\" className=\"font-weight-bold\">Group Description</label>\r\n                                <input type=\"text\" className=\"form-control\" id=\"create-group-descr\" value={this.state.description} onChange={this.handleDescriptionChange} />\r\n                            </div>\r\n\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"create-meet\" className=\"font-weight-bold\">When2meet URL</label>\r\n                                <input type=\"text\" className=\"form-control\" id=\"create-meet\" value={this.state.when2meetURL} onChange={this.handleMeetChange} />\r\n                            </div>\r\n\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"create-group-size\" className=\"font-weight-bold\">Group Size (2-5)</label><br />\r\n                                <input type=\"range\" name=\"create-group-size\" max=\"5\" min=\"2\" id=\"create-group-size\"\r\n                                    className=\"g-size\" value={this.state.groupSize} onChange={this.handleGroupSizeChange} />\r\n                                <output className=\"ml-3\" name=\"create-size-output\" id=\"create-size-output\">{this.state.groupSize}</output>\r\n                            </div>\r\n\r\n                            <div className=\"form-group\">\r\n                                <div className=\"create-form-group\" aria-labelledby=\"goal-text\">\r\n                                    <p className=\"form-check-label font-weight-bold\" id=\"goal-text\">Group Goal</p>\r\n                                    <div className=\"form-check\">\r\n                                        <div className=\"row\">\r\n                                            <div className=\"col-6\">\r\n                                                <input className=\"form-check-input\" type=\"checkbox\"\r\n                                                    id=\"create-goal-1\" onClick={this.handleHomeworkHelpChange} />\r\n                                                <label className=\"form-check-label\" htmlFor=\"create-goal-1\">Homework\r\n                                                    Help</label>\r\n                                            </div>\r\n                                            <div className=\"col-6\">\r\n                                                <input className=\"form-check-input\" type=\"checkbox\"\r\n                                                    id=\"create-goal-2\" onClick={this.handleExamSquadChange} />\r\n                                                <label className=\"form-check-label\" htmlFor=\"create-goal-2\">Exam Squad</label>\r\n                                            </div>\r\n                                            <div className=\"col-6\">\r\n                                                <input className=\"form-check-input\" type=\"checkbox\"\r\n                                                    id=\"create-goal-3\" onClick={this.handleNoteExchangeChange} />\r\n                                                <label className=\"form-check-label\" htmlFor=\"create-goal-3\">Note\r\n                                                    Exchange</label>\r\n                                            </div>\r\n                                            <div className=\"col-6\">\r\n                                                <input className=\"form-check-input\" type=\"checkbox\"\r\n                                                    id=\"create-goal-4\" onClick={this.handleLabMatesChange} />\r\n                                                <label className=\"form-check-label\" htmlFor=\"create-goal-4\">Lab Mates</label>\r\n                                            </div>\r\n                                            <div className=\"col-6\">\r\n                                                <input className=\"form-check-input\" type=\"checkbox\"\r\n                                                    id=\"create-goal-5\" onClick={this.handleProjectPartnersChange} />\r\n                                                <label className=\"form-check-label\" htmlFor=\"create-goal-5\">Project\r\n                                                    Partners</label>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"form-button\">\r\n                                <button type=\"button\" id=\"submit-create\" className=\"btn save\" onClick={this.handleSubmit}>Save</button>\r\n                                <button type=\"button\" id=\"cancel-create\" className=\"btn cancel\" onClick={this.props.toggleForm}>Cancel</button>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport { albumBucketName, bucketRegion, AddPhoto } from './S3.js'\r\n\r\n// The form for \"edit\" button.\r\nexport default class Create extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            img: this.props.editData.imgURL,\r\n            groupName: this.props.editData.teamName,\r\n            courseName: this.props.editData.className,\r\n            description: this.props.editData.description,\r\n            when2meetURL: this.props.editData.when2meetURL,\r\n            private: false,\r\n            groupSize: this.props.editData.totalNumber,\r\n            homeworkHelp: this.props.editData.tags.homeworkHelp,\r\n            examSquad: this.props.editData.tags.examSquad,\r\n            noteExchange: this.props.editData.tags.noteExchange,\r\n            labMates: this.props.editData.tags.labMates,\r\n            projectPartners: this.props.editData.tags.projectPartners,\r\n            emptyAlertDisplay: false,\r\n            exceedCharDisplay: false,\r\n            manyMemberDisplay: false,\r\n            myCourses: this.props.courseList,\r\n            authToken: localStorage.getItem(\"Authorization\") || null\r\n        }\r\n    }\r\n\r\n    // updates course list prop when database fetches\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.courseList !== prevProps.courseList) {\r\n            this.setState(() => {\r\n                return ({ myCourses: this.props.courseList });\r\n            })\r\n        }\r\n    }\r\n\r\n    // Toggles an in-page alert when users submit an empty field\r\n    toggleEmpty = () => {\r\n        this.setState((prevState) => {\r\n            return { emptyAlertDisplay: !prevState.emptyAlertDisplay }\r\n        })\r\n    }\r\n\r\n    // Toggles an in-page alert when users submit a group name with more than 24 characters.\r\n    toggleExceed = () => {\r\n        this.setState((prevState) => {\r\n            return { exceedCharDisplay: !prevState.exceedCharDisplay }\r\n        })\r\n    }\r\n\r\n    // Toggles an in-page alert when users tries to lower group size past threshold,\r\n    // which is the currently occupied number of people.\r\n    toggleManyMember = () => {\r\n        this.setState((prevState) => {\r\n            return { manyMemberDisplay: !prevState.manyMemberDisplay }\r\n        })\r\n    }\r\n\r\n    // Handles the user passed-in image.\r\n    handleImgURLChange = (event) => {\r\n        let newImg = event.target.files[0];\r\n        this.setState({\r\n            img: newImg\r\n        });\r\n    }\r\n\r\n    // Handles the interaction when user types in group name field.\r\n    handleGroupNameChange = (event) => {\r\n        if (this.state.emptyAlertDisplay) {\r\n            this.toggleEmpty();\r\n        }\r\n        if (this.state.exceedCharDisplay) {\r\n            this.toggleExceed();\r\n        }\r\n        let newString = event.target.value;\r\n        this.setState({\r\n            groupName: newString\r\n        });\r\n    }\r\n\r\n    // Handles the interaction when user selects an option in course name drop down.\r\n    handleCourseNameChange = (event) => {\r\n        let newValue = event.target.value;\r\n        this.setState({\r\n            courseName: newValue\r\n        });\r\n    }\r\n\r\n    // Handles the interaction when user changes the group size slider.\r\n    handleGroupSizeChange = (event) => {\r\n        let newSize = event.target.value;\r\n        this.setState({\r\n            groupSize: newSize\r\n        });\r\n    }\r\n\r\n    // Handles the interaction when user types in description field.\r\n    handleDescriptionChange = (event) => {\r\n        let newString = event.target.value;\r\n        this.setState({\r\n            description: newString\r\n        });\r\n    }\r\n\r\n    // Handles the interaction when user types in description field.\r\n    handleMeetChange = (event) => {\r\n        let newString = event.target.value;\r\n        this.setState({\r\n            when2meetURL: newString\r\n        });\r\n    }\r\n\r\n    // Handles the interaction when user checks the private button.\r\n    handlePrivateChange = (event) => {\r\n        this.setState((prevState) => {\r\n            return { private: !prevState.private }\r\n        })\r\n    }\r\n\r\n    // Handles the interaction when user selects the Homework Help option.\r\n    handleHomeworkHelpChange = () => {\r\n        this.setState((prevState) => {\r\n            return { homeworkHelp: !prevState.homeworkHelp }\r\n        })\r\n    }\r\n\r\n    // Handles the interaction when user selects Exam Squad option.\r\n    handleExamSquadChange = () => {\r\n        this.setState((prevState) => {\r\n            return { examSquad: !prevState.examSquad }\r\n        })\r\n    }\r\n\r\n    // Handles the interaction when user selects Note Exchange option.\r\n    handleNoteExchangeChange = () => {\r\n        this.setState((prevState) => {\r\n            return { noteExchange: !prevState.noteExchange }\r\n        })\r\n\r\n    }\r\n\r\n    // Handles the interaction when user selects Lab Mates option.\r\n    handleLabMatesChange = () => {\r\n        this.setState((prevState) => {\r\n            return { labMates: !prevState.labMates }\r\n        })\r\n    }\r\n\r\n    // Handles the interaction when user selects Project Partners option.\r\n    handleProjectPartnersChange = () => {\r\n        this.setState((prevState) => {\r\n            return { projectPartners: !prevState.projectPartners }\r\n        })\r\n    }\r\n\r\n    // Signifies what value the group size slider current is.\r\n    handleGroupSizeOutput = (event) => {\r\n        event.target.value = this.state.groupSize;\r\n    }\r\n\r\n    // Handles the create group funtion when user sumbits the edit form.\r\n    handleSubmit = () => {\r\n        let newGroup = {};\r\n        if (this.state.groupName.length === 0) {\r\n            this.toggleEmpty();\r\n        } else if (this.state.groupName.length > 24) {\r\n            this.toggleExceed();\r\n        } else if (this.state.groupSize < this.props.editData.members.length) {\r\n            this.toggleManyMember();\r\n        } else {\r\n            if (typeof this.state.img !== \"string\") {\r\n                AddPhoto(\"GroupPhotos\", this.state.img, this.state.img.name)\r\n                let url = `https://${albumBucketName}.s3.${bucketRegion}.amazonaws.com/GroupPhotos/${this.state.img.name}`\r\n                this.handleSubmitHelper(newGroup, url);\r\n            } else {\r\n                this.handleSubmitHelper(newGroup, this.state.img);\r\n            }\r\n            this.props.toggleForm();\r\n        }\r\n    }\r\n\r\n    // The main interaction for handle submit\r\n    handleSubmitHelper = (newGroup, url) => {\r\n        newGroup.teamName = this.state.groupName;\r\n        newGroup.className = this.state.courseName;\r\n        newGroup.totalNumber = this.state.groupSize ? parseInt(this.state.groupSize, 10) : parseInt(this.props.editData.maxSize, 10);\r\n        newGroup.description = this.state.description;\r\n        newGroup.when2meetURL = this.state.when2meetURL;\r\n        newGroup.private = this.state.private;\r\n        newGroup.img = url;\r\n        newGroup.homeworkHelp = this.state.homeworkHelp\r\n        newGroup.examSquad = this.state.examSquad\r\n        newGroup.noteExchange = this.state.noteExchange\r\n        newGroup.labMates = this.state.labMates\r\n        newGroup.projectPartners = this.state.projectPartners\r\n        this.props.onSubmit(newGroup, this.props.editData._id);\r\n    }\r\n\r\n    // Handles the disband group funtion when user clicks on the disband function.\r\n    handleDisband = () => {\r\n        this.props.onDisband(this.props.editData);\r\n    }\r\n\r\n    // Renders an edit form for user to input.\r\n    render() {\r\n        let courseOptions = this.state.myCourses.map((course) => {\r\n            return <option value={course} key={course}>{course}</option>\r\n        })\r\n\r\n        return (\r\n            <div className=\"form-popup\" id=\"edit-form\">\r\n                <form className=\"form-container\">\r\n                    <h1>Edit Group</h1>\r\n\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"new-image\" className=\"font-weight-bold\">Upload New Image</label><br />\r\n                        <input type=\"file\" id=\"new-image\" onChange={this.handleImgURLChange} accept=\"image/*\" /><br />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"g-name\" className=\"font-weight-bold\">Group Name</label><br />\r\n                        <input type=\"text\" id=\"g-name\" value={this.state.groupName} onChange={this.handleGroupNameChange} /><br />\r\n                        {this.state.emptyAlertDisplay &&\r\n                            <p className=\"alert-red alert-edit empty-field\">This field cannot be empty.</p>\r\n                        }\r\n                        {this.state.exceedCharDisplay &&\r\n                            <p className=\"alert-red alert-edit 24-char\">This field cannot exceed 24 characters.</p>\r\n                        }\r\n                    </div>\r\n                    <div className=\"form-group courseContainer\" id=\"courseListEdit\">\r\n                        <label htmlFor=\"c-name\" className=\"font-weight-bold\">Course Name</label>\r\n                        <select className=\"form-control\" id=\"c-name\" value={this.state.courseName} onChange={this.handleCourseNameChange}>\r\n                            {courseOptions}\r\n                        </select>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"g-descr\" className=\"font-weight-bold\">Description</label><br />\r\n                        <input type=\"text\" id=\"g-descr\" value={this.state.description} onChange={this.handleDescriptionChange} /><br />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"g-meet\" className=\"font-weight-bold\">When2Meet URL</label><br />\r\n                        <input type=\"text\" id=\"g-meet\" value={this.state.when2meetURL} onChange={this.handleMeetChange} /><br />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"g-size\" className=\"font-weight-bold\">Group Size (2-5)</label><br />\r\n                        <input type=\"range\" name=\"g-size\" max=\"5\" min=\"2\" id=\"g-size\" className=\"g-size\" value={this.state.groupSize ? this.state.groupSize : this.props.editData.maxSize } onChange={this.handleGroupSizeChange} />\r\n                        <output className=\"ml-3\" name=\"size-output\" id=\"size-output\">{this.state.groupSize}</output><br />\r\n                        {this.state.manyMemberDisplay &&\r\n                            <p className=\"alert-red alert-edit many-member\">You have {this.props.editData.members.length} members which exceeds desired group size.</p>\r\n                        }\r\n                    </div>\r\n\r\n                    <div className=\"form-group\">\r\n                        <div className=\"edit-form-group\" aria-labelledby=\"goal-text\">\r\n                            <p className=\"form-check-label font-weight-bold\" id=\"goal-text\">Group Goal</p>\r\n                            <div className=\"form-check\">\r\n                                <div className=\"row\">\r\n                                    <div className=\"col-6\">\r\n                                        <input className=\"form-check-input\" type=\"checkbox\" checked={this.state.homeworkHelp} onClick={this.handleHomeworkHelpChange}\r\n                                            id=\"edit-goal-1\" readOnly />\r\n                                        <label className=\"form-check-label\" htmlFor=\"edit-goal-1\">Homework\r\n                                                    Help</label>\r\n                                    </div>\r\n                                    <div className=\"col-6\">\r\n                                        <input className=\"form-check-input\" type=\"checkbox\" onClick={this.handleExamSquadChange} checked={this.state.examSquad}\r\n                                            id=\"edit-goal-2\" readOnly />\r\n                                        <label className=\"form-check-label\" htmlFor=\"edit-goal-2\">Exam Squad</label>\r\n                                    </div>\r\n                                    <div className=\"col-6\">\r\n                                        <input className=\"form-check-input\" type=\"checkbox\" checked={this.state.noteExchange}\r\n                                            id=\"edit-goal-3\" onClick={this.handleNoteExchangeChange} readOnly />\r\n                                        <label className=\"form-check-label\" htmlFor=\"edit-goal-3\">Note\r\n                                                    Exchange</label>\r\n                                    </div>\r\n                                    <div className=\"col-6\">\r\n                                        <input className=\"form-check-input\" type=\"checkbox\" checked={this.state.labMates}\r\n                                            id=\"edit-goal-4\" onClick={this.handleLabMatesChange} readOnly />\r\n                                        <label className=\"form-check-label\" htmlFor=\"edit-goal-4\">Lab Mates</label>\r\n                                    </div>\r\n                                    <div className=\"col-6\">\r\n                                        <input className=\"form-check-input\" type=\"checkbox\" checked={this.state.projectPartners}\r\n                                            id=\"edit-goal-5\" onClick={this.handleProjectPartnersChange} readOnly />\r\n                                        <label className=\"form-check-label\" htmlFor=\"edit-goal-5\">Project\r\n                                                    Partners</label>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <label htmlFor=\"leave\">Disband the group?</label>\r\n                    <button type=\"button\" className=\"btn disband\" id=\"leave\" onClick={this.props.togglePopUpForm}>Disband</button>\r\n\r\n                    <div className=\"formButton\">\r\n                        <button type=\"button\" id=\"submit-edit\" className=\"btn save\" onClick={this.handleSubmit}>Save</button>\r\n                        <button type=\"button\" id=\"cancel-edit\" className=\"btn cancel\" onClick={this.props.toggleForm}>Cancel</button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}","import React from 'react';\r\n\r\nclass Confirm extends React.Component {\r\n    \r\n    //this calls the confirm function in the props(what you want to do when you hit yes) and then disables the page.\r\n    handleSumbitConfirm = () => {\r\n        this.props.confirmFunction(this.props.cardData);\r\n        this.props.toggleConfirm();\r\n    }\r\n    \r\n    //renders the confirm pop up form\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.props.confirmDisplay && \r\n                <div className=\"confirm-popup\" id=\"p-form\">\r\n                    <form className=\"confirm-container\">\r\n                        <h1>Are you sure?</h1>\r\n                        <div className=\"confirm-button\">\r\n                            <button type=\"button\" className=\"btn-yes\" onClick={this.handleSumbitConfirm} >Yes</button>\r\n                            <button type=\"button\" className=\"btn-no\" onClick={this.props.toggleConfirm} >No</button>\r\n                        </div>\r\n                    </form>\r\n                </div>}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Confirm;\r\n","import React from 'react';\r\n\r\n// Provides feedback when users join or create a group\r\nexport default class JoinCreateFeedback extends React.Component {\r\n    // Empty feedback content\r\n    toggleEmptyFeedback = () => {\r\n        this.props.toggleFeedback();\r\n        this.props.feedbackInfo.pop();\r\n        this.props.feedbackInfo.pop();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.props.feedbackDisplay &&\r\n                    <div className=\"feedback-pop\">\r\n                        <form className=\"pop-container\">\r\n                            <p>You have sucessfully {this.props.feedbackInfo[0]} {this.props.feedbackInfo[1]}.</p>\r\n                            <p>Please see MYGROUPS page to view your current groups.</p>\r\n                            <div className=\"popCancel\">\r\n                                <button type=\"button\" id=\"popCancel\" className=\"btn cancel\" onClick={this.toggleEmptyFeedback}>Close</button>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTrashAlt } from '@fortawesome/free-solid-svg-icons'\r\n\r\nexport default class AddCourses extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            courses: this.props.courses,\r\n            newName: '',\r\n            emptyAlertDisplay: false,\r\n            authToken: localStorage.getItem(\"Authorization\") || null\r\n        }\r\n    }\r\n\r\n    // When the props gets updated, change the state as well\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.courses !== prevProps.courses) {\r\n            this.setState(() => {\r\n                return ({ courses: this.props.courses });\r\n            })\r\n        }\r\n    }\r\n\r\n    // Called when component shows\r\n    componentDidMount() {\r\n        this.props.getCourseCallback()\r\n    }\r\n\r\n    // disable event listens.\r\n    componentWillUnmount() {\r\n\r\n    }\r\n\r\n    //shows empty field alert\r\n    showEmpty = () => {\r\n        this.setState({ emptyAlertDisplay: true })\r\n    }\r\n\r\n    //hides empty field alert\r\n    hideEmpty = () => {\r\n        this.setState({ emptyAlertDisplay: false })\r\n    }\r\n\r\n    //delete a course from the user's list\r\n    deleteCourse = async (course) => {\r\n        if (!this.state.authToken) {\r\n            return;\r\n        }\r\n        const response = await fetch(\"https://api.roundtablefinder.com/v1/courses/users\", {\r\n            method: 'DELETE',\r\n            headers: new Headers({\r\n                \"Authorization\": this.state.authToken,\r\n                \"Content-Type\": \"application/json\"\r\n            }),\r\n            body: JSON.stringify({course: course})\r\n        });\r\n        if (response.status >= 300) {\r\n            this.props.errorCallback(\"Delete course failed. Please retry\");\r\n        } else {\r\n            this.props.wsUpdate()\r\n        }\r\n    }\r\n\r\n    //add a course to the user's list\r\n    addOneCourse = async (newCourseName) => {\r\n        if (newCourseName === '') {\r\n            this.showEmpty();\r\n        } else {\r\n            if (!this.state.authToken) {\r\n                this.props.errorCallback(\"You are not authenticated\")\r\n                return;\r\n            }\r\n            const response = await fetch(\"https://api.roundtablefinder.com/v1/courses/users\", {\r\n                method: 'POST',\r\n                headers: new Headers({\r\n                    \"Authorization\": this.state.authToken,\r\n                    \"Content-Type\": \"application/json\"\r\n                }),\r\n                body: JSON.stringify({course: newCourseName})\r\n            });\r\n            if (response.status >= 300) {\r\n                this.props.errorCallback(\"Add course failed. Please retry\");\r\n            } else {\r\n                this.props.wsUpdate()\r\n            }\r\n            this.hideEmpty();\r\n        }\r\n    }\r\n\r\n    //handles the field change in the input component\r\n    handleNameChange = (event) => {\r\n        this.setState({\r\n            newName: event.target.value\r\n        })\r\n    }\r\n\r\n    //closes the pop up, and resets the input field\r\n    handleSubmit = () => {\r\n        this.props.toggleAddCourse();\r\n        this.setState({\r\n            newName: ''\r\n        })\r\n    }\r\n\r\n    //renders the component\r\n    render() {\r\n        let content = [];\r\n        let courses = this.state.courses;\r\n        if (courses) {\r\n            courses.forEach((course) => {\r\n                if (course !== \"Please set up your current courses in profile page.\") {\r\n                    content.push(<div className='course-tag'>\r\n                    {course}\r\n                    <FontAwesomeIcon icon={faTrashAlt} size=\"xs\" className=\"white trash mt-1 mr-2\" onClick={() => this.deleteCourse(course)} />\r\n                </div>)\r\n                }\r\n            })\r\n        }\r\n        \r\n        return (\r\n            <div>\r\n                <div className='addCoursePopUp'>\r\n                    <form className='addCourse-form-container'>\r\n                        <h1>Setup your current courses</h1>\r\n                        <label htmlFor=\"g-name\" className=\"font-weight-bold\">Add a course you are taking (EX. INFO340)</label><br />\r\n                        {this.state.emptyAlertDisplay &&\r\n                            <p className=\"alert-red alert-edit empty-field\">This field cannot be empty.</p>\r\n                        }\r\n                        <div className='add-course-input-flex-container'>\r\n                            <input type=\"text\" id=\"addCourseInput\" value={this.state.newName} onChange={this.handleNameChange} />\r\n                            <button type=\"button\" id=\"add-course\" className=\"btn-add\" onClick={() => { this.addOneCourse(this.state.newName) }}>Add</button>\r\n                        </div>\r\n                        <div className=\"course-list row\">\r\n                            {content}\r\n                        </div>\r\n                        <button type=\"button\" id=\"add-course-2\" className=\"btn-add-done\" onClick={() => this.handleSubmit()}>Done</button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPlusCircle } from '@fortawesome/free-solid-svg-icons';\r\nimport { albumBucketName, bucketRegion, AddPhoto } from './S3.js';\r\n\r\nexport default class Profile extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            display: 'profile',\r\n            firstName: '',\r\n            lastName: '',\r\n            email: '',\r\n            courses: '',\r\n            nameErr: false,\r\n            userPhotoFile: '',\r\n            userPhoto: '',\r\n            userName: '',\r\n            authToken: localStorage.getItem(\"Authorization\") || null\r\n        }\r\n    }\r\n\r\n    // initial actions when component is created.\r\n    componentDidMount() {\r\n        this.props.toggleTwoButtons(false);\r\n        this.setUserProfile();\r\n        this.getCourse();\r\n    }\r\n\r\n    // actions when data is updated.\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.courses !== prevProps.courses) {\r\n            this.setState(() => {\r\n                return ({ courses: this.props.courses });\r\n            })\r\n        }\r\n    }\r\n\r\n    // decide to show the profile or edit tab\r\n    toggleMenu = (tab) => {\r\n        this.setState({ display: tab })\r\n    }\r\n\r\n    // handle clicks on cancel edit button\r\n    cancelEdit = () => {\r\n        this.setUserProfile();\r\n    }\r\n\r\n    // handle clicks on save change button\r\n    submitEdit = () => {\r\n        if (!this.state.authToken) {\r\n            this.props.errorCallback(\"You are not authenticated\")\r\n            return;\r\n        }\r\n        this.setState({\r\n            profileChanged: false,\r\n        });\r\n        if (this.state.firstName === '' && this.state.LastName === '') {\r\n            this.setState({\r\n                nameErr: true,\r\n            });\r\n        } else {\r\n            this.setState({\r\n                nameErr: false,\r\n            })\r\n            this.submitUpdate()\r\n        }\r\n    }\r\n\r\n    submitUpdate = async () => {\r\n        const update = {\r\n            FirstName: this.state.firstName,\r\n            LastName: this.state.lastName,\r\n        }\r\n        if (this.state.userPhotoFile !== '') {\r\n            AddPhoto(\"UserFolder\", this.state.userPhotoFile, this.state.userName, () => {\r\n                this.props.setProfilePic()\r\n            })\r\n        }\r\n        const response = await fetch(\"https://api.roundtablefinder.com/v1/users/me\", {\r\n            method: 'PATCH',\r\n            headers: new Headers({\r\n                \"Authorization\": this.state.authToken,\r\n                \"Content-Type\": \"application/json\"\r\n            }),\r\n            body: JSON.stringify(update)\r\n        });\r\n        if (response.status >= 300) {\r\n            this.props.errorCallback(\"error:\" + response.status);\r\n            return;\r\n        } else {\r\n            this.setUserProfile();\r\n            this.toggleMenu('profile');\r\n        }\r\n    }\r\n\r\n    // sets the authToken\r\n    setAuthToken = (auth) => {\r\n        localStorage.setItem(\"Authorization\", auth)\r\n        this.setState({authToken: auth});\r\n    }\r\n\r\n    // saves the user data\r\n    setUser = (user) => {\r\n        this.setState({user: user});\r\n    }\r\n\r\n    // fetch user information from the database\r\n    setUserProfile = async () => {\r\n        if (!this.state.authToken) {\r\n            this.props.errorCallback(\"You are not authenticated.\")\r\n            return;\r\n        }\r\n        const response = await fetch(this.props.api.base + this.props.api.handlers.myuser + \"me\", {\r\n            method: 'GET',\r\n            headers: new Headers({\r\n                \"Authorization\": this.state.authToken\r\n            })\r\n        });\r\n        if (response.status >= 300) {\r\n            this.props.errorCallback(\"error:\" + response.status);\r\n            return;\r\n        }\r\n        const user = await response.json()\r\n        this.setState({\r\n            firstName: user.firstName,\r\n            lastName: user.lastName,\r\n            email: user.email,\r\n            url: user.photoURL,\r\n            userName: user.userName,\r\n            userPhoto: `https://${albumBucketName}.s3.${bucketRegion}.amazonaws.com/UserFolder/${user.userName}`\r\n        })\r\n\r\n    }\r\n\r\n    // calls the course api to get user's current courses\r\n    getCourse = async () => {\r\n        if (!this.state.authToken) {\r\n            this.props.errorCallback(\"You are not authenticated\")\r\n            return;\r\n        }\r\n        const response = await fetch(\"https://api.roundtablefinder.com/v1/courses/users\", {\r\n            method: 'GET',\r\n            headers: new Headers({\r\n                \"Authorization\": this.state.authToken\r\n            })\r\n        });\r\n        if (response.status >= 300) {\r\n            this.props.errorCallback(\"Get course failed. Please retry\");\r\n            return;\r\n        }\r\n        const courses = await response.json()\r\n        if (courses !== null) {\r\n            this.setState({ courses: courses.classList });\r\n        }\r\n    }\r\n\r\n    // handle name change when users edit their profiles\r\n    handleFirstNameChange = (event) => {\r\n        this.setState({ firstName: event.target.value })\r\n    }\r\n\r\n    handleLastNameChange = (event) => {\r\n        this.setState({ lastName: event.target.value })\r\n    }\r\n\r\n    // handle profile photo change when users edit their profiles\r\n    handlePhoto = (event) => {\r\n        this.setState({ \r\n            userPhotoFile: event.target.files[0],\r\n            userPhoto: URL.createObjectURL(event.target.files[0])\r\n        })\r\n    }\r\n\r\n    render() {\r\n        let content = [];\r\n\r\n        let courses = this.state.courses;\r\n        if (courses.length !== 0) {\r\n            courses.forEach(course => {\r\n                if (course === \"Please set up your current courses in profile page.\") {\r\n                    course = \"Please set up your current courses by clicking the plus sign.\"\r\n                }\r\n                content.push(<div key={course} id=\"class-name\" className={`class-name + ${course}`}> {course} </div>)\r\n\r\n            })\r\n        }\r\n\r\n        if (this.state.display === 'profile') {\r\n            return (\r\n                <div className=\"container\">\r\n                    <div className=\"row my-2\">\r\n                        <div className=\"col-lg-8 order-lg-2\">\r\n                            <ul className=\"nav nav-tabs\">\r\n                                <li className=\"nav-item\">\r\n                                    <button onClick={() => this.toggleMenu('profile')} className=\"nav-link active\">Profile</button>\r\n                                </li>\r\n                                <li className=\"nav-item\">\r\n                                    <button onClick={() => this.toggleMenu('edit')} className=\"nav-link\">Edit</button>\r\n                                </li>\r\n                            </ul>\r\n                            <div className=\"tab-content py-4\">\r\n                                <div className=\"tab-pane active\" id=\"profile\">\r\n                                    <h5 className=\"mb-3\">{this.state.userName}</h5>\r\n                                    <div className=\"row\">\r\n                                        <div className=\"user-profile ml-3\">\r\n                                            <h6>First Name</h6>\r\n                                            <p>{this.state.firstName}</p>\r\n                                            <h6>Last Name</h6>\r\n                                            <p>{this.state.lastName}</p>\r\n                                            <h6>Email</h6>\r\n                                            <p>{this.state.email}</p>\r\n                                            <h6>Current Courses</h6>\r\n                                            <div className=\"my-courses\">\r\n                                                {content}\r\n                                            </div>\r\n                                            <FontAwesomeIcon icon={faPlusCircle} size=\"lg\" className=\"mx-3 mt-1\" onClick={this.props.toggleAddCourse} />\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-lg-4 order-lg-1\">\r\n                            <img src={this.state.userPhoto} className=\"mx-auto img-fluid img-circle d-block user-img\" alt=\"avatar\"></img>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )\r\n        } else {\r\n            return (\r\n                <div className=\"container\">\r\n                    <div className=\"row my-2\">\r\n                        <div className=\"col-lg-8 order-lg-2\">\r\n                            <ul className=\"nav nav-tabs\">\r\n                                <li className=\"nav-item\">\r\n                                    <button onClick={() => this.toggleMenu('profile')} className=\"nav-link\">Profile</button>\r\n                                </li>\r\n                                <li className=\"nav-item\">\r\n                                    <button onClick={() => this.toggleMenu('edit')} className=\"nav-link active\">Edit</button>\r\n                                </li>\r\n                            </ul>\r\n                            <div className=\"tab-content py-4\">\r\n                                <div className=\"tab-pane active\" id=\"edit\">\r\n                                    <form>\r\n                                        <div className=\"form-group row\">\r\n                                            <label className=\"col-lg-3 col-form-label form-control-label\">First Name</label>\r\n                                            <div className=\"col-lg-9\">\r\n                                                <input className=\"form-control\" type=\"text\" value={this.state.firstName} onChange={this.handleFirstNameChange}></input>\r\n                                            </div>\r\n                                            {this.state.nameErr && <p className='name-err'>Name cannot be empty!</p>}\r\n                                        </div>\r\n                                        <div className=\"form-group row\">\r\n                                            <label className=\"col-lg-3 col-form-label form-control-label\">Last Name</label>\r\n                                            <div className=\"col-lg-9\">\r\n                                                <input className=\"form-control\" type=\"text\" value={this.state.lastName} onChange={this.handleLastNameChange}></input>\r\n                                            </div>\r\n                                            {this.state.nameErr && <p className='name-err'>Name cannot be empty!</p>}\r\n                                        </div>\r\n                                        <div className=\"form-group row\">\r\n                                            <label className=\"col-lg-3 col-form-label form-control-label\"></label>\r\n                                            <div className=\"col-lg-9\">\r\n                                                <input type=\"reset\" className=\"btn btn-secondary mr-3\" value=\"Cancel\" onClick={this.cancelEdit}></input>\r\n                                                <input type=\"button\" className=\"btn btn-primary\" value=\"Save Changes\" onClick={this.submitEdit}></input>\r\n                                            </div>\r\n                                        </div>\r\n                                    </form>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-lg-4 order-lg-1\">\r\n                            <img src={this.state.userPhoto} className=\"mx-auto img-fluid img-circle d-block user-img\" alt=\"avatar\"></img>\r\n                            <div className=\"custom-file\">\r\n                                <input type=\"file\" accept=\"image/*\" className=\"custom-file-input\" onChange={this.handlePhoto} />\r\n                                <label className=\"custom-file-label\">Upload a different photo</label>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n\r\n    }\r\n}","import React from 'react';\r\nimport Confirm from './Confirm.js';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nconst NOT_JOINED = 0; // This user doesn't belong in this group\r\nconst MEMBER = 1; // This user is a member\r\nconst LEADER = 2; // This user is a leader\r\n\r\nclass Card extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            confirmPopUp: false,\r\n            shouldRedirect: false\r\n        }\r\n    }\r\n\r\n    // handles the interaction when user wants to show details for a group.\r\n    handleDetailClick = () => {\r\n        this.setState({shouldRedirect: true});\r\n    }\r\n\r\n    //this is a toggle switch for confirm pop up window, it switchs the display of the popup everytime its called.\r\n    toggleConfirm = () => {\r\n        this.setState((prevState) => {\r\n            return { confirmPopUp: !prevState.confirmPopUp };\r\n        })\r\n    }\r\n\r\n    //this is a hub controller for all functions revolving a card.\r\n    handleManageGroup = () => {\r\n        if (this.props.feedbackDisplay && this.reportGroupStatus() === NOT_JOINED) {\r\n            this.props.toggleFeedback();\r\n            this.props.feedbackInfo.pop();\r\n            this.props.feedbackInfo.pop();\r\n            this.props.feedbackInfo.push(\"joined\");\r\n            this.props.feedbackInfo.push(this.props.cardData.teamName);\r\n            this.props.toggleFeedback();\r\n        } else if (this.reportGroupStatus() === NOT_JOINED) {\r\n            this.props.feedbackInfo.push(\"joined\");\r\n            this.props.feedbackInfo.push(this.props.cardData.teamName);\r\n            this.props.toggleFeedback();\r\n        }\r\n\r\n        if (this.reportGroupStatus() === LEADER) {\r\n            this.props.editFunction(this.props.cardData);\r\n        } else if (this.reportGroupStatus() === MEMBER) {\r\n            this.toggleConfirm();\r\n        } else {\r\n            this.props.switchFunction(this.props.cardData);\r\n        }\r\n        this.props.fetch()\r\n    }\r\n\r\n    // returns the group status for this current user\r\n    reportGroupStatus() {\r\n        let members = this.props.cardData.members;\r\n        let creator = this.props.cardData.creator;\r\n        if (creator.userID === this.props.user.id) {\r\n            return LEADER\r\n        } else if (members.includes(this.props.user.id)){\r\n            return MEMBER\r\n        } else {\r\n            return NOT_JOINED;\r\n        }\r\n    }\r\n\r\n    // Returns a serie of icons to represent the current member status(joined / group size).\r\n    getMemberIcons() {\r\n        let iconIndicators = [];\r\n        for (let i = 0; i < this.props.cardData.maxSize; i++) {\r\n            if (i < this.props.cardData.members.length) {\r\n                iconIndicators.push(true);\r\n            } else {\r\n                iconIndicators.push(false);\r\n            }\r\n        }\r\n\r\n        let iconList = [];\r\n\r\n        iconIndicators.forEach((indicator, index) => {\r\n            let singleIcon = (\r\n                this.getMemberIcon(indicator, index)\r\n            )\r\n            iconList.push(singleIcon);\r\n        })\r\n\r\n        return (\r\n            <div className=\"team-viz\">\r\n                {iconList}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    //Return one memeber icon, depending on the indicator, it can either be full or empty;\r\n    getMemberIcon(indicator, index) {\r\n        if (indicator) {\r\n            return (\r\n                <img src=\"img/mF.png\" alt=\"member icon, occupied\" aria-hidden=\"true\" key={index}></img>\r\n            )\r\n        } else {\r\n            return (\r\n                <img src=\"img/mE.png\" alt=\"member icon, occupied\" aria-hidden=\"true\" key={index}></img>\r\n            )\r\n        }\r\n    }\r\n\r\n    //return the correct status string in the card interaction button according to the status in the card's state.\r\n    returnStatusString() {\r\n        if (this.reportGroupStatus() === NOT_JOINED) {\r\n            return \"Join\";\r\n        } else if (this.reportGroupStatus() === MEMBER) {\r\n            return \"Leave\";\r\n        }\r\n        return \"Edit\";\r\n    }\r\n\r\n    // If the user is the group founder, adds a crown icon next to the group name\r\n    groupLeaderCrown() {\r\n        if (this.reportGroupStatus() === LEADER) {\r\n            return (<img className=\"leader\" src=\"img/crown.svg\" alt=\"You are leader\"></img>);\r\n        }\r\n        return \"\";\r\n    }\r\n\r\n    // not display the group when the group is full\r\n    displayStyleCheck() {\r\n        if (this.props.cardData.members.length === this.props.cardData.maxSize && this.reportGroupStatus() === NOT_JOINED) {\r\n            return { display: 'none' }\r\n        } else {\r\n            return { display: 'inline-block' }\r\n        }\r\n    }\r\n\r\n    // Renders a single card (group) object.\r\n    render() {\r\n        if (this.state.shouldRedirect) {\r\n            return <Redirect to={'/group/' + this.props.cardData._id} />\r\n        }\r\n        return (\r\n            <div>\r\n                <div className=\"flex-card\">\r\n                    <img id=\"g-img\" src={this.props.cardData.imgURL} alt={\"Group \" + this.props.cardData.teamName} onClick={this.handleDetailClick} aria-haspopup=\"true\"/>\r\n                    <div className=\"card-content\">\r\n                        <div className=\"card-text\">\r\n                            <div className=\"group-name\"> {this.props.cardData.teamName} </div>\r\n                            {this.groupLeaderCrown()}\r\n                            <div id=\"class-name\" className={`class-name`}> {this.props.cardData.className} </div>\r\n                        </div>\r\n\r\n                        {this.getMemberIcons()}\r\n\r\n                        <div className=\"group-info\">\r\n                            <div className=\"group-size\">\r\n                                Group of {this.props.cardData.maxSize}\r\n                                <button className={this.returnStatusString().toLowerCase()} style={this.displayStyleCheck()} onClick={this.handleManageGroup}> {this.returnStatusString()} </button>\r\n                            </div>\r\n                            <div className=\"looking-for\"> Looking for {this.props.cardData.maxSize - this.props.cardData.members.length} more</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <Confirm confirmDisplay={this.state.confirmPopUp} confirmFunction={this.props.confirmFunction} cardData={this.props.cardData}\r\n                    toggleConfirm={this.toggleConfirm}></Confirm>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card.js';\r\n\r\nexport default class FilteredCardList extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            group: '',\r\n            course: '',\r\n            homeworkHelp: false,\r\n            examSquad: false,\r\n            noteExchange: false,\r\n            labMates: false,\r\n            projectPartners: false,\r\n            cardList: this.props.renderedCards,\r\n            fullGroup: false,\r\n            fetched: false,\r\n            applied: false,\r\n            authToken: localStorage.getItem(\"Authorization\") || null\r\n        }\r\n    }\r\n\r\n    // updates card list prop when database fetches\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.renderedCards !== prevProps.renderedCards) {\r\n            this.setState(() => {\r\n                return ({ cardList: this.props.renderedCards });\r\n            })\r\n        }\r\n    }\r\n\r\n    // handles the appearance of course name field when user types in that field\r\n    handleGroupChange = (event) => {\r\n        let newValue = event.target.value\r\n        this.setState({ group: newValue });\r\n    }\r\n\r\n    // handles the appearance of course name field when user types in that field\r\n    handleCourseChange = (event) => {\r\n        let newValue = event.target.value\r\n        this.setState({ course: newValue });\r\n    }\r\n\r\n    // Handles the interaction when user selects the Homeeork Help option.\r\n    handleHomeworkHelpChange = () => {\r\n        this.setState((prevState) => {\r\n            return { homeworkHelp: !prevState.homeworkHelp }\r\n        })\r\n    }\r\n\r\n    // Handles the interaction when user selects Exam Squad option.\r\n    handleExamSquadChange = () => {\r\n        this.setState((prevState) => {\r\n            return { examSquad: !prevState.examSquad }\r\n        })\r\n    }\r\n\r\n    // Handles the interaction when user selects Note Exchange option.\r\n    handleNoteExchangeChange = () => {\r\n        this.setState((prevState) => {\r\n            return { noteExchange: !prevState.noteExchange }\r\n        })\r\n\r\n    }\r\n\r\n    // Handles the interaction when user selects Lab Mates option.\r\n    handleLabMatesChange = () => {\r\n        this.setState((prevState) => {\r\n            return { labMates: !prevState.labMates }\r\n        })\r\n    }\r\n\r\n    // Handles the interaction when user selects Project Partners option.\r\n    handleProjectPartnersChange = () => {\r\n        this.setState((prevState) => {\r\n            return { projectPartners: !prevState.projectPartners }\r\n        })\r\n    }\r\n\r\n    // handles the interaction when user selects \"don't display full group\" option.\r\n    handleFullGroupChange = () => {\r\n        this.setState((prevState) => {\r\n            return { fullGroup: !prevState.fullGroup }\r\n        })\r\n    }\r\n\r\n    // Signifies what value the group size slider current is.\r\n    handleGroupSizeOutput = (event) => {\r\n        event.target.value = this.state.groupSize;\r\n    }\r\n\r\n    // handles the refine request and puts the filtered card list into state.\r\n    handleSubmitRefine = () => {\r\n        this.setState({\r\n            fetched: true,\r\n            cardList: this.handleFilteringHelper()\r\n        })\r\n    }\r\n\r\n    // handles the reset filter status and puts all groups back to the page.\r\n    handleReset = () => {\r\n        this.setState(() => {\r\n            return ({\r\n                group: '',\r\n                course: '',\r\n                homeworkHelp: false,\r\n                examSquad: false,\r\n                noteExchange: false,\r\n                labMates: false,\r\n                projectPartners: false,\r\n                cardList: this.props.renderedCards,\r\n                fullGroup: false,\r\n                currentCard: null,\r\n                applied: false\r\n            })\r\n        })\r\n    }\r\n\r\n    // returns the filtered group list according to user's input.\r\n    handleFilteringHelper = () => {\r\n        let renderCards = this.props.renderedCards;\r\n        if (this.state.group !== '') {\r\n            renderCards = renderCards.filter((card) => {\r\n                return (card.teamName.toLowerCase().includes(this.state.group.toLowerCase()))\r\n            })\r\n        }\r\n        if (this.state.course !== '') {\r\n            renderCards = renderCards.filter((card) => {\r\n                return (card.className.toLowerCase().includes(this.state.course.toLowerCase()));\r\n            })\r\n        }\r\n        if (this.state.homeworkHelp) {\r\n            renderCards = renderCards.filter((card) => {\r\n                return (card.tags.homeworkHelp);\r\n            })\r\n        }\r\n        if (this.state.examSquad) {\r\n            renderCards = renderCards.filter((card) => {\r\n                return (card.tags.examSquad);\r\n            })\r\n        }\r\n        if (this.state.noteExchange) {\r\n            renderCards = renderCards.filter((card) => {\r\n                return (card.tags.noteExchange);\r\n            })\r\n        }\r\n        if (this.state.labMates) {\r\n            renderCards = renderCards.filter((card) => {\r\n                return (card.tags.labMates);\r\n            })\r\n        }\r\n        if (this.state.projectPartners) {\r\n            renderCards = renderCards.filter((card) => {\r\n                return (card.tags.projectPartners);\r\n            })\r\n        }\r\n        if (this.state.fullGroup) {\r\n            renderCards = renderCards.filter((card) => {\r\n                return (card.members.length !== card.totalNumber);\r\n            })\r\n        }\r\n        if (renderCards === this.props.renderedCards) {\r\n            this.setState(() => {\r\n                return ({ applied: false })\r\n            })\r\n        } else {\r\n            this.setState(() => {\r\n                return ({ applied: true })\r\n            })\r\n        }\r\n        return renderCards;\r\n    }\r\n\r\n    // confirm user's decision on leaving the passed in study group.\r\n    confirmLeave = async (card) => {\r\n        if (!this.state.authToken) {\r\n            this.props.errorCallback(\"You are not authenticated.\")\r\n            return;\r\n        }\r\n        const response = await fetch(\"https://api.roundtablefinder.com/v1/groups/\" + card._id + '/members', {\r\n            method: 'DELETE',\r\n            headers: new Headers({\r\n                \"Authorization\": this.state.authToken\r\n            })\r\n        })\r\n\r\n        if (response.status >= 300) {\r\n            this.props.errorCallback(\"leaving group failed. Please retry.\");\r\n            return;\r\n        } else {\r\n            this.props.wsUpdate()\r\n        }\r\n    }\r\n\r\n    // Add the user to the group when they join the group\r\n    joinGroup = async (card) => {\r\n        if (!this.state.authToken) {\r\n            this.props.errorCallback(\"You are not authenticated.\")\r\n            return;\r\n        }\r\n        const response = await fetch(\"https://api.roundtablefinder.com/v1/groups/\" + card._id + '/members', {\r\n            method: 'POST',\r\n            headers: new Headers({\r\n                \"Authorization\": this.state.authToken,\r\n                \"Content-Type\": \"application/json\"\r\n            }),\r\n            body: JSON.stringify({id: this.props.user.id})\r\n        })\r\n\r\n        if (response.status >= 300) {\r\n            this.props.errorCallback(\"Joining group failed. Please retry.\");\r\n            return;\r\n        } else {\r\n            this.props.wsUpdate()\r\n        }\r\n    }\r\n\r\n    // Pops up an edit form when the user clicks \"edit\" button\r\n    editGroup = (cardData) => {\r\n        this.props.passEditCallback(cardData);\r\n    }\r\n\r\n    // change the currently displaying title, especially when there's no suitable match for filtering.\r\n    toggleTitle() {\r\n        return (<p>test</p>)\r\n    }\r\n\r\n    // renders the filter form\r\n    render() {\r\n        let listOfCards = [];\r\n        let content = null;\r\n        if (this.state.cardList) {\r\n            listOfCards = this.state.cardList.map((eachCard) => {\r\n                let singleCard = (\r\n                    <Card cardData={eachCard} switchFunction={this.joinGroup} editFunction={this.editGroup} fetch={this.props.fetch}\r\n                        toggleFeedback={this.props.toggleFeedback} feedbackInfo={this.props.feedbackInfo} feedbackDisplay={this.props.feedbackDisplay}\r\n                        key={eachCard._id} confirmFunction={this.confirmLeave} user={this.props.user}\r\n                        toggleEditForm={this.props.toggleEditForm} />\r\n                )\r\n                return singleCard;\r\n            })\r\n        }\r\n\r\n        if (this.state.cardList.length === 0) {\r\n            content = (\r\n                <div>\r\n                    <h4 className='text-center'>So Empty...</h4>\r\n\r\n                </div>\r\n            )\r\n\r\n\r\n        } else {\r\n            content = (\r\n                <div className='flex-cards-container'>\r\n                    {listOfCards}\r\n                </div>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <div className=\"more-options row\">\r\n                {this.props.filterDisplay &&\r\n                    <div className=\"col-md-6 col-xl-3 filter-form\">\r\n                        <div className=\"side-bar\">\r\n                            <form className=\"px-3\">\r\n                                <div className=\"form-group\">\r\n                                    <label className=\"form-check-label\" htmlFor=\"form-check-input-group\">Group Name</label>\r\n                                    <div>\r\n                                        <input className=\"form-control\" type=\"text\" placeholder=\"Example: Geek\"\r\n                                            id=\"form-check-input-group\" onChange={this.handleGroupChange} value={this.state.group} />\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"dropdown-divider\"></div>\r\n                                <div className=\"form-group\">\r\n                                    <label className=\"form-check-label\" htmlFor=\"form-check-input-course\">Course</label>\r\n                                    <div>\r\n                                        <input className=\"form-control\" type=\"text\" placeholder=\"Example: Info 340\"\r\n                                            id=\"form-check-input-course\" onChange={this.handleCourseChange} value={this.state.course} />\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"dropdown-divider\"></div>\r\n                                <div className=\"form-group\" aria-labelledby=\"goal-text\">\r\n                                    <p className=\"form-check-label\" id=\"goal-text\">Group Goal</p>\r\n                                    <div className=\"form-check\">\r\n                                        <div className=\"row\">\r\n                                            <div className=\"col-6\">\r\n                                                <input className=\"form-check-input\" type=\"checkbox\" value=\"option1\"\r\n                                                    id=\"form-check-input-goal-1\" onClick={this.handleHomeworkHelpChange} checked={this.state.homeworkHelp} readOnly />\r\n                                                <label className=\"form-check-label\" htmlFor=\"form-check-input-goal-1\">Homework\r\n                                                    Help</label>\r\n                                            </div>\r\n                                            <div className=\"col-6\">\r\n                                                <input className=\"form-check-input\" type=\"checkbox\" value=\"option2\"\r\n                                                    id=\"form-check-input-goal-2\" onClick={this.handleExamSquadChange} checked={this.state.examSquad} readOnly />\r\n                                                <label className=\"form-check-label\" htmlFor=\"form-check-input-goal-2\">Exam Squad</label>\r\n                                            </div>\r\n                                            <div className=\"col-6\">\r\n                                                <input className=\"form-check-input\" type=\"checkbox\" value=\"option3\"\r\n                                                    id=\"form-check-input-goal-3\" onClick={this.handleNoteExchangeChange} checked={this.state.noteExchange} readOnly />\r\n                                                <label className=\"form-check-label\" htmlFor=\"form-check-input-goal-3\">Note\r\n                                                    Exchange</label>\r\n                                            </div>\r\n                                            <div className=\"col-6\">\r\n                                                <input className=\"form-check-input\" type=\"checkbox\" value=\"option4\"\r\n                                                    id=\"form-check-input-goal-4\" onClick={this.handleLabMatesChange} checked={this.state.labMates} readOnly />\r\n                                                <label className=\"form-check-label\" htmlFor=\"form-check-input-goal-4\">Lab Mates</label>\r\n                                            </div>\r\n                                            <div className=\"col-6\">\r\n                                                <input className=\"form-check-input\" type=\"checkbox\" value=\"option5\"\r\n                                                    id=\"form-check-input-goal-5\" onClick={this.handleProjectPartnersChange} checked={this.state.projectPartners} readOnly />\r\n                                                <label className=\"form-check-label\" htmlFor=\"form-check-input-goal-5\">Project\r\n                                                    Partners</label>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                {this.props.h1Title === \"Check Out These Amazing Groups!\" &&\r\n                                    <div>\r\n                                        <div className=\"dropdown-divider\"></div>\r\n                                        <div className=\"form-group\" aria-labelledby=\"dont-display-full-text\">\r\n                                            <div className=\"form-check\">\r\n                                                <input className=\"form-check-input\" type=\"checkbox\"\r\n                                                    id=\"form-check-input-full\" onClick={this.handleFullGroupChange} checked={this.state.fullGroup} readOnly />\r\n                                                <label className=\"form-check-label\" htmlFor=\"form-check-input-full\">Don't display full group</label>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                }\r\n                                <button className=\"btn btn-primary search-button mr-3\" type=\"button\" onClick={this.handleSubmitRefine}>Refine Result</button>\r\n                                <button className=\"btn btn-secondary search-button\" type=\"button\" onClick={this.handleReset}>Reset</button>\r\n                                {this.state.applied &&\r\n                                    <p className=\"applied-filter ml-2\">Applied</p>\r\n                                }\r\n                            </form>\r\n                        </div>\r\n                    </div>}\r\n                <section className=\"course-cards\">\r\n                    <h1 className=\"text-center title\">{this.props.h1Title}</h1>\r\n                    <p className=\"text-center\">Click on group images to check details.</p>\r\n                    {content}\r\n                </section>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n\r\n}","import React from 'react';\r\nimport FilteredCardList from './FilteredCardList.js';\r\n\r\nexport default class RenderMyGroups extends React.Component {\r\n    // make filter and create group appear\r\n    componentDidMount() {\r\n        this.props.toggleTwoButtons(true);\r\n    }\r\n\r\n    render() {\r\n        let groups = [];\r\n        if (this.props.cards && this.props.user) {\r\n            this.props.cards.forEach((group) => {\r\n                for (let member of group.members) {\r\n                    if (member === this.props.user.id) {\r\n                        groups.push(group)\r\n                        break;\r\n                    }\r\n                }\r\n            })\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <FilteredCardList wsUpdate={this.props.wsUpdate} filterDisplay={this.props.filterDisplay} toggleFilter={this.props.toggleFilter} cards={this.props.cards} renderedCards={groups} fetch={this.props.fetch} updateCallback={this.props.updateCallback} toggleFeedback={this.props.toggleFeedback}feedbackInfo={this.props.feedbackInfo} passEditCallback={this.props.passEditCallback}feedbackDisplay={this.props.feedbackDisplay} user={this.props.user} h1Title={\"My Current Groups\"} errorCallback={this.props.errorCallback} loading={this.props.loading}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport FilteredCardList from './FilteredCardList.js';\r\n\r\nexport default class Homepage extends React.Component {\r\n    componentDidMount() {\r\n        this.props.toggleTwoButtons(true);\r\n    }\r\n\r\n    render() {\r\n        let groups = [];\r\n        if (this.props.cards && this.props.user) {\r\n            this.props.cards.forEach((group) => {\r\n                let userIsMember = false;\r\n                for (let member of group.members) {\r\n                    if (member === this.props.user.id) {\r\n                        userIsMember = true;\r\n                    }\r\n                }\r\n                if (!userIsMember) {\r\n                    groups.push(group);\r\n                }\r\n            })    \r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <FilteredCardList wsUpdate={this.props.wsUpdate} filterDisplay={this.props.filterDisplay} \r\n                    toggleFilter={this.props.toggleFilter} cards={this.props.cards} renderedCards={groups} \r\n                    fetch={this.props.fetch} updateCallback={this.props.updateCallback} \r\n                    toggleFeedback={this.props.toggleFeedback} feedbackInfo={this.props.feedbackInfo} \r\n                    passEditCallback={this.props.passEditCallback} feedbackDisplay={this.props.feedbackDisplay} \r\n                    user={this.props.user} h1Title={\"Check Out These Amazing Groups!\"} \r\n                    errorCallback={this.props.errorCallback} />\r\n            </div>\r\n        )\r\n    }\r\n}","export default {\r\n    base: \"https://api.roundtablefinder.com\",\r\n    testbase: \"https://localhost:4000\",\r\n    handlers: {\r\n        users: \"/v1/users\",\r\n        myuser: \"/v1/users/\",\r\n        sessions: \"/v1/sessions\",\r\n        sessionsMine: \"/v1/sessions/mine\",\r\n        courses: \"/v1/courses/users\",\r\n        groups: \"/v1/groups\",\r\n        thisgroup: \"/v1/groups/\"\r\n    }\r\n}","import React from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport api from './APIEndpoints.js'\r\n\r\nconst HOMEWORK_HELP = \"homeworkHelp\";\r\nconst EXAM_SQUAD = \"examSquad\";\r\nconst NOTE_EXCHANGE = \"noteExchange\";\r\nconst LAB_MATES = \"labMates\";\r\nconst PROJECT_PARTNERS = \"projectPartners\"\r\n\r\nexport default class GroupDetailsPage extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            user:null,\r\n            userDataArray: [],\r\n            leader: {},\r\n            card: {},\r\n            teamName: '',\r\n            shouldRedirect: false,\r\n            authToken: localStorage.getItem(\"Authorization\") || null\r\n        }\r\n    }\r\n\r\n    // handles the interaction when user wants to leave details page.\r\n    handleDetailClick = () => {\r\n        this.setState({ shouldRedirect: true });\r\n    }\r\n\r\n    // get members info when component is created\r\n    componentDidMount() {\r\n        this.props.toggleTwoButtons(false);\r\n        let groupID = this.props.match.params.groupID;\r\n\r\n        this.getCurrentUser()\r\n\r\n        fetch(api.base + api.handlers.thisgroup + groupID)\r\n        .then(res => res.json())\r\n        .then(\r\n            (result) => {\r\n                if (result) {\r\n                    let members = result.members\r\n                    let leader = result.creator.userID\r\n                    let teamName = result.teamName\r\n\r\n                    if (members) {\r\n                        this.getMembersInfo(members, leader)\r\n                    }\r\n                    \r\n                    if (teamName) {\r\n                        this.setState(() => {\r\n                            return ({\r\n                                card: result,\r\n                                teamName: result.teamName\r\n                            })\r\n                        })\r\n                    } \r\n                }\r\n            }, (errorObj) => {\r\n                if (errorObj) {\r\n                    this.props.errorCallback(errorObj);\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    // build the data arrays for group leader and memebers\r\n    getMembersInfo = async (members, leader) => {\r\n        if (!this.state.authToken) {\r\n            console.log(\"no auth\")\r\n            return;\r\n        }\r\n\r\n        members.forEach(async (memberID) => {\r\n            const response = await fetch(api.base + api.handlers.myuser + memberID, {\r\n                method: 'GET',\r\n                headers: new Headers({\r\n                    \"Authorization\": this.state.authToken\r\n                })\r\n            });\r\n            if (response.status >= 300) {\r\n                this.toggleOnError(\"Authentication failed. Please relog.\");\r\n                this.setAuthToken(\"\");\r\n                this.setUser(null)\r\n                return;\r\n            }\r\n            const user = await response.json()\r\n            if (memberID !== leader) {\r\n                this.setState((prevState) => {\r\n                    let memberArray = prevState.userDataArray\r\n                    memberArray.push(user)\r\n                    return {userDataArray: memberArray}\r\n                })\r\n            } else {\r\n                this.setState({leader: user});\r\n            }\r\n            console.log(this.state.card)\r\n        })\r\n    }\r\n\r\n    // pre-prosess member data\r\n    buildUserDataArray = (userData) => {\r\n        let dataArray = this.state.userDataArray\r\n        dataArray.push(userData);\r\n        this.setState({\r\n            userDataArray: dataArray\r\n        })\r\n    }\r\n\r\n    // fetches the current user info\r\n    getCurrentUser = async () => {\r\n        if (!this.state.authToken) {\r\n            console.error(\"no auth token found, aborting\")\r\n            return;\r\n        }\r\n        const response = await fetch(api.base + api.handlers.myuser + \"me\", {\r\n            method: 'GET',\r\n            headers: new Headers({\r\n                \"Authorization\": this.state.authToken\r\n            })\r\n        });\r\n        if (response.status >= 300) {\r\n            this.toggleOnError(\"Authentication failed. Please relog.\");\r\n            this.setAuthToken(\"\");\r\n            this.setUser(null)\r\n            return;\r\n        }\r\n        const user = await response.json()\r\n        this.setState({user: user});\r\n    }\r\n\r\n    //renders the Group Detail Pop Up form\r\n    render() {\r\n        if (this.state.shouldRedirect && this.props.user) {\r\n            if (this.state.card.members.includes(this.props.user.id)) {\r\n                return <Redirect to='/mygroup' />\r\n            } else {\r\n                return <Redirect to='/home' />\r\n            }\r\n        }\r\n        let card = this.state.card;\r\n        let users = this.state.userDataArray\r\n        let members = null;\r\n        let content = null;\r\n        let goals = null;\r\n\r\n        //render the list of Members of the group\r\n        members = (\r\n            users.map((user) => {\r\n                let userEmailString = ''\r\n                if (!this.state.card.members.includes(this.state.user.id)) {\r\n                    return (\r\n                        <div key={user.id}>\r\n                            <div className='memberRow'>\r\n                                <img className=\"avatar\" src={user.photoURL} alt=\"User Profile\"></img>\r\n                                <p className='memberInfos'>\r\n                                    {user.firstName + '\\t' + user.lastName}\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                }\r\n                return (\r\n                    <div key={user.id}>\r\n                        <div className='memberRow'>\r\n                            <img className=\"avatar\" src={user.photoURL} alt=\"User Profile\"></img>\r\n                            <p className='memberInfos'>\r\n                                {user.firstName + '\\t' + user.lastName}\r\n                            </p>\r\n                            <a className='sendEmailButton' href={userEmailString}>Email</a>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            })\r\n        )\r\n        \r\n        if (card) {\r\n        //render the Goal Tags of the displayed group\r\n        let tags = card.tags;\r\n        if (tags) {\r\n            goals = (\r\n                Object.keys(tags).map((cardKey) => {\r\n                    if (tags[cardKey] === true) {\r\n                        if (cardKey === HOMEWORK_HELP) {\r\n                            cardKey = \"Homework Help\";\r\n                        } else if (cardKey === EXAM_SQUAD) {\r\n                            cardKey = \"Exam Squad\";\r\n                        } else if (cardKey === NOTE_EXCHANGE) {\r\n                            cardKey = \"Note Exchange\";\r\n                        } else if (cardKey === LAB_MATES) {\r\n                            cardKey = \"Lab Mates\";\r\n                        } else if (cardKey === PROJECT_PARTNERS) {\r\n                            cardKey = \"Project Partners\";\r\n                        }\r\n                        return (\r\n                            <div key={cardKey}>\r\n                                <div className='goalTag'>\r\n                                    {cardKey}\r\n                                </div>\r\n                            </div>\r\n                        )\r\n                    }\r\n                    return content;\r\n                })\r\n            )\r\n        }\r\n\r\n        return (\r\n            <section>\r\n                <div className='detailsContainer'>\r\n                    <h1 className='detailsTitle'>{card.teamName}</h1>\r\n                    <button className='detailsCloseButton' onClick={this.handleDetailClick}>Close</button>\r\n                    <div className=\"class-name-details\" > {card.className} </div>\r\n                    <div className=\"lookingFor\"> Looking for {card.members ? card.maxSize - card.members.length : \"fetching\"} more</div><br/>\r\n                    <div>\r\n                        <p className='membersTitle'>\r\n                            Members:\r\n                        </p>\r\n                    </div>\r\n                    <div className='memberList'>\r\n                        {(typeof (this.state.leader) !== 'undefined') &&\r\n                            <div>\r\n                                <div key={this.state.leader.id}>\r\n                                    <div className='memberRow'>\r\n                                        <img className=\"avatar\" src={this.state.leader.photoURL} alt=\"User Profile\"></img>\r\n                                        <img className=\"detailsLeader\" src=\"/img/crown.svg\" alt=\"You are leader\"></img>\r\n                                        <p className='leaderInfos'>\r\n                                            {this.state.leader.firstName + '\\t' + this.state.leader.lastName}\r\n                                        </p>\r\n                                        <a className='sendEmailButton' href={'mailto: ' + this.state.leader.email}> Email</a>\r\n                                    </div>\r\n                                </div>\r\n                                {members}\r\n                            </div>}\r\n                    </div>\r\n\r\n                    <div>\r\n                        <p className='membersTitle'>\r\n                            Group Goal:\r\n                        </p>\r\n                        <div className='goalTagsContainer'>\r\n                            {goals ? goals : <p>None</p>}\r\n                        </div>\r\n                    </div>\r\n                    <div>\r\n                        <p className='membersTitle'>\r\n                            When2Meet URL: \r\n                        </p>\r\n                        <p>{this.state.card.when2meetURL ? this.state.card.when2meetURL : <p>None</p>}</p>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n}","import React from 'react';\r\nimport Form from \"@rjsf/core\";\r\nimport api from './APIEndpoints.js';\r\nimport { AddPhoto } from './S3.js';\r\n\r\nexport default class SignUp extends React.Component {\r\n\r\n  formSchema = {\r\n    \"title\": \"SIGN UP\",\r\n    \"description\": \"Enter basic information to create an account\",\r\n    \"type\": \"object\",\r\n    \"required\": [\r\n      \"email\",\r\n      \"password\",\r\n      \"passwordConf\",\r\n      \"userName\",\r\n      \"firstName\",\r\n      \"lastName\"\r\n    ],\r\n    \"properties\": {\r\n      \"email\": {\r\n        \"type\": \"string\",\r\n        \"title\": \"Email\",\r\n      },\r\n      \"password\": {\r\n        \"type\": \"string\",\r\n        \"title\": \"Password\",\r\n      },\r\n      \"passwordConf\": {\r\n        \"type\": \"string\",\r\n        \"title\": \"Confirm Password\",\r\n      },\r\n      \"userName\": {\r\n        \"type\": \"string\",\r\n        \"title\": \"Username\",\r\n      },\r\n      \"firstName\": {\r\n        \"type\": \"string\",\r\n        \"title\": \"First name\",\r\n      },\r\n      \"lastName\": {\r\n        \"type\": \"string\",\r\n        \"title\": \"Last name\"\r\n      },\r\n    }\r\n  }\r\n\r\n  UIschema = {\r\n    \"email\": {\r\n      \"ui:format\": \"email\"\r\n    },\r\n    \"firstName\": {\r\n      \"ui:autofocus\": true,\r\n      \"ui:emptyValue\": \"\",\r\n      \"ui:autocomplete\": \"family-name\"\r\n    },\r\n    \"lastName\": {\r\n      \"ui:emptyValue\": \"\",\r\n      \"ui:autocomplete\": \"given-name\"\r\n    },\r\n    \"password\": {\r\n      \"ui:widget\": \"password\",\r\n      \"ui:help\": \"Hint: Make it strong!\"\r\n    },\r\n    \"passwordConf\": {\r\n      \"ui:widget\": \"password\",\r\n      \"ui:help\": \"Make sure the passwords match... \"\r\n    }\r\n  }\r\n\r\n  // sends the needed sign up data to api server\r\n  onSubmit = async ({formData}) => {\r\n    const response = await fetch(api.base + api.handlers.users, {\r\n      method: 'POST',\r\n      headers: new Headers({\r\n        \"Content-Type\": \"application/json\"\r\n      }),\r\n      body: JSON.stringify(formData)\r\n    });\r\n    if (response.status >= 300) {\r\n        this.props.errorCallback(\"Sign up unsuccessful. Please retry.\");\r\n        return;\r\n    }\r\n    const user = await response.json()\r\n    this.props.setUser(user);\r\n    const img_response = await fetch(\"https://roundtablefinder.s3-us-west-1.amazonaws.com/UserFolder/husky.png\")\r\n    const default_image = await img_response.blob()\r\n    AddPhoto(\"UserFolder\", default_image, user.userName, () => {\r\n      this.props.setProfilePic()\r\n      this.props.setAuthToken(response.headers.get(\"Authorization\"));\r\n    })\r\n\r\n  }\r\n\r\n  render() {\r\n    return <Form schema={this.formSchema} UIschema={this.UIschema} onSubmit={this.onSubmit}/>\r\n  }\r\n}","import React from 'react';\r\nimport Form from \"@rjsf/core\";\r\nimport api from './APIEndpoints.js'\r\n\r\nexport default class SignUp extends React.Component {\r\n\r\n  formSchema = {\r\n    \"title\": \"LOG IN\",\r\n    \"description\": \"Log in to your exisitng account\",\r\n    \"type\": \"object\",\r\n    \"required\": [\r\n      \"email\",\r\n      \"password\"\r\n    ],\r\n    \"properties\": {\r\n      \"email\": {\r\n        \"type\": \"string\",\r\n        \"title\": \"Email\",\r\n      },\r\n      \"password\": {\r\n        \"type\": \"string\",\r\n        \"title\": \"Password\",\r\n      }\r\n    }\r\n  }\r\n\r\n  UIschema = {\r\n    \"email\": {\r\n      \"ui:format\": \"email\"\r\n    },\r\n    \"password\": {\r\n      \"ui:widget\": \"password\"\r\n    }\r\n  }\r\n\r\n  // sends the log in data to api server\r\n  onSubmit = async ({formData}) => {\r\n    const response = await fetch(api.base + api.handlers.sessions, {\r\n      method: 'POST',\r\n      headers: new Headers({\r\n        \"Content-Type\": \"application/json\"\r\n      }),\r\n      body: JSON.stringify(formData)\r\n    });\r\n    if (response.status >= 300) {\r\n        this.props.errorCallback(\"Log in unsuccessful. Please retry.\");\r\n        return;\r\n    }\r\n    const user = await response.json()\r\n    this.props.setUser(user);\r\n    this.props.setAuthToken(response.headers.get(\"Authorization\"));\r\n    this.props.fetch()\r\n  }\r\n\r\n  render() {\r\n    return <Form schema={this.formSchema} UIschema={this.UIschema} onSubmit={this.onSubmit}/>\r\n  }\r\n}","import React from 'react';\r\nimport Header from './Header.js';\r\nimport Footer from './Footer.js';\r\nimport Create from './Create.js';\r\nimport Edit from './Edit.js'\r\nimport Confirm from './Confirm.js';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSpinner } from '@fortawesome/free-solid-svg-icons'\r\nimport JoinCreateFeedback from './JoinCreateFeedback.js';\r\nimport AddCourses from './AddCourses.js'\r\nimport ProfilePage from './ProfilePage.js';\r\nimport MyGroupPage from './MyGroupPage.js';\r\nimport Homepage from './Homepage.js';\r\nimport { Route, Switch, Redirect } from 'react-router-dom';\r\nimport GroupDetailsPage from './GroupDetailsPage.js';\r\nimport SignUp from './SignUp.js'\r\nimport Login from './Login.js'\r\nimport api from './APIEndpoints.js'\r\nimport { albumBucketName, bucketRegion } from './S3.js';\r\n\r\n\r\n// WEBSOCKET\r\nconst client = new WebSocket('wss://api.roundtablefinder.com/websocket');\r\n\r\nexport default class App extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            user: null,\r\n            spinnerDisplay: false,\r\n            myGroups: [],\r\n            myCourses: [],\r\n            currentCourses: '',\r\n            currentPage: '',\r\n            filterDisplay: false,\r\n            createDisplay: false,\r\n            editDisplay: false,\r\n            errorDisplay: false,\r\n            tempEditData: {},\r\n            feedbackDisplay: false,\r\n            feedbackInfo: [],\r\n            popUpDisplay: false,\r\n            addCourseDisplay: false,\r\n            twoButtonDisplay: true,\r\n            coverDisplay: false,\r\n            groupCount: 0,\r\n            errorMessage: '',\r\n            userPhoto: '',\r\n            authToken: localStorage.getItem(\"Authorization\") || null,\r\n            profileChanged: false,\r\n        }\r\n    }\r\n\r\n    getCurrentUser = async () => {\r\n        if (!this.state.authToken) {\r\n            this.toggleOnError(\"You are not authenticated.\")\r\n            return;\r\n        }\r\n        const response = await fetch(api.base + api.handlers.myuser + \"me\", {\r\n            method: 'GET',\r\n            headers: new Headers({\r\n                \"Authorization\": this.state.authToken\r\n            })\r\n        });\r\n        if (response.status >= 300) {\r\n            this.toggleOnError(\"Authentication failed. Please relog.\");\r\n            this.setAuthToken(\"\");\r\n            this.setUser(null)\r\n            return;\r\n        }\r\n        const user = await response.json()\r\n        this.setState({\r\n            user: user,\r\n            userPhoto: `https://${albumBucketName}.s3.${bucketRegion}.amazonaws.com/UserFolder/${user.userName}`\r\n        });\r\n    }\r\n\r\n    getCurrentGroups = async () => {\r\n        if (!this.state.authToken) {\r\n            return;\r\n        }\r\n        const response = await fetch(api.base + api.handlers.groups, {\r\n            method: 'GET',\r\n            headers: new Headers({\r\n                \"Authorization\": this.state.authToken\r\n            })\r\n        });\r\n        if (response.status >= 300) {\r\n            this.toggleOnError(\"Retrieving group info failed. Please retry.\");\r\n            return;\r\n        }\r\n        const groups = await response.json()\r\n        this.setState({myGroups: groups});\r\n    }\r\n\r\n    //WEBSOCKET\r\n    valueChange = () => {\r\n        client.send(\"update happened\")\r\n    }\r\n\r\n    // fetch data from database and handles user sign in\r\n    componentDidMount() {\r\n        this.fetch();\r\n\r\n        client.onopen = () => {\r\n            console.log('Websocket Client Connected')\r\n        }\r\n\r\n        client.onmessage = (message) => {\r\n            this.fetch();\r\n        }\r\n    }\r\n\r\n    // Fetch the groups the user is currently enrolled and user's current attending courses in from json.\r\n    fetch = async () => {\r\n        this.setSpinnerOnDisplay();\r\n\r\n        this.getCurrentUser();\r\n        this.getCurrentGroups();\r\n        this.getCourse();\r\n\r\n        this.setSpinnerOffDisplay();\r\n    }\r\n\r\n    // This callback gets the current course enrollment of the user\r\n    getCourse = async () => {\r\n        if (!this.state.authToken) {\r\n            this.toggleOnError(\"You are not authenticated.\")\r\n            return;\r\n        }\r\n        const response = await fetch(\"https://api.roundtablefinder.com/v1/courses/users\", {\r\n            method: 'GET',\r\n            headers: new Headers({\r\n                \"Authorization\": this.state.authToken\r\n            })\r\n        });\r\n        if (response.status >= 300) {\r\n            this.toggleOnError(\"Get course failed. Please retry\");\r\n            return;\r\n        }\r\n        const courses = await response.json()\r\n        if (courses !== null) {\r\n            this.setState({ myCourses: courses.classList });\r\n        } else {\r\n            this.setState({ myCourses: [\"Please set up your current courses in profile page.\"] });\r\n        }\r\n    }\r\n\r\n    // The callback function that allows Create form to submit a new group to app.\r\n    submitCreateForm = async (newGroup) => {\r\n        if (!this.state.authToken) {\r\n            this.toggleOnError(\"You are not authenticated.\")\r\n            return;\r\n        }\r\n\r\n        const response = await fetch(api.base + api.handlers.groups, {\r\n            method: 'POST',\r\n            headers: new Headers({\r\n                \"Authorization\": this.state.authToken,\r\n                \"Content-Type\": \"application/json\"\r\n            }),\r\n            body: JSON.stringify(newGroup)\r\n        });\r\n        if (response.status >= 300) {\r\n            this.toggleOnError(response.body);\r\n            return;\r\n        } else {\r\n            this.valueChange()\r\n        }\r\n    }\r\n\r\n    // The callback function that allows Edit form to submit edited group info to app.\r\n    submitEditForm = async (card, _id) => {\r\n        const response = await fetch(api.base + api.handlers.groups + \"/\" + _id, {\r\n            method: 'PATCH',\r\n            headers: new Headers({\r\n                \"Authorization\": this.state.authToken,\r\n                \"Content-Type\": \"application/json\"\r\n            }),\r\n            body: JSON.stringify(card)\r\n        });\r\n        if (response.status >= 300) {\r\n            this.toggleOnError(response.body);\r\n            return;\r\n        } else {\r\n            this.valueChange()\r\n        }\r\n    }\r\n\r\n    // Sets React-FontAwesome spinner on.\r\n    setSpinnerOnDisplay = () => {\r\n        this.setState(() => {\r\n            return { spinnerDisplay: true }\r\n        })\r\n    }\r\n\r\n    // Sets React-FontAwesome spinner off.\r\n    setSpinnerOffDisplay = () => {\r\n        this.setState((prevState) => {\r\n            return { spinnerDisplay: false }\r\n        })\r\n    }\r\n\r\n    // Sets the Auth token for the current user\r\n    setAuthToken = (auth) => {\r\n        localStorage.setItem(\"Authorization\", auth)\r\n        this.setState(() => {\r\n            return { authToken: auth };\r\n        })\r\n    }\r\n\r\n    // Save user data to the state\r\n    setUser = (user) => {\r\n        this.setState(() => {\r\n            return { user: user };\r\n        })\r\n    }\r\n\r\n    // letting the client know to update profile pic\r\n    setProfilePic = () => {\r\n        this.setState((prevState) => {\r\n            return { profileChanged: !prevState.profileChanged };\r\n        })\r\n    }\r\n\r\n    // Toggle filter group form\r\n    toggleFilter = () => {\r\n        this.setState((prevState) => {\r\n            return { filterDisplay: !prevState.filterDisplay }\r\n        })\r\n    }\r\n\r\n    // Toggle create group form\r\n    toggleCreateForm = () => {\r\n        this.setState((prevState) => {\r\n            return {\r\n                createDisplay: !prevState.createDisplay,\r\n                coverDisplay: !prevState.coverDisplay\r\n            }\r\n        })\r\n    }\r\n\r\n    // Toggle edit group form\r\n    toggleEditForm = () => {\r\n        this.setState((prevState) => {\r\n            return {\r\n                editDisplay: !prevState.editDisplay,\r\n                coverDisplay: !prevState.coverDisplay\r\n            }\r\n        })\r\n    }\r\n\r\n    // Toggle the feedback popup window when \"leave\" button is clicked\r\n    toggleFeedback = () => {\r\n        this.setState((prevState) => {\r\n            return { feedbackDisplay: !prevState.feedbackDisplay }\r\n        })\r\n    }\r\n\r\n    // Change the state of current page\r\n    togglePageTitle = (page) => {\r\n        this.setState(() => {\r\n            return { currentPage: page };\r\n        })\r\n    }\r\n\r\n    // allows the card that needs to be update to communicate with Edit form.\r\n    passEdit = (cardData) => {\r\n        this.setState({\r\n            tempEditData: cardData,\r\n            editDisplay: true,\r\n            coverDisplay: true\r\n        })\r\n    }\r\n\r\n    // disbands the group\r\n    disbandGroup = async (card) => {\r\n        this.toggleEditForm();\r\n\r\n        const response = await fetch(api.base + api.handlers.groups + \"/\" + card._id, {\r\n            method: 'DELETE',\r\n            headers: new Headers({\r\n                \"Authorization\": this.state.authToken\r\n            }),\r\n        });\r\n        if (response.status >= 300) {\r\n            this.toggleOnError(response.body);\r\n            return;\r\n        } else {\r\n            this.valueChange()\r\n        }\r\n    }\r\n\r\n    // toggles the popup window when disbanding a group\r\n    togglePopUp = () => {\r\n        this.setState((prevState) => {\r\n            return { popUpDisplay: !prevState.popUpDisplay };\r\n        })\r\n    }\r\n\r\n    // toggles the add course menu\r\n    toggleAddCourse = () => {\r\n        this.setState((prevState) => {\r\n            return {\r\n                addCourseDisplay: !prevState.addCourseDisplay,\r\n                coverDisplay: !prevState.coverDisplay\r\n            }\r\n        })\r\n    }\r\n\r\n    // will not show filter and create group buttons when on the profile page\r\n    toggleTwoButtons = (state) => {\r\n        this.setState({ twoButtonDisplay: state })\r\n    }\r\n\r\n    // allows child components to toggle error message when their fetch goes wrong\r\n    toggleOnError = (errorObj) => {\r\n        if (errorObj) {\r\n            this.setState({\r\n                errorDisplay: true,\r\n                errorMessage: errorObj.message\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let content = null;\r\n        if (!this.state.authToken || this.state.authToken === \"null\") {\r\n            content = (\r\n                <div>\r\n                    <main>\r\n                        <img className='loginLogo' src='img/loginLogo.png' alt='Round Table Logo'></img>\r\n                        <div className='loginBG'>\r\n                            <div className='login'>\r\n                                <div className='login-form text-center container'>\r\n                                        <div className=\"row justify-content-center\">\r\n                                            <div className=\"col\">\r\n                                                <SignUp setAuthToken={this.setAuthToken} setUser={this.setUser} errorCallback={this.toggleOnError} fetch={this.fetch} setProfilePic={this.setProfilePic}/>\r\n                                            </div>\r\n                                            <div className=\"col\">\r\n                                                <Login setAuthToken={this.setAuthToken} setUser={this.setUser} errorCallback={this.toggleOnError} fetch={this.fetch} />\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                    </main>\r\n                </div>\r\n            )\r\n        } else {\r\n            content = (\r\n                <div>\r\n                    <Header userPhoto={this.state.userPhoto} page={this.state.currentPage} togglePage={this.togglePageTitle} user={this.state.user} errorCallback={this.toggleOnError} \r\n                    setAuthToken={this.setAuthToken} profileChanged={this.state.profileChanged} />\r\n                    {this.state.coverDisplay &&\r\n                        <div className=\"grey-cover\"></div>\r\n                    }\r\n                    <main>\r\n                        {this.state.twoButtonDisplay &&\r\n                            <div>\r\n                                <button id=\"options\" onClick={this.toggleFilter}>Show Filter</button>\r\n                                <button id=\"create\" onClick={this.toggleCreateForm}>Create A Group</button>\r\n                            </div>}\r\n                        <Create createDisplay={this.state.createDisplay} toggleForm={this.toggleCreateForm} courseList={this.state.myCourses}\r\n                            onSubmit={this.submitCreateForm} groupList={this.state.myGroups} toggleFeedback={this.toggleFeedback}\r\n                            feedbackInfo={this.state.feedbackInfo} feedbackDisplay={this.state.feedbackDisplay} user={this.state.user} errorCallback={this.toggleOnError} />\r\n                        {this.state.editDisplay &&\r\n                            <Edit editData={this.state.tempEditData} editDisplay={this.state.editDisplay} toggleForm={this.toggleEditForm} courseList={this.state.myCourses}\r\n                                onSubmit={this.submitEditForm} groupList={this.state.myGroups} onDisband={this.disbandGroup} togglePopUpForm={this.togglePopUp} user={this.state.user} errorCallback={this.toggleOnError} />\r\n                        }\r\n                        {this.state.popUpDisplay &&\r\n                            <Confirm toggleConfirm={this.togglePopUp} confirmFunction={this.disbandGroup} cardData={this.state.tempEditData} confirmDisplay={this.state.popUpDisplay} />\r\n                        }\r\n                        {this.state.addCourseDisplay &&\r\n                            <AddCourses toggleAddCourse={this.toggleAddCourse} courses={this.state.myCourses} user={this.state.user} getCourseCallback={this.getCourse} errorCallback={this.toggleOnError} wsUpdate={this.valueChange}/>\r\n                        }\r\n                        <JoinCreateFeedback feedbackDisplay={this.state.feedbackDisplay} toggleFeedback={this.toggleFeedback}\r\n                            feedbackInfo={this.state.feedbackInfo} />\r\n\r\n                        {this.state.errorDisplay &&\r\n                            <div className=\"popup\">\r\n                                <p>{this.state.errorMessage + \" Check your connection and refresh webpage.\"}</p>\r\n                            </div>\r\n                        }\r\n\r\n                        <Switch>\r\n                            <Route exact path='/myprofile' render={(props) => (<ProfilePage {...props} user={this.state.user} toggleAddCourse={this.toggleAddCourse} \r\n                            toggleTwoButtons={this.toggleTwoButtons} errorCallback={this.toggleOnError} authToken = {this.state.authToken} api = {api} getCurrentUser = {this.getCurrentUser}\r\n                            courses={this.state.myCourses} setProfilePic={this.setProfilePic}/>)} />\r\n                            <Route exact path='/mygroup' render={(props) => (<MyGroupPage {...props} cards={this.state.myGroups} loading={this.state.spinnerDisplay}\r\n                                wsUpdate = {this.valueChange} updateCallback={this.updateAppState} toggleFeedback={this.toggleFeedback} user={this.state.user} toggleEditForm={this.toggleEditForm}\r\n                                feedbackInfo={this.state.feedbackInfo} passEditCallback={this.passEdit} toggleTwoButtons={this.toggleTwoButtons} fetch={this.fetch}\r\n                                feedbackDisplay={this.state.feedbackDisplay} filterDisplay={this.state.filterDisplay} toggleFilter={this.toggleFilter} errorCallback={this.toggleOnError} />)} />\r\n                            <Route exact path='/home' render={(props) => (<Homepage {...props} wsUpdate = {this.valueChange} cards={this.state.myGroups} loading={this.state.spinnerDisplay}\r\n                                updateCallback={this.updateAppState} toggleFeedback={this.toggleFeedback} user={this.state.user} fetch={this.fetch}\r\n                                feedbackInfo={this.state.feedbackInfo} passEditCallback={this.passEdit} toggleTwoButtons={this.toggleTwoButtons}\r\n                                feedbackDisplay={this.state.feedbackDisplay} filterDisplay={this.state.filterDisplay} toggleFilter={this.toggleFilter} errorCallback={this.toggleOnError} />)} />\r\n                            <Route path='/group/:groupID' render={(props) => (<GroupDetailsPage {...props} wsUpdate = {this.valueChange} errorCallback={this.toggleOnError} toggleTwoButtons={this.toggleTwoButtons} user={this.state.user} />)} />\r\n                            <Redirect to='/home' />\r\n                        </Switch>\r\n\r\n                        {this.state.spinnerDisplay &&\r\n                            <div className=\"text-center\">\r\n                                <FontAwesomeIcon icon={faSpinner} size=\"lg\" spin />\r\n                            </div>\r\n                        }\r\n                    </main>\r\n                    <Footer />\r\n                </div>\r\n            )\r\n        }\r\n        return content;\r\n    }\r\n}\r\n\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './index.css';\r\nimport {BrowserRouter} from 'react-router-dom';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n// Change all these to database initialization\r\n\r\n// import firebase from 'firebase/app';\r\n// import 'firebase/auth';\r\n// import 'firebase/database';\r\n// import 'firebase/storage';\r\n\r\n// const firebaseConfig = {\r\n//     apiKey: \"AIzaSyDT26tVl3IFCzI96rZTlP2_J40LkHRP3_o\",\r\n//     authDomain: \"round-table-a62ad.firebaseapp.com\",\r\n//     databaseURL: \"https://round-table-a62ad.firebaseio.com\",\r\n//     projectId: \"round-table-a62ad\",\r\n//     storageBucket: \"round-table-a62ad.appspot.com\",\r\n//     messagingSenderId: \"1037437885077\",\r\n//     appId: \"1:1037437885077:web:65af9b83c6f281deec999c\",\r\n//     measurementId: \"G-0EECVGEW4V\"\r\n// };\r\n\r\n// firebase.initializeApp(firebaseConfig);\r\n\r\nReactDOM.render(<BrowserRouter><App /></BrowserRouter>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}